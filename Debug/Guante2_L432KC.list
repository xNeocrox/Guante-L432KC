
Guante2_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c29c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001730  0800c430  0800c430  0001c430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db60  0800db60  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db60  0800db60  0001db60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db68  0800db68  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db68  0800db68  0001db68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db6c  0800db6c  0001db6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800db70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f24  2000009c  0800dc0c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc0  0800dc0c  00021fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002818b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004833  00000000  00000000  00048257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  0004ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  0004e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002500c  00000000  00000000  000505e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bbe  00000000  00000000  000755f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7787  00000000  00000000  000961b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086c0  00000000  00000000  0017d98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c414 	.word	0x0800c414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800c414 	.word	0x0800c414

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fe89 	bl	8002b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 fa78 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 fc5c 	bl	8001748 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e90:	f000 fb0a 	bl	80014a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e94:	f000 fbac 	bl	80015f0 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000e98:	f000 fbee 	bl	8001678 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000e9c:	f000 fc24 	bl	80016e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //????

  HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	4822      	ldr	r0, [pc, #136]	; (8000f2c <main+0xac>)
 8000ea2:	f005 fc8f 	bl	80067c4 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_TC);
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <main+0xb0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <main+0xb0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb4:	601a      	str	r2, [r3, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eb6:	f006 fe67 	bl	8007b88 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (16, sizeof(struct Datos_Analogicos), &Queue1_attributes);
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <main+0xb4>)
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2010      	movs	r0, #16
 8000ec0:	f006 ff98 	bl	8007df4 <osMessageQueueNew>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <main+0xb8>)
 8000ec8:	6013      	str	r3, [r2, #0]

  /* creation of Queue2 */
  Queue2Handle = osMessageQueueNew (16, sizeof(struct Datos_Gyro), &Queue2_attributes);
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <main+0xbc>)
 8000ecc:	2102      	movs	r1, #2
 8000ece:	2010      	movs	r0, #16
 8000ed0:	f006 ff90 	bl	8007df4 <osMessageQueueNew>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <main+0xc0>)
 8000ed8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarea1 */
  Tarea1Handle = osThreadNew(Inicializacion, NULL, &Tarea1_attributes);
 8000eda:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <main+0xc4>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <main+0xc8>)
 8000ee0:	f006 fe9c 	bl	8007c1c <osThreadNew>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <main+0xcc>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* creation of Tarea2 */
  Tarea2Handle = osThreadNew(AnalogRead, NULL, &Tarea2_attributes);
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <main+0xd0>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <main+0xd4>)
 8000ef0:	f006 fe94 	bl	8007c1c <osThreadNew>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <main+0xd8>)
 8000ef8:	6013      	str	r3, [r2, #0]

  /* creation of Tarea3 */
  Tarea3Handle = osThreadNew(Gyro, NULL, &Tarea3_attributes);
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <main+0xdc>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4818      	ldr	r0, [pc, #96]	; (8000f60 <main+0xe0>)
 8000f00:	f006 fe8c 	bl	8007c1c <osThreadNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <main+0xe4>)
 8000f08:	6013      	str	r3, [r2, #0]

  /* creation of Tarea4 */
  Tarea4Handle = osThreadNew(EnvioDatos, NULL, &Tarea4_attributes);
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <main+0xe8>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <main+0xec>)
 8000f10:	f006 fe84 	bl	8007c1c <osThreadNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <main+0xf0>)
 8000f18:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Flag */
  FlagHandle = osEventFlagsNew(&Flag_attributes);
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <main+0xf4>)
 8000f1c:	f006 ff2b 	bl	8007d76 <osEventFlagsNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <main+0xf8>)
 8000f24:	6013      	str	r3, [r2, #0]
   SSD1306_Puts("calibrar", &Font_7x10, 1);
   SSD1306_UpdateScreen();*/
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f26:	f006 fe53 	bl	8007bd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <main+0xaa>
 8000f2c:	20001f24 	.word	0x20001f24
 8000f30:	20001ea0 	.word	0x20001ea0
 8000f34:	0800da50 	.word	0x0800da50
 8000f38:	20001e34 	.word	0x20001e34
 8000f3c:	0800da68 	.word	0x0800da68
 8000f40:	20001de0 	.word	0x20001de0
 8000f44:	0800d9c0 	.word	0x0800d9c0
 8000f48:	08001865 	.word	0x08001865
 8000f4c:	20001f74 	.word	0x20001f74
 8000f50:	0800d9e4 	.word	0x0800d9e4
 8000f54:	08001d09 	.word	0x08001d09
 8000f58:	20001f78 	.word	0x20001f78
 8000f5c:	0800da08 	.word	0x0800da08
 8000f60:	08001fb9 	.word	0x08001fb9
 8000f64:	20001e30 	.word	0x20001e30
 8000f68:	0800da2c 	.word	0x0800da2c
 8000f6c:	08002145 	.word	0x08002145
 8000f70:	20001e9c 	.word	0x20001e9c
 8000f74:	0800da80 	.word	0x0800da80
 8000f78:	20001f70 	.word	0x20001f70

08000f7c <MPU6050_Init>:
  }
  /* USER CODE END 3 */
}

void MPU6050_Init (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2275      	movs	r2, #117	; 0x75
 8000f94:	21d0      	movs	r1, #208	; 0xd0
 8000f96:	4823      	ldr	r0, [pc, #140]	; (8001024 <MPU6050_Init+0xa8>)
 8000f98:	f003 fe3e 	bl	8004c18 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b68      	cmp	r3, #104	; 0x68
 8000fa0:	d13b      	bne.n	800101a <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	226b      	movs	r2, #107	; 0x6b
 8000fb8:	21d0      	movs	r1, #208	; 0xd0
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <MPU6050_Init+0xa8>)
 8000fbc:	f003 fd18 	bl	80049f0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	1dbb      	adds	r3, r7, #6
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2219      	movs	r2, #25
 8000fd6:	21d0      	movs	r1, #208	; 0xd0
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <MPU6050_Init+0xa8>)
 8000fda:	f003 fd09 	bl	80049f0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	221c      	movs	r2, #28
 8000ff4:	21d0      	movs	r1, #208	; 0xd0
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <MPU6050_Init+0xa8>)
 8000ff8:	f003 fcfa 	bl	80049f0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	221b      	movs	r2, #27
 8001012:	21d0      	movs	r1, #208	; 0xd0
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MPU6050_Init+0xa8>)
 8001016:	f003 fceb 	bl	80049f0 <HAL_I2C_Mem_Write>
	}

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001de4 	.word	0x20001de4

08001028 <MPU6050_Read_Accel>:

struct AccelFunction MPU6050_Read_Accel (void)
{
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b08e      	sub	sp, #56	; 0x38
 800102e:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	int16_t Accel_X_RAW = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Accel_Y_RAW = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Accel_Z_RAW = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	847b      	strh	r3, [r7, #34]	; 0x22
	struct AccelFunction datos;

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2306      	movs	r3, #6
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	223b      	movs	r2, #59	; 0x3b
 8001050:	21d0      	movs	r1, #208	; 0xd0
 8001052:	4887      	ldr	r0, [pc, #540]	; (8001270 <MPU6050_Read_Accel+0x248>)
 8001054:	f003 fde0 	bl	8004c18 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7c7b      	ldrb	r3, [r7, #17]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	84fb      	strh	r3, [r7, #38]	; 0x26
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7cfb      	ldrb	r3, [r7, #19]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	84bb      	strh	r3, [r7, #36]	; 0x24
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7d7b      	ldrb	r3, [r7, #21]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	847b      	strh	r3, [r7, #34]	; 0x22

	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/
	datos.Ax = atan(-1*(Accel_X_RAW/A_R)/sqrt(pow((Accel_Y_RAW/A_R),2) + pow((Accel_Z_RAW/A_R),2)))*RAD_TO_DEG;
 8001082:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f9f4 	bl	8000474 <__aeabi_i2d>
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b78      	ldr	r3, [pc, #480]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 8001092:	f7ff fb83 	bl	800079c <__aeabi_ddiv>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4614      	mov	r4, r2
 800109c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80010a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9e5 	bl	8000474 <__aeabi_i2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 80010b0:	f7ff fb74 	bl	800079c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	ec43 2b17 	vmov	d7, r2, r3
 80010bc:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8001260 <MPU6050_Read_Accel+0x238>
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f00a f9c4 	bl	800b454 <pow>
 80010cc:	ec59 8b10 	vmov	r8, r9, d0
 80010d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9cd 	bl	8000474 <__aeabi_i2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 80010e0:	f7ff fb5c 	bl	800079c <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	ec43 2b17 	vmov	d7, r2, r3
 80010ec:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001260 <MPU6050_Read_Accel+0x238>
 80010f0:	eeb0 0a47 	vmov.f32	s0, s14
 80010f4:	eef0 0a67 	vmov.f32	s1, s15
 80010f8:	f00a f9ac 	bl	800b454 <pow>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4640      	mov	r0, r8
 8001102:	4649      	mov	r1, r9
 8001104:	f7ff f86a 	bl	80001dc <__adddf3>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	ec43 2b17 	vmov	d7, r2, r3
 8001110:	eeb0 0a47 	vmov.f32	s0, s14
 8001114:	eef0 0a67 	vmov.f32	s1, s15
 8001118:	f00a fa4a 	bl	800b5b0 <sqrt>
 800111c:	ec53 2b10 	vmov	r2, r3, d0
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff fb3a 	bl	800079c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	ec43 2b17 	vmov	d7, r2, r3
 8001130:	eeb0 0a47 	vmov.f32	s0, s14
 8001134:	eef0 0a67 	vmov.f32	s1, s15
 8001138:	f009 ffe2 	bl	800b100 <atan>
 800113c:	ec51 0b10 	vmov	r0, r1, d0
 8001140:	a349      	add	r3, pc, #292	; (adr r3, 8001268 <MPU6050_Read_Accel+0x240>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fcc9 	bl	8000ae8 <__aeabi_d2f>
 8001156:	4603      	mov	r3, r0
 8001158:	60bb      	str	r3, [r7, #8]
	datos.Ay = atan((Accel_Y_RAW/A_R)/sqrt(pow((Accel_X_RAW/A_R),2) + pow((Accel_Z_RAW/A_R),2)))*RAD_TO_DEG;
 800115a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f988 	bl	8000474 <__aeabi_i2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 800116a:	f7ff fb17 	bl	800079c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f97a 	bl	8000474 <__aeabi_i2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 8001186:	f7ff fb09 	bl	800079c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	ec43 2b17 	vmov	d7, r2, r3
 8001192:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001260 <MPU6050_Read_Accel+0x238>
 8001196:	eeb0 0a47 	vmov.f32	s0, s14
 800119a:	eef0 0a67 	vmov.f32	s1, s15
 800119e:	f00a f959 	bl	800b454 <pow>
 80011a2:	ec59 8b10 	vmov	r8, r9, d0
 80011a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f962 	bl	8000474 <__aeabi_i2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MPU6050_Read_Accel+0x24c>)
 80011b6:	f7ff faf1 	bl	800079c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	ec43 2b17 	vmov	d7, r2, r3
 80011c2:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8001260 <MPU6050_Read_Accel+0x238>
 80011c6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ca:	eef0 0a67 	vmov.f32	s1, s15
 80011ce:	f00a f941 	bl	800b454 <pow>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7fe ffff 	bl	80001dc <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b17 	vmov	d7, r2, r3
 80011e6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ea:	eef0 0a67 	vmov.f32	s1, s15
 80011ee:	f00a f9df 	bl	800b5b0 <sqrt>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff facf 	bl	800079c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b17 	vmov	d7, r2, r3
 8001206:	eeb0 0a47 	vmov.f32	s0, s14
 800120a:	eef0 0a67 	vmov.f32	s1, s15
 800120e:	f009 ff77 	bl	800b100 <atan>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	a314      	add	r3, pc, #80	; (adr r3, 8001268 <MPU6050_Read_Accel+0x240>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f994 	bl	8000548 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc5e 	bl	8000ae8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]

	return datos;
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	ee07 2a10 	vmov	s14, r2
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a47 	vmov.f32	s0, s14
 8001250:	eef0 0a67 	vmov.f32	s1, s15
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	40000000 	.word	0x40000000
 8001268:	1615ebfb 	.word	0x1615ebfb
 800126c:	404ca5dc 	.word	0x404ca5dc
 8001270:	20001de4 	.word	0x20001de4
 8001274:	40d00000 	.word	0x40d00000

08001278 <MPU6050_Read_Gyro>:

struct GyroFunction MPU6050_Read_Gyro (void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b092      	sub	sp, #72	; 0x48
 800127c:	af04      	add	r7, sp, #16
	int16_t Gyro_X_RAW = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	86fb      	strh	r3, [r7, #54]	; 0x36
	int16_t Gyro_Y_RAW = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t Gyro_Z_RAW = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	867b      	strh	r3, [r7, #50]	; 0x32

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	2306      	movs	r3, #6
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2243      	movs	r2, #67	; 0x43
 800129e:	21d0      	movs	r1, #208	; 0xd0
 80012a0:	4835      	ldr	r0, [pc, #212]	; (8001378 <MPU6050_Read_Gyro+0x100>)
 80012a2:	f003 fcb9 	bl	8004c18 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80012a6:	7c3b      	ldrb	r3, [r7, #16]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	86fb      	strh	r3, [r7, #54]	; 0x36
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80012b4:	7cbb      	ldrb	r3, [r7, #18]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	86bb      	strh	r3, [r7, #52]	; 0x34
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80012c2:	7d3b      	ldrb	r3, [r7, #20]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	867b      	strh	r3, [r7, #50]	; 0x32
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	datos.Gx = Gyro_X_RAW/131.0;
 80012d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8cd 	bl	8000474 <__aeabi_i2d>
 80012da:	a325      	add	r3, pc, #148	; (adr r3, 8001370 <MPU6050_Read_Gyro+0xf8>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fa5c 	bl	800079c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fbfc 	bl	8000ae8 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	61bb      	str	r3, [r7, #24]
	datos.Gy = Gyro_Y_RAW/131.0;
 80012f4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8bb 	bl	8000474 <__aeabi_i2d>
 80012fe:	a31c      	add	r3, pc, #112	; (adr r3, 8001370 <MPU6050_Read_Gyro+0xf8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff fa4a 	bl	800079c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fbea 	bl	8000ae8 <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	61fb      	str	r3, [r7, #28]
	datos.Gz = Gyro_Z_RAW/131.0;
 8001318:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f8a9 	bl	8000474 <__aeabi_i2d>
 8001322:	a313      	add	r3, pc, #76	; (adr r3, 8001370 <MPU6050_Read_Gyro+0xf8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fa38 	bl	800079c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fbd8 	bl	8000ae8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	623b      	str	r3, [r7, #32]

	return datos;
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	f107 0218 	add.w	r2, r7, #24
 8001344:	ca07      	ldmia	r2, {r0, r1, r2}
 8001346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800134a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800134c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	ee06 1a90 	vmov	s13, r1
 8001354:	ee07 2a10 	vmov	s14, r2
 8001358:	ee07 3a90 	vmov	s15, r3
}
 800135c:	eeb0 0a66 	vmov.f32	s0, s13
 8001360:	eef0 0a47 	vmov.f32	s1, s14
 8001364:	eeb0 1a67 	vmov.f32	s2, s15
 8001368:	3738      	adds	r7, #56	; 0x38
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	00000000 	.word	0x00000000
 8001374:	40606000 	.word	0x40606000
 8001378:	20001de4 	.word	0x20001de4

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ac      	sub	sp, #176	; 0xb0
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001386:	2244      	movs	r2, #68	; 0x44
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f009 feae 	bl	800b0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2254      	movs	r2, #84	; 0x54
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 fea0 	bl	800b0ec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ac:	f004 f822 	bl	80053f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <SystemClock_Config+0x128>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <SystemClock_Config+0x128>)
 80013b8:	f023 0318 	bic.w	r3, r3, #24
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013c0:	2314      	movs	r3, #20
 80013c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013ec:	2310      	movs	r3, #16
 80013ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f867 	bl	80054dc <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001414:	f000 fee2 	bl	80021dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2303      	movs	r3, #3
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800142c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001430:	2101      	movs	r1, #1
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fc72 	bl	8005d1c <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800143e:	f000 fecd 	bl	80021dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001442:	f244 0341 	movw	r3, #16449	; 0x4041
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001456:	2301      	movs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800145e:	2310      	movs	r3, #16
 8001460:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001462:	2307      	movs	r3, #7
 8001464:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800146e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001472:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fe56 	bl	8006128 <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001482:	f000 feab 	bl	80021dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001486:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148a:	f003 ffd1 	bl	8005430 <HAL_PWREx_ControlVoltageScaling>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001494:	f000 fea2 	bl	80021dc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001498:	f005 f83a 	bl	8006510 <HAL_RCCEx_EnableMSIPLLMode>
}
 800149c:	bf00      	nop
 800149e:	37b0      	adds	r7, #176	; 0xb0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014be:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <MX_ADC1_Init+0x130>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014de:	2204      	movs	r2, #4
 80014e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e2:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014f0:	2205      	movs	r2, #5
 80014f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_ADC1_Init+0x12c>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001520:	f001 fdc6 	bl	80030b0 <HAL_ADC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800152a:	f000 fe57 	bl	80021dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_ADC1_Init+0x134>)
 8001530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001532:	2306      	movs	r3, #6
 8001534:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001536:	2307      	movs	r3, #7
 8001538:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800153a:	237f      	movs	r3, #127	; 0x7f
 800153c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153e:	2304      	movs	r3, #4
 8001540:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4822      	ldr	r0, [pc, #136]	; (80015d4 <MX_ADC1_Init+0x12c>)
 800154c:	f002 f82a 	bl	80035a4 <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001556:	f000 fe41 	bl	80021dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_ADC1_Init+0x138>)
 800155c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800155e:	230c      	movs	r3, #12
 8001560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001568:	f002 f81c 	bl	80035a4 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001572:	f000 fe33 	bl	80021dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_ADC1_Init+0x13c>)
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800157a:	2312      	movs	r3, #18
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_ADC1_Init+0x12c>)
 8001584:	f002 f80e 	bl	80035a4 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800158e:	f000 fe25 	bl	80021dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_ADC1_Init+0x140>)
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001596:	2318      	movs	r3, #24
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80015a0:	f002 f800 	bl	80035a4 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80015aa:	f000 fe17 	bl	80021dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_ADC1_Init+0x144>)
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_ADC1_Init+0x12c>)
 80015be:	f001 fff1 	bl	80035a4 <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80015c8:	f000 fe08 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20001e38 	.word	0x20001e38
 80015d8:	50040000 	.word	0x50040000
 80015dc:	21800100 	.word	0x21800100
 80015e0:	25b00200 	.word	0x25b00200
 80015e4:	2a000400 	.word	0x2a000400
 80015e8:	2e300800 	.word	0x2e300800
 80015ec:	32601000 	.word	0x32601000

080015f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_I2C1_Init+0x7c>)
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_I2C1_Init+0x80>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_I2C1_Init+0x7c>)
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <MX_I2C1_Init+0x84>)
 80015fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_I2C1_Init+0x7c>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_I2C1_Init+0x7c>)
 8001608:	2201      	movs	r2, #1
 800160a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_I2C1_Init+0x7c>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_I2C1_Init+0x7c>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_I2C1_Init+0x7c>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_I2C1_Init+0x7c>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C1_Init+0x7c>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162a:	4810      	ldr	r0, [pc, #64]	; (800166c <MX_I2C1_Init+0x7c>)
 800162c:	f003 f85c 	bl	80046e8 <HAL_I2C_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001636:	f000 fdd1 	bl	80021dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_I2C1_Init+0x7c>)
 800163e:	f003 fe21 	bl	8005284 <HAL_I2CEx_ConfigAnalogFilter>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001648:	f000 fdc8 	bl	80021dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800164c:	2100      	movs	r1, #0
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <MX_I2C1_Init+0x7c>)
 8001650:	f003 fe63 	bl	800531a <HAL_I2CEx_ConfigDigitalFilter>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800165a:	f000 fdbf 	bl	80021dc <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800165e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001662:	f003 fea7 	bl	80053b4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20001de4 	.word	0x20001de4
 8001670:	40005400 	.word	0x40005400
 8001674:	00100413 	.word	0x00100413

08001678 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM6_Init+0x68>)
 800168a:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <MX_TIM6_Init+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 320;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_TIM6_Init+0x68>)
 8001690:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001694:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_TIM6_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_TIM6_Init+0x68>)
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_TIM6_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_TIM6_Init+0x68>)
 80016ac:	f005 f832 	bl	8006714 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80016b6:	f000 fd91 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <MX_TIM6_Init+0x68>)
 80016c8:	f005 fa86 	bl	8006bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016d2:	f000 fd83 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20001f24 	.word	0x20001f24
 80016e4:	40001000 	.word	0x40001000

080016e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_USART1_UART_Init+0x58>)
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <MX_USART1_UART_Init+0x5c>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_USART1_UART_Init+0x58>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_USART1_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART1_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART1_UART_Init+0x58>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART1_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART1_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART1_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART1_UART_Init+0x58>)
 800172c:	f005 fad8 	bl	8006ce0 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001736:	f000 fd51 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20001ea0 	.word	0x20001ea0
 8001744:	40013800 	.word	0x40013800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <MX_GPIO_Init+0xe4>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <MX_GPIO_Init+0xe4>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <MX_GPIO_Init+0xe4>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <MX_GPIO_Init+0xe4>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a2c      	ldr	r2, [pc, #176]	; (800182c <MX_GPIO_Init+0xe4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <MX_GPIO_Init+0xe4>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <MX_GPIO_Init+0xe4>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <MX_GPIO_Init+0xe4>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_GPIO_Init+0xe4>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	210a      	movs	r1, #10
 80017aa:	4821      	ldr	r0, [pc, #132]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017ac:	f002 ff52 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f002 ff4b 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017be:	2301      	movs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_GPIO_Init+0xec>)
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017d2:	f002 fdd5 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin;
 80017d6:	230a      	movs	r3, #10
 80017d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017ee:	f002 fdc7 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f002 fdb7 	bl	8004380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	2006      	movs	r0, #6
 8001818:	f002 fcfd 	bl	8004216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800181c:	2006      	movs	r0, #6
 800181e:	f002 fd16 	bl	800424e <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400
 8001834:	10110000 	.word	0x10110000

08001838 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d106      	bne.n	8001856 <HAL_GPIO_EXTI_Callback+0x1e>
		//estado = 1;
		xEventGroupSetBitsFromISR(FlagHandle, 1, pdFALSE);
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_GPIO_EXTI_Callback+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	2101      	movs	r1, #1
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fe47 	bl	80084e4 <xEventGroupSetBitsFromISR>

	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001f70 	.word	0x20001f70

08001864 <Inicializacion>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Inicializacion */
void Inicializacion(void *argument)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	2102      	movs	r1, #2
 8001870:	48c6      	ldr	r0, [pc, #792]	; (8001b8c <Inicializacion+0x328>)
 8001872:	f002 feef 	bl	8004654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f002 fee8 	bl	8004654 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(FlagHandle,1,pdFALSE,pdFALSE,portMAX_DELAY);
 8001884:	4bc2      	ldr	r3, [pc, #776]	; (8001b90 <Inicializacion+0x32c>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	2200      	movs	r2, #0
 8001892:	2101      	movs	r1, #1
 8001894:	f006 fc66 	bl	8008164 <xEventGroupWaitBits>
	  xEventGroupClearBits(FlagHandle, 2);
 8001898:	4bbd      	ldr	r3, [pc, #756]	; (8001b90 <Inicializacion+0x32c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 fd2e 	bl	8008300 <xEventGroupClearBits>

	  SSD1306_Clear();
 80018a4:	f000 ff49 	bl	800273a <SSD1306_Clear>

	  SSD1306_GotoXY(0, 0);
 80018a8:	2100      	movs	r1, #0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 fd42 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("CALIBRACION", &Font_11x18, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	49b8      	ldr	r1, [pc, #736]	; (8001b94 <Inicializacion+0x330>)
 80018b4:	48b8      	ldr	r0, [pc, #736]	; (8001b98 <Inicializacion+0x334>)
 80018b6:	f000 fdd3 	bl	8002460 <SSD1306_Puts>

	  SSD1306_GotoXY(0, 30);
 80018ba:	211e      	movs	r1, #30
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 fd39 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("Abre la", &Font_7x10, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	49b5      	ldr	r1, [pc, #724]	; (8001b9c <Inicializacion+0x338>)
 80018c6:	48b6      	ldr	r0, [pc, #728]	; (8001ba0 <Inicializacion+0x33c>)
 80018c8:	f000 fdca 	bl	8002460 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 50);
 80018cc:	2132      	movs	r1, #50	; 0x32
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fd30 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("mano", &Font_7x10, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	49b1      	ldr	r1, [pc, #708]	; (8001b9c <Inicializacion+0x338>)
 80018d8:	48b2      	ldr	r0, [pc, #712]	; (8001ba4 <Inicializacion+0x340>)
 80018da:	f000 fdc1 	bl	8002460 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80018de:	f000 fc83 	bl	80021e8 <SSD1306_UpdateScreen>
	 		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
	 		  osDelay(500);
	 	  }

	 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);*/
	  SSD1306_GotoXY(90, 35);
 80018e2:	2123      	movs	r1, #35	; 0x23
 80018e4:	205a      	movs	r0, #90	; 0x5a
 80018e6:	f000 fd25 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("3", &Font_11x18, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	49a9      	ldr	r1, [pc, #676]	; (8001b94 <Inicializacion+0x330>)
 80018ee:	48ae      	ldr	r0, [pc, #696]	; (8001ba8 <Inicializacion+0x344>)
 80018f0:	f000 fdb6 	bl	8002460 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80018f4:	f000 fc78 	bl	80021e8 <SSD1306_UpdateScreen>
	  osDelay(1000);
 80018f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fc:	f006 fa20 	bl	8007d40 <osDelay>

	  SSD1306_GotoXY(90, 35);
 8001900:	2123      	movs	r1, #35	; 0x23
 8001902:	205a      	movs	r0, #90	; 0x5a
 8001904:	f000 fd16 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("2", &Font_11x18, 1);
 8001908:	2201      	movs	r2, #1
 800190a:	49a2      	ldr	r1, [pc, #648]	; (8001b94 <Inicializacion+0x330>)
 800190c:	48a7      	ldr	r0, [pc, #668]	; (8001bac <Inicializacion+0x348>)
 800190e:	f000 fda7 	bl	8002460 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001912:	f000 fc69 	bl	80021e8 <SSD1306_UpdateScreen>
	  osDelay(1000);
 8001916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800191a:	f006 fa11 	bl	8007d40 <osDelay>

	  SSD1306_GotoXY(90, 35);
 800191e:	2123      	movs	r1, #35	; 0x23
 8001920:	205a      	movs	r0, #90	; 0x5a
 8001922:	f000 fd07 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("1", &Font_11x18, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	499a      	ldr	r1, [pc, #616]	; (8001b94 <Inicializacion+0x330>)
 800192a:	48a1      	ldr	r0, [pc, #644]	; (8001bb0 <Inicializacion+0x34c>)
 800192c:	f000 fd98 	bl	8002460 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001930:	f000 fc5a 	bl	80021e8 <SSD1306_UpdateScreen>
	  osDelay(1000);
 8001934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001938:	f006 fa02 	bl	8007d40 <osDelay>

	  SSD1306_GotoXY(90, 35);
 800193c:	2123      	movs	r1, #35	; 0x23
 800193e:	205a      	movs	r0, #90	; 0x5a
 8001940:	f000 fcf8 	bl	8002334 <SSD1306_GotoXY>
	  SSD1306_Puts("0", &Font_11x18, 1);
 8001944:	2201      	movs	r2, #1
 8001946:	4993      	ldr	r1, [pc, #588]	; (8001b94 <Inicializacion+0x330>)
 8001948:	489a      	ldr	r0, [pc, #616]	; (8001bb4 <Inicializacion+0x350>)
 800194a:	f000 fd89 	bl	8002460 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800194e:	f000 fc4b 	bl	80021e8 <SSD1306_UpdateScreen>
	  osDelay(1000);
 8001952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001956:	f006 f9f3 	bl	8007d40 <osDelay>
	  SSD1306_DrawFilledRectangle(0, 20, 128, 45, 0x00);
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	232d      	movs	r3, #45	; 0x2d
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	2114      	movs	r1, #20
 8001964:	2000      	movs	r0, #0
 8001966:	f000 fe9b 	bl	80026a0 <SSD1306_DrawFilledRectangle>
	  SSD1306_UpdateScreen();
 800196a:	f000 fc3d 	bl	80021e8 <SSD1306_UpdateScreen>


	 		 HAL_ADC_Start(&hadc1);
 800196e:	4892      	ldr	r0, [pc, #584]	; (8001bb8 <Inicializacion+0x354>)
 8001970:	f001 fce6 	bl	8003340 <HAL_ADC_Start>
	 		 status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001974:	2101      	movs	r1, #1
 8001976:	4890      	ldr	r0, [pc, #576]	; (8001bb8 <Inicializacion+0x354>)
 8001978:	f001 fd78 	bl	800346c <HAL_ADC_PollForConversion>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <Inicializacion+0x12e>
	 			 analog_min[0] = HAL_ADC_GetValue(&hadc1);
 8001986:	488c      	ldr	r0, [pc, #560]	; (8001bb8 <Inicializacion+0x354>)
 8001988:	f001 fdff 	bl	800358a <HAL_ADC_GetValue>
 800198c:	4603      	mov	r3, r0
 800198e:	4a8b      	ldr	r2, [pc, #556]	; (8001bbc <Inicializacion+0x358>)
 8001990:	6013      	str	r3, [r2, #0]
	 		 }

	 		 status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001992:	2101      	movs	r1, #1
 8001994:	4888      	ldr	r0, [pc, #544]	; (8001bb8 <Inicializacion+0x354>)
 8001996:	f001 fd69 	bl	800346c <HAL_ADC_PollForConversion>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <Inicializacion+0x14c>
	 			 analog_min[1] = HAL_ADC_GetValue(&hadc1);
 80019a4:	4884      	ldr	r0, [pc, #528]	; (8001bb8 <Inicializacion+0x354>)
 80019a6:	f001 fdf0 	bl	800358a <HAL_ADC_GetValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a83      	ldr	r2, [pc, #524]	; (8001bbc <Inicializacion+0x358>)
 80019ae:	6053      	str	r3, [r2, #4]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 80019b0:	2101      	movs	r1, #1
 80019b2:	4881      	ldr	r0, [pc, #516]	; (8001bb8 <Inicializacion+0x354>)
 80019b4:	f001 fd5a 	bl	800346c <HAL_ADC_PollForConversion>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <Inicializacion+0x16a>
	 			 analog_min[2] = HAL_ADC_GetValue(&hadc1);
 80019c2:	487d      	ldr	r0, [pc, #500]	; (8001bb8 <Inicializacion+0x354>)
 80019c4:	f001 fde1 	bl	800358a <HAL_ADC_GetValue>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a7c      	ldr	r2, [pc, #496]	; (8001bbc <Inicializacion+0x358>)
 80019cc:	6093      	str	r3, [r2, #8]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 80019ce:	2101      	movs	r1, #1
 80019d0:	4879      	ldr	r0, [pc, #484]	; (8001bb8 <Inicializacion+0x354>)
 80019d2:	f001 fd4b 	bl	800346c <HAL_ADC_PollForConversion>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <Inicializacion+0x188>
	 			 analog_min[3] = HAL_ADC_GetValue(&hadc1);
 80019e0:	4875      	ldr	r0, [pc, #468]	; (8001bb8 <Inicializacion+0x354>)
 80019e2:	f001 fdd2 	bl	800358a <HAL_ADC_GetValue>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a74      	ldr	r2, [pc, #464]	; (8001bbc <Inicializacion+0x358>)
 80019ea:	60d3      	str	r3, [r2, #12]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 80019ec:	2101      	movs	r1, #1
 80019ee:	4872      	ldr	r0, [pc, #456]	; (8001bb8 <Inicializacion+0x354>)
 80019f0:	f001 fd3c 	bl	800346c <HAL_ADC_PollForConversion>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <Inicializacion+0x1a6>
	 			 analog_min[4] = HAL_ADC_GetValue(&hadc1);
 80019fe:	486e      	ldr	r0, [pc, #440]	; (8001bb8 <Inicializacion+0x354>)
 8001a00:	f001 fdc3 	bl	800358a <HAL_ADC_GetValue>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a6d      	ldr	r2, [pc, #436]	; (8001bbc <Inicializacion+0x358>)
 8001a08:	6113      	str	r3, [r2, #16]
	 		 }

	 		 HAL_ADC_Stop(&hadc1);
 8001a0a:	486b      	ldr	r0, [pc, #428]	; (8001bb8 <Inicializacion+0x354>)
 8001a0c:	f001 fcfb 	bl	8003406 <HAL_ADC_Stop>
	 		  osDelay(500);
	 	  }

	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);*/

		  SSD1306_GotoXY(0, 30);
 8001a10:	211e      	movs	r1, #30
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 fc8e 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("Cierra la", &Font_7x10, 1);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4960      	ldr	r1, [pc, #384]	; (8001b9c <Inicializacion+0x338>)
 8001a1c:	4868      	ldr	r0, [pc, #416]	; (8001bc0 <Inicializacion+0x35c>)
 8001a1e:	f000 fd1f 	bl	8002460 <SSD1306_Puts>
		  SSD1306_GotoXY(0, 50);
 8001a22:	2132      	movs	r1, #50	; 0x32
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 fc85 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("mano", &Font_7x10, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	495b      	ldr	r1, [pc, #364]	; (8001b9c <Inicializacion+0x338>)
 8001a2e:	485d      	ldr	r0, [pc, #372]	; (8001ba4 <Inicializacion+0x340>)
 8001a30:	f000 fd16 	bl	8002460 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001a34:	f000 fbd8 	bl	80021e8 <SSD1306_UpdateScreen>

		  SSD1306_GotoXY(90, 35);
 8001a38:	2123      	movs	r1, #35	; 0x23
 8001a3a:	205a      	movs	r0, #90	; 0x5a
 8001a3c:	f000 fc7a 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("3", &Font_11x18, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	4954      	ldr	r1, [pc, #336]	; (8001b94 <Inicializacion+0x330>)
 8001a44:	4858      	ldr	r0, [pc, #352]	; (8001ba8 <Inicializacion+0x344>)
 8001a46:	f000 fd0b 	bl	8002460 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001a4a:	f000 fbcd 	bl	80021e8 <SSD1306_UpdateScreen>
		  osDelay(1000);
 8001a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a52:	f006 f975 	bl	8007d40 <osDelay>

		  SSD1306_GotoXY(90, 35);
 8001a56:	2123      	movs	r1, #35	; 0x23
 8001a58:	205a      	movs	r0, #90	; 0x5a
 8001a5a:	f000 fc6b 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("2", &Font_11x18, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	494c      	ldr	r1, [pc, #304]	; (8001b94 <Inicializacion+0x330>)
 8001a62:	4852      	ldr	r0, [pc, #328]	; (8001bac <Inicializacion+0x348>)
 8001a64:	f000 fcfc 	bl	8002460 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001a68:	f000 fbbe 	bl	80021e8 <SSD1306_UpdateScreen>
		  osDelay(1000);
 8001a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a70:	f006 f966 	bl	8007d40 <osDelay>

		  SSD1306_GotoXY(90, 35);
 8001a74:	2123      	movs	r1, #35	; 0x23
 8001a76:	205a      	movs	r0, #90	; 0x5a
 8001a78:	f000 fc5c 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("1", &Font_11x18, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4945      	ldr	r1, [pc, #276]	; (8001b94 <Inicializacion+0x330>)
 8001a80:	484b      	ldr	r0, [pc, #300]	; (8001bb0 <Inicializacion+0x34c>)
 8001a82:	f000 fced 	bl	8002460 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001a86:	f000 fbaf 	bl	80021e8 <SSD1306_UpdateScreen>
		  osDelay(1000);
 8001a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8e:	f006 f957 	bl	8007d40 <osDelay>

		  SSD1306_GotoXY(90, 35);
 8001a92:	2123      	movs	r1, #35	; 0x23
 8001a94:	205a      	movs	r0, #90	; 0x5a
 8001a96:	f000 fc4d 	bl	8002334 <SSD1306_GotoXY>
		  SSD1306_Puts("0", &Font_11x18, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	493d      	ldr	r1, [pc, #244]	; (8001b94 <Inicializacion+0x330>)
 8001a9e:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <Inicializacion+0x350>)
 8001aa0:	f000 fcde 	bl	8002460 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001aa4:	f000 fba0 	bl	80021e8 <SSD1306_UpdateScreen>
		  osDelay(1000);
 8001aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aac:	f006 f948 	bl	8007d40 <osDelay>
		  SSD1306_DrawFilledRectangle(0, 20, 128, 45, 0x00);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	232d      	movs	r3, #45	; 0x2d
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	2114      	movs	r1, #20
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 fdf0 	bl	80026a0 <SSD1306_DrawFilledRectangle>
		  SSD1306_UpdateScreen();
 8001ac0:	f000 fb92 	bl	80021e8 <SSD1306_UpdateScreen>

	 		 HAL_ADC_Start(&hadc1);
 8001ac4:	483c      	ldr	r0, [pc, #240]	; (8001bb8 <Inicializacion+0x354>)
 8001ac6:	f001 fc3b 	bl	8003340 <HAL_ADC_Start>
	 		 status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	483a      	ldr	r0, [pc, #232]	; (8001bb8 <Inicializacion+0x354>)
 8001ace:	f001 fccd 	bl	800346c <HAL_ADC_PollForConversion>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <Inicializacion+0x284>
	 			 analog_max[0] = HAL_ADC_GetValue(&hadc1);
 8001adc:	4836      	ldr	r0, [pc, #216]	; (8001bb8 <Inicializacion+0x354>)
 8001ade:	f001 fd54 	bl	800358a <HAL_ADC_GetValue>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a37      	ldr	r2, [pc, #220]	; (8001bc4 <Inicializacion+0x360>)
 8001ae6:	6013      	str	r3, [r2, #0]
	 		 }

	 		 status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <Inicializacion+0x354>)
 8001aec:	f001 fcbe 	bl	800346c <HAL_ADC_PollForConversion>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <Inicializacion+0x2a2>
	 			 analog_max[1] = HAL_ADC_GetValue(&hadc1);
 8001afa:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <Inicializacion+0x354>)
 8001afc:	f001 fd45 	bl	800358a <HAL_ADC_GetValue>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <Inicializacion+0x360>)
 8001b04:	6053      	str	r3, [r2, #4]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	482b      	ldr	r0, [pc, #172]	; (8001bb8 <Inicializacion+0x354>)
 8001b0a:	f001 fcaf 	bl	800346c <HAL_ADC_PollForConversion>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <Inicializacion+0x2c0>
	 			 analog_max[2] = HAL_ADC_GetValue(&hadc1);
 8001b18:	4827      	ldr	r0, [pc, #156]	; (8001bb8 <Inicializacion+0x354>)
 8001b1a:	f001 fd36 	bl	800358a <HAL_ADC_GetValue>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <Inicializacion+0x360>)
 8001b22:	6093      	str	r3, [r2, #8]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001b24:	2101      	movs	r1, #1
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <Inicializacion+0x354>)
 8001b28:	f001 fca0 	bl	800346c <HAL_ADC_PollForConversion>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <Inicializacion+0x2de>
	 			 analog_max[3] = HAL_ADC_GetValue(&hadc1);
 8001b36:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <Inicializacion+0x354>)
 8001b38:	f001 fd27 	bl	800358a <HAL_ADC_GetValue>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <Inicializacion+0x360>)
 8001b40:	60d3      	str	r3, [r2, #12]
	 		 }

	 		status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001b42:	2101      	movs	r1, #1
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <Inicializacion+0x354>)
 8001b46:	f001 fc91 	bl	800346c <HAL_ADC_PollForConversion>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
	 		 if(status == HAL_OK){
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <Inicializacion+0x2fc>
	 			 analog_max[4] = HAL_ADC_GetValue(&hadc1);
 8001b54:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <Inicializacion+0x354>)
 8001b56:	f001 fd18 	bl	800358a <HAL_ADC_GetValue>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <Inicializacion+0x360>)
 8001b5e:	6113      	str	r3, [r2, #16]
	 		 }

	 		 HAL_ADC_Stop(&hadc1);
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <Inicializacion+0x354>)
 8001b62:	f001 fc50 	bl	8003406 <HAL_ADC_Stop>

	 		 //analog_max[4] > analog_min[4] && analog_max[3] > analog_min[3] && analog_max[2] > analog_min[2] && analog_max[1] > analog_min[1] &&
	 		 if(analog_max[0] > analog_min[0] && analog_max[1] > analog_min[1] && analog_max[4] > analog_min[4]){
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <Inicializacion+0x360>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <Inicializacion+0x358>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d95f      	bls.n	8001c32 <Inicializacion+0x3ce>
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <Inicializacion+0x360>)
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <Inicializacion+0x358>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d959      	bls.n	8001c32 <Inicializacion+0x3ce>
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <Inicializacion+0x360>)
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <Inicializacion+0x358>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	e01e      	b.n	8001bc8 <Inicializacion+0x364>
 8001b8a:	bf00      	nop
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	20001f70 	.word	0x20001f70
 8001b94:	20000008 	.word	0x20000008
 8001b98:	0800c468 	.word	0x0800c468
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	0800c474 	.word	0x0800c474
 8001ba4:	0800c47c 	.word	0x0800c47c
 8001ba8:	0800c484 	.word	0x0800c484
 8001bac:	0800c488 	.word	0x0800c488
 8001bb0:	0800c48c 	.word	0x0800c48c
 8001bb4:	0800c490 	.word	0x0800c490
 8001bb8:	20001e38 	.word	0x20001e38
 8001bbc:	200000e0 	.word	0x200000e0
 8001bc0:	0800c494 	.word	0x0800c494
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	d933      	bls.n	8001c32 <Inicializacion+0x3ce>
	 			 osDelay(2000);
 8001bca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bce:	f006 f8b7 	bl	8007d40 <osDelay>


	 			  SSD1306_Clear();
 8001bd2:	f000 fdb2 	bl	800273a <SSD1306_Clear>

	 			  SSD1306_GotoXY(0, 0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 fbab 	bl	8002334 <SSD1306_GotoXY>
	 			  SSD1306_Puts("CALIBRACION", &Font_11x18, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	493e      	ldr	r1, [pc, #248]	; (8001cdc <Inicializacion+0x478>)
 8001be2:	483f      	ldr	r0, [pc, #252]	; (8001ce0 <Inicializacion+0x47c>)
 8001be4:	f000 fc3c 	bl	8002460 <SSD1306_Puts>

	 			  SSD1306_GotoXY(0, 30);
 8001be8:	211e      	movs	r1, #30
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 fba2 	bl	8002334 <SSD1306_GotoXY>
	 			  SSD1306_Puts("Calibracion", &Font_7x10, 1);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	493c      	ldr	r1, [pc, #240]	; (8001ce4 <Inicializacion+0x480>)
 8001bf4:	483c      	ldr	r0, [pc, #240]	; (8001ce8 <Inicializacion+0x484>)
 8001bf6:	f000 fc33 	bl	8002460 <SSD1306_Puts>
	 			  SSD1306_GotoXY(0, 50);
 8001bfa:	2132      	movs	r1, #50	; 0x32
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fb99 	bl	8002334 <SSD1306_GotoXY>
	 			  SSD1306_Puts("Correcta", &Font_7x10, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <Inicializacion+0x480>)
 8001c06:	4839      	ldr	r0, [pc, #228]	; (8001cec <Inicializacion+0x488>)
 8001c08:	f000 fc2a 	bl	8002460 <SSD1306_Puts>
	 			  SSD1306_UpdateScreen();
 8001c0c:	f000 faec 	bl	80021e8 <SSD1306_UpdateScreen>

	 			  osDelay(1000);
 8001c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c14:	f006 f894 	bl	8007d40 <osDelay>
	 			     xEventGroupClearBits(FlagHandle, 1);
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <Inicializacion+0x48c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fb6e 	bl	8008300 <xEventGroupClearBits>
		 			 xEventGroupSetBits(FlagHandle, 2); //envio de datos
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <Inicializacion+0x48c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f006 fba0 	bl	8008370 <xEventGroupSetBits>
	 		 if(analog_max[0] > analog_min[0] && analog_max[1] > analog_min[1] && analog_max[4] > analog_min[4]){
 8001c30:	e050      	b.n	8001cd4 <Inicializacion+0x470>
	 		 }
	 		 else{
	 			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	 			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	 			xEventGroupClearBits(FlagHandle, 1);
 8001c32:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <Inicializacion+0x48c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f006 fb61 	bl	8008300 <xEventGroupClearBits>

	 			  SSD1306_Clear();
 8001c3e:	f000 fd7c 	bl	800273a <SSD1306_Clear>

	 			  SSD1306_GotoXY(0, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 fb75 	bl	8002334 <SSD1306_GotoXY>
	 			  SSD1306_Puts("CALIBRACION", &Font_11x18, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4923      	ldr	r1, [pc, #140]	; (8001cdc <Inicializacion+0x478>)
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <Inicializacion+0x47c>)
 8001c50:	f000 fc06 	bl	8002460 <SSD1306_Puts>
				  SSD1306_GotoXY(0, 30);
 8001c54:	211e      	movs	r1, #30
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 fb6c 	bl	8002334 <SSD1306_GotoXY>
				  SSD1306_Puts("Calibracion", &Font_7x10, 1);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4921      	ldr	r1, [pc, #132]	; (8001ce4 <Inicializacion+0x480>)
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <Inicializacion+0x484>)
 8001c62:	f000 fbfd 	bl	8002460 <SSD1306_Puts>
				  SSD1306_GotoXY(0, 50);
 8001c66:	2132      	movs	r1, #50	; 0x32
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 fb63 	bl	8002334 <SSD1306_GotoXY>
				  SSD1306_Puts("Incorrecta", &Font_7x10, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	491c      	ldr	r1, [pc, #112]	; (8001ce4 <Inicializacion+0x480>)
 8001c72:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <Inicializacion+0x490>)
 8001c74:	f000 fbf4 	bl	8002460 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8001c78:	f000 fab6 	bl	80021e8 <SSD1306_UpdateScreen>

	 			 osDelay(1000);
 8001c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c80:	f006 f85e 	bl	8007d40 <osDelay>
	 			  SSD1306_Clear();
 8001c84:	f000 fd59 	bl	800273a <SSD1306_Clear>

	 			  SSD1306_GotoXY(0, 0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 fb52 	bl	8002334 <SSD1306_GotoXY>
	 			  SSD1306_Puts("CALIBRACION", &Font_11x18, 1);
 8001c90:	2201      	movs	r2, #1
 8001c92:	4912      	ldr	r1, [pc, #72]	; (8001cdc <Inicializacion+0x478>)
 8001c94:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <Inicializacion+0x47c>)
 8001c96:	f000 fbe3 	bl	8002460 <SSD1306_Puts>
				  SSD1306_GotoXY(0, 30);
 8001c9a:	211e      	movs	r1, #30
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 fb49 	bl	8002334 <SSD1306_GotoXY>
				  SSD1306_Puts("Pulsa para", &Font_7x10, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	490f      	ldr	r1, [pc, #60]	; (8001ce4 <Inicializacion+0x480>)
 8001ca6:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <Inicializacion+0x494>)
 8001ca8:	f000 fbda 	bl	8002460 <SSD1306_Puts>
				  SSD1306_GotoXY(0, 50);
 8001cac:	2132      	movs	r1, #50	; 0x32
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 fb40 	bl	8002334 <SSD1306_GotoXY>
				  SSD1306_Puts("Calibrar", &Font_7x10, 1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	490b      	ldr	r1, [pc, #44]	; (8001ce4 <Inicializacion+0x480>)
 8001cb8:	4810      	ldr	r0, [pc, #64]	; (8001cfc <Inicializacion+0x498>)
 8001cba:	f000 fbd1 	bl	8002460 <SSD1306_Puts>

				  SSD1306_GotoXY(90, 35);
 8001cbe:	2123      	movs	r1, #35	; 0x23
 8001cc0:	205a      	movs	r0, #90	; 0x5a
 8001cc2:	f000 fb37 	bl	8002334 <SSD1306_GotoXY>
				  SSD1306_Puts("!!", &Font_11x18, 1);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <Inicializacion+0x478>)
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <Inicializacion+0x49c>)
 8001ccc:	f000 fbc8 	bl	8002460 <SSD1306_Puts>

				  SSD1306_UpdateScreen();
 8001cd0:	f000 fa8a 	bl	80021e8 <SSD1306_UpdateScreen>
	 		 }
    osDelay(1);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f006 f833 	bl	8007d40 <osDelay>
  {
 8001cda:	e5d3      	b.n	8001884 <Inicializacion+0x20>
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	0800c468 	.word	0x0800c468
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	0800c4a0 	.word	0x0800c4a0
 8001cec:	0800c4ac 	.word	0x0800c4ac
 8001cf0:	20001f70 	.word	0x20001f70
 8001cf4:	0800c4b8 	.word	0x0800c4b8
 8001cf8:	0800c4c4 	.word	0x0800c4c4
 8001cfc:	0800c4d0 	.word	0x0800c4d0
 8001d00:	0800c4dc 	.word	0x0800c4dc
 8001d04:	00000000 	.word	0x00000000

08001d08 <AnalogRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AnalogRead */
void AnalogRead(void *argument)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AnalogRead */
	HAL_StatusTypeDef status;
	struct Datos_Analogicos lectura;
	int i = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
	  //xEventGroupWaitBits(FlagHandle,2,pdFALSE,pdFALSE,portMAX_DELAY);

	 // SSD1306_GotoXY(0, 0);
	  //SSD1306_Puts("FUNCIONANDO", &Font_11x18, 1);

	  HAL_ADC_Start(&hadc1);
 8001d14:	48a0      	ldr	r0, [pc, #640]	; (8001f98 <AnalogRead+0x290>)
 8001d16:	f001 fb13 	bl	8003340 <HAL_ADC_Start>
		 status = HAL_ADC_PollForConversion(&hadc1, 5);
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	489e      	ldr	r0, [pc, #632]	; (8001f98 <AnalogRead+0x290>)
 8001d1e:	f001 fba5 	bl	800346c <HAL_ADC_PollForConversion>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]
		 if(status == HAL_OK){
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <AnalogRead+0x30>
			 datos[0] = HAL_ADC_GetValue(&hadc1);
 8001d2c:	489a      	ldr	r0, [pc, #616]	; (8001f98 <AnalogRead+0x290>)
 8001d2e:	f001 fc2c 	bl	800358a <HAL_ADC_GetValue>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a99      	ldr	r2, [pc, #612]	; (8001f9c <AnalogRead+0x294>)
 8001d36:	6013      	str	r3, [r2, #0]
		 }

		 status = HAL_ADC_PollForConversion(&hadc1, 5);
 8001d38:	2105      	movs	r1, #5
 8001d3a:	4897      	ldr	r0, [pc, #604]	; (8001f98 <AnalogRead+0x290>)
 8001d3c:	f001 fb96 	bl	800346c <HAL_ADC_PollForConversion>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
		 if(status == HAL_OK){
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <AnalogRead+0x4e>
			 datos[1] = HAL_ADC_GetValue(&hadc1);
 8001d4a:	4893      	ldr	r0, [pc, #588]	; (8001f98 <AnalogRead+0x290>)
 8001d4c:	f001 fc1d 	bl	800358a <HAL_ADC_GetValue>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a92      	ldr	r2, [pc, #584]	; (8001f9c <AnalogRead+0x294>)
 8001d54:	6053      	str	r3, [r2, #4]
		 }


		status = HAL_ADC_PollForConversion(&hadc1, 5);
 8001d56:	2105      	movs	r1, #5
 8001d58:	488f      	ldr	r0, [pc, #572]	; (8001f98 <AnalogRead+0x290>)
 8001d5a:	f001 fb87 	bl	800346c <HAL_ADC_PollForConversion>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
		 if(status == HAL_OK){
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <AnalogRead+0x6c>
			 datos[2] = HAL_ADC_GetValue(&hadc1);
 8001d68:	488b      	ldr	r0, [pc, #556]	; (8001f98 <AnalogRead+0x290>)
 8001d6a:	f001 fc0e 	bl	800358a <HAL_ADC_GetValue>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a8a      	ldr	r2, [pc, #552]	; (8001f9c <AnalogRead+0x294>)
 8001d72:	6093      	str	r3, [r2, #8]
		 }

		status = HAL_ADC_PollForConversion(&hadc1, 5);
 8001d74:	2105      	movs	r1, #5
 8001d76:	4888      	ldr	r0, [pc, #544]	; (8001f98 <AnalogRead+0x290>)
 8001d78:	f001 fb78 	bl	800346c <HAL_ADC_PollForConversion>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
		 if(status == HAL_OK){
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <AnalogRead+0x8a>
			 datos[3] = HAL_ADC_GetValue(&hadc1);
 8001d86:	4884      	ldr	r0, [pc, #528]	; (8001f98 <AnalogRead+0x290>)
 8001d88:	f001 fbff 	bl	800358a <HAL_ADC_GetValue>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a83      	ldr	r2, [pc, #524]	; (8001f9c <AnalogRead+0x294>)
 8001d90:	60d3      	str	r3, [r2, #12]
		 }

		status = HAL_ADC_PollForConversion(&hadc1, 5);
 8001d92:	2105      	movs	r1, #5
 8001d94:	4880      	ldr	r0, [pc, #512]	; (8001f98 <AnalogRead+0x290>)
 8001d96:	f001 fb69 	bl	800346c <HAL_ADC_PollForConversion>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
		 if(status == HAL_OK){
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <AnalogRead+0xa8>
			 datos[4] = HAL_ADC_GetValue(&hadc1);
 8001da4:	487c      	ldr	r0, [pc, #496]	; (8001f98 <AnalogRead+0x290>)
 8001da6:	f001 fbf0 	bl	800358a <HAL_ADC_GetValue>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a7b      	ldr	r2, [pc, #492]	; (8001f9c <AnalogRead+0x294>)
 8001dae:	6113      	str	r3, [r2, #16]
		 }

	 HAL_ADC_Stop(&hadc1);
 8001db0:	4879      	ldr	r0, [pc, #484]	; (8001f98 <AnalogRead+0x290>)
 8001db2:	f001 fb28 	bl	8003406 <HAL_ADC_Stop>

	 //pulgar
	 //110 abierto, 50 cerrao
	 //tercer servo, 150 cerrao, 50 abierto

	 datos_f[0] = 0.3*datos[0] + 0.7*datos_f[0];
 8001db6:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <AnalogRead+0x294>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fb4a 	bl	8000454 <__aeabi_ui2d>
 8001dc0:	a371      	add	r3, pc, #452	; (adr r3, 8001f88 <AnalogRead+0x280>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fbbf 	bl	8000548 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <AnalogRead+0x298>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb3c 	bl	8000454 <__aeabi_ui2d>
 8001ddc:	a36c      	add	r3, pc, #432	; (adr r3, 8001f90 <AnalogRead+0x288>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fbb1 	bl	8000548 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe f9f5 	bl	80001dc <__adddf3>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fe55 	bl	8000aa8 <__aeabi_d2uiz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <AnalogRead+0x298>)
 8001e02:	6013      	str	r3, [r2, #0]

	 grados_pack[0] = 110-((datos_f[0]-analog_min[0])*(110-50))/(analog_max[0]-analog_min[0]+1); //el + 1 es para evitar dividir entre 0 en el caso de que algun dedo no funcione
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <AnalogRead+0x298>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <AnalogRead+0x29c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <AnalogRead+0x2a0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <AnalogRead+0x29c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e28:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 8001e2c:	4a5f      	ldr	r2, [pc, #380]	; (8001fac <AnalogRead+0x2a4>)
 8001e2e:	6013      	str	r3, [r2, #0]

			 if(grados_pack[0] > 110){
 8001e30:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <AnalogRead+0x2a4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b6e      	cmp	r3, #110	; 0x6e
 8001e36:	d903      	bls.n	8001e40 <AnalogRead+0x138>
				 grados_pack[0] = 110;
 8001e38:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <AnalogRead+0x2a4>)
 8001e3a:	226e      	movs	r2, #110	; 0x6e
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e006      	b.n	8001e4e <AnalogRead+0x146>
			 }
			 else if(grados_pack[0] < 50){
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <AnalogRead+0x2a4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b31      	cmp	r3, #49	; 0x31
 8001e46:	d802      	bhi.n	8001e4e <AnalogRead+0x146>
				 grados_pack[0] = 50;
 8001e48:	4b58      	ldr	r3, [pc, #352]	; (8001fac <AnalogRead+0x2a4>)
 8001e4a:	2232      	movs	r2, #50	; 0x32
 8001e4c:	601a      	str	r2, [r3, #0]
			 }

	 for(int j = 1; j<5; j++){
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e066      	b.n	8001f22 <AnalogRead+0x21a>

	 datos_f[j] = 0.3*datos[j] + 0.7*datos_f[j];
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <AnalogRead+0x294>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe faf9 	bl	8000454 <__aeabi_ui2d>
 8001e62:	a349      	add	r3, pc, #292	; (adr r3, 8001f88 <AnalogRead+0x280>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fb6e 	bl	8000548 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4614      	mov	r4, r2
 8001e72:	461d      	mov	r5, r3
 8001e74:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <AnalogRead+0x298>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fae9 	bl	8000454 <__aeabi_ui2d>
 8001e82:	a343      	add	r3, pc, #268	; (adr r3, 8001f90 <AnalogRead+0x288>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb5e 	bl	8000548 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f7fe f9a2 	bl	80001dc <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe02 	bl	8000aa8 <__aeabi_d2uiz>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	493e      	ldr	r1, [pc, #248]	; (8001fa0 <AnalogRead+0x298>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 //analog max cerrao
	 //analog min abierto

		 //grados_pack[j] = ((datos_f[j]-analog_max[j])*180)/(analog_min[j]-analog_max[j]+1); //el + 1 es para evitar dividir entre 0 en el caso de que algun dedo no funcione
	 	 grados_pack[j] = 180-((datos_f[j]-analog_min[j])*(180-25))/(analog_max[j]-analog_min[j]+1); //el + 1 es para evitar dividir entre 0 en el caso de que algun dedo no funcione
 8001eae:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <AnalogRead+0x298>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eb6:	493b      	ldr	r1, [pc, #236]	; (8001fa4 <AnalogRead+0x29c>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	1ad2      	subs	r2, r2, r3
 8001eca:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <AnalogRead+0x2a0>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001ed2:	4834      	ldr	r0, [pc, #208]	; (8001fa4 <AnalogRead+0x29c>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001eda:	1acb      	subs	r3, r1, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	f1c3 02b4 	rsb	r2, r3, #180	; 0xb4
 8001ee6:	4931      	ldr	r1, [pc, #196]	; (8001fac <AnalogRead+0x2a4>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		 if(grados_pack[j] > 180){
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <AnalogRead+0x2a4>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	2bb4      	cmp	r3, #180	; 0xb4
 8001ef8:	d905      	bls.n	8001f06 <AnalogRead+0x1fe>
			 grados_pack[j] = 180;
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <AnalogRead+0x2a4>)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	21b4      	movs	r1, #180	; 0xb4
 8001f00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f04:	e00a      	b.n	8001f1c <AnalogRead+0x214>
		 }
		 else if(grados_pack[j] < 25){
 8001f06:	4a29      	ldr	r2, [pc, #164]	; (8001fac <AnalogRead+0x2a4>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	2b18      	cmp	r3, #24
 8001f10:	d804      	bhi.n	8001f1c <AnalogRead+0x214>
			 grados_pack[j] = 25;
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <AnalogRead+0x2a4>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2119      	movs	r1, #25
 8001f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for(int j = 1; j<5; j++){
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	dd95      	ble.n	8001e54 <AnalogRead+0x14c>
		 }
	 }

	 lectura.Analog_pulgar = grados_pack[0];
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <AnalogRead+0x2a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	723b      	strb	r3, [r7, #8]
	 lectura.Analog_indice = grados_pack[1];
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <AnalogRead+0x2a4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	727b      	strb	r3, [r7, #9]
	 lectura.Analog_corazon = grados_pack[2];
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <AnalogRead+0x2a4>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	72bb      	strb	r3, [r7, #10]
	 lectura.Analog_anular = grados_pack[3];
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <AnalogRead+0x2a4>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	72fb      	strb	r3, [r7, #11]
	 lectura.Analog_menique = grados_pack[4];
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <AnalogRead+0x2a4>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	733b      	strb	r3, [r7, #12]

	 osMessageQueuePut(Queue1Handle, &lectura, 0, 0);
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <AnalogRead+0x2a8>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f005 ffbe 	bl	8007edc <osMessageQueuePut>

	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f002 fb8c 	bl	8004684 <HAL_GPIO_TogglePin>
	 /* SSD1306_DrawFilledRectangle(0, 20, 128, 45, 0x00);
	  SSD1306_DrawBitmap(0, 20, Carga[i], 128, 45, 1);

	  SSD1306_UpdateScreen();*/

	  i++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]

	  if(i == 12){
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d101      	bne.n	8001f7c <AnalogRead+0x274>
		  i = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
	  }


    osDelay(20);
 8001f7c:	2014      	movs	r0, #20
 8001f7e:	f005 fedf 	bl	8007d40 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8001f82:	e6c7      	b.n	8001d14 <AnalogRead+0xc>
 8001f84:	f3af 8000 	nop.w
 8001f88:	33333333 	.word	0x33333333
 8001f8c:	3fd33333 	.word	0x3fd33333
 8001f90:	66666666 	.word	0x66666666
 8001f94:	3fe66666 	.word	0x3fe66666
 8001f98:	20001e38 	.word	0x20001e38
 8001f9c:	20001dcc 	.word	0x20001dcc
 8001fa0:	200000b8 	.word	0x200000b8
 8001fa4:	200000e0 	.word	0x200000e0
 8001fa8:	20000010 	.word	0x20000010
 8001fac:	200000cc 	.word	0x200000cc
 8001fb0:	20001e34 	.word	0x20001e34
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <Gyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Gyro */
void Gyro(void *argument)
{
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
	struct Datos_Gyro Inclinacion;
	struct AccelFunction datosA;
	struct GyroFunction datosG;
	float AnguloX, AnguloY;

	MPU6050_Init();
 8001fc0:	f7fe ffdc 	bl	8000f7c <MPU6050_Init>

  /* Infinite loop */
  for(;;)
  {
	xEventGroupWaitBits(FlagHandle,2,pdFALSE,pdFALSE,portMAX_DELAY);
 8001fc4:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <Gyro+0x178>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	f006 f8c6 	bl	8008164 <xEventGroupWaitBits>

	datosG = MPU6050_Read_Gyro();
 8001fd8:	f7ff f94e 	bl	8001278 <MPU6050_Read_Gyro>
 8001fdc:	eef0 6a40 	vmov.f32	s13, s0
 8001fe0:	eeb0 7a60 	vmov.f32	s14, s1
 8001fe4:	eef0 7a41 	vmov.f32	s15, s2
 8001fe8:	edc7 6a02 	vstr	s13, [r7, #8]
 8001fec:	ed87 7a03 	vstr	s14, [r7, #12]
 8001ff0:	edc7 7a04 	vstr	s15, [r7, #16]
	datosA = MPU6050_Read_Accel();
 8001ff4:	f7ff f818 	bl	8001028 <MPU6050_Read_Accel>
 8001ff8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffc:	eef0 7a60 	vmov.f32	s15, s1
 8002000:	ed87 7a05 	vstr	s14, [r7, #20]
 8002004:	edc7 7a06 	vstr	s15, [r7, #24]

	dt = count/1000;
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <Gyro+0x17c>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002138 <Gyro+0x180>
 8002012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <Gyro+0x184>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
	count = 0;
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <Gyro+0x17c>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

	AnguloX = 0.98*(AnguloX + datosG.Gx*dt) + 0.02*datosA.Ax;
 8002024:	ed97 7a02 	vldr	s14, [r7, #8]
 8002028:	4b44      	ldr	r3, [pc, #272]	; (800213c <Gyro+0x184>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002032:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	ee17 0a90 	vmov	r0, s15
 800203e:	f7fe fa2b 	bl	8000498 <__aeabi_f2d>
 8002042:	a337      	add	r3, pc, #220	; (adr r3, 8002120 <Gyro+0x168>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fa7e 	bl	8000548 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa1e 	bl	8000498 <__aeabi_f2d>
 800205c:	a332      	add	r3, pc, #200	; (adr r3, 8002128 <Gyro+0x170>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe fa71 	bl	8000548 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f8b5 	bl	80001dc <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fd35 	bl	8000ae8 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	AnguloY = 0.98*(AnguloY + datosG.Gy*dt) + 0.02*datosA.Ay;
 8002082:	ed97 7a03 	vldr	s14, [r7, #12]
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <Gyro+0x184>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002090:	edd7 7a08 	vldr	s15, [r7, #32]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	ee17 0a90 	vmov	r0, s15
 800209c:	f7fe f9fc 	bl	8000498 <__aeabi_f2d>
 80020a0:	a31f      	add	r3, pc, #124	; (adr r3, 8002120 <Gyro+0x168>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa4f 	bl	8000548 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	461d      	mov	r5, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f9ef 	bl	8000498 <__aeabi_f2d>
 80020ba:	a31b      	add	r3, pc, #108	; (adr r3, 8002128 <Gyro+0x170>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fa42 	bl	8000548 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f886 	bl	80001dc <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd06 	bl	8000ae8 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	623b      	str	r3, [r7, #32]

	Inclinacion.AnguloX = (uint8_t)AnguloX;
 80020e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e8:	edc7 7a00 	vstr	s15, [r7]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	773b      	strb	r3, [r7, #28]
	Inclinacion.AnguloY = (uint8_t)AnguloY;
 80020f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fa:	edc7 7a00 	vstr	s15, [r7]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	777b      	strb	r3, [r7, #29]

	osMessageQueuePut(Queue2Handle, &Inclinacion, 0, 0);
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <Gyro+0x188>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f107 011c 	add.w	r1, r7, #28
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	f005 fee4 	bl	8007edc <osMessageQueuePut>

    osDelay(20);
 8002114:	2014      	movs	r0, #20
 8002116:	f005 fe13 	bl	8007d40 <osDelay>
  {
 800211a:	e753      	b.n	8001fc4 <Gyro+0xc>
 800211c:	f3af 8000 	nop.w
 8002120:	f5c28f5c 	.word	0xf5c28f5c
 8002124:	3fef5c28 	.word	0x3fef5c28
 8002128:	47ae147b 	.word	0x47ae147b
 800212c:	3f947ae1 	.word	0x3f947ae1
 8002130:	20001f70 	.word	0x20001f70
 8002134:	200000f4 	.word	0x200000f4
 8002138:	447a0000 	.word	0x447a0000
 800213c:	200000f8 	.word	0x200000f8
 8002140:	20001de0 	.word	0x20001de0

08002144 <EnvioDatos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EnvioDatos */
void EnvioDatos(void *argument)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
	struct Datos_Gyro buff2;
	uint8_t BufferTx[9];
  /* Infinite loop */
  for(;;)
  {
    xEventGroupWaitBits(FlagHandle,2,pdFALSE,pdFALSE,portMAX_DELAY);
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <EnvioDatos+0x84>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	2102      	movs	r1, #2
 800215c:	f006 f802 	bl	8008164 <xEventGroupWaitBits>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8002160:	2102      	movs	r1, #2
 8002162:	481a      	ldr	r0, [pc, #104]	; (80021cc <EnvioDatos+0x88>)
 8002164:	f002 fa8e 	bl	8004684 <HAL_GPIO_TogglePin>

	val1 = osMessageQueueGet(Queue1Handle, &buff1, NULL, 0);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <EnvioDatos+0x8c>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f107 0118 	add.w	r1, r7, #24
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	f005 ff12 	bl	8007f9c <osMessageQueueGet>
 8002178:	6278      	str	r0, [r7, #36]	; 0x24
	val2 = osMessageQueueGet(Queue2Handle, &buff2, NULL, 0);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <EnvioDatos+0x90>)
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	f107 0114 	add.w	r1, r7, #20
 8002182:	2300      	movs	r3, #0
 8002184:	2200      	movs	r2, #0
 8002186:	f005 ff09 	bl	8007f9c <osMessageQueueGet>
 800218a:	6238      	str	r0, [r7, #32]

	if((val1 == osOK)&&(val2 == osOK)){
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d115      	bne.n	80021be <EnvioDatos+0x7a>
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d112      	bne.n	80021be <EnvioDatos+0x7a>

		  BufferTx[0] = 200;
 8002198:	23c8      	movs	r3, #200	; 0xc8
 800219a:	723b      	strb	r3, [r7, #8]
		  BufferTx[1] = buff1.Analog_pulgar;
 800219c:	7e3b      	ldrb	r3, [r7, #24]
 800219e:	727b      	strb	r3, [r7, #9]
		  BufferTx[2] = buff1.Analog_indice;
 80021a0:	7e7b      	ldrb	r3, [r7, #25]
 80021a2:	72bb      	strb	r3, [r7, #10]
		  BufferTx[3] = buff1.Analog_corazon;
 80021a4:	7ebb      	ldrb	r3, [r7, #26]
 80021a6:	72fb      	strb	r3, [r7, #11]
		  BufferTx[4] = buff1.Analog_anular;
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	733b      	strb	r3, [r7, #12]
		  BufferTx[5] = buff1.Analog_menique;
 80021ac:	7f3b      	ldrb	r3, [r7, #28]
 80021ae:	737b      	strb	r3, [r7, #13]
		  //BufferTx[6] = buff2.AnguloX;
		 // BufferTx[7] = buff2.AnguloY;
		 // BufferTx[8] = 0xA;

		  HAL_UART_Transmit_IT(&huart1, BufferTx, 9);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	2209      	movs	r2, #9
 80021b6:	4619      	mov	r1, r3
 80021b8:	4807      	ldr	r0, [pc, #28]	; (80021d8 <EnvioDatos+0x94>)
 80021ba:	f004 fddf 	bl	8006d7c <HAL_UART_Transmit_IT>
	}

    osDelay(20);
 80021be:	2014      	movs	r0, #20
 80021c0:	f005 fdbe 	bl	8007d40 <osDelay>
  {
 80021c4:	e7c2      	b.n	800214c <EnvioDatos+0x8>
 80021c6:	bf00      	nop
 80021c8:	20001f70 	.word	0x20001f70
 80021cc:	48000400 	.word	0x48000400
 80021d0:	20001e34 	.word	0x20001e34
 80021d4:	20001de0 	.word	0x20001de0
 80021d8:	20001ea0 	.word	0x20001ea0

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <Error_Handler+0x8>
	...

080021e8 <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	e01d      	b.n	8002230 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	3b50      	subs	r3, #80	; 0x50
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	2100      	movs	r1, #0
 80021fe:	2078      	movs	r0, #120	; 0x78
 8002200:	f000 faec 	bl	80027dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2078      	movs	r0, #120	; 0x78
 800220a:	f000 fae7 	bl	80027dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800220e:	2210      	movs	r2, #16
 8002210:	2100      	movs	r1, #0
 8002212:	2078      	movs	r0, #120	; 0x78
 8002214:	f000 fae2 	bl	80027dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	01db      	lsls	r3, r3, #7
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <SSD1306_UpdateScreen+0x58>)
 800221e:	441a      	add	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	2140      	movs	r1, #64	; 0x40
 8002224:	2078      	movs	r0, #120	; 0x78
 8002226:	f000 fa91 	bl	800274c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	3301      	adds	r3, #1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d9de      	bls.n	80021f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200000fc 	.word	0x200000fc

08002244 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <SSD1306_Fill+0x14>
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <SSD1306_Fill+0x16>
 8002258:	23ff      	movs	r3, #255	; 0xff
 800225a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225e:	4619      	mov	r1, r3
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <SSD1306_Fill+0x2c>)
 8002262:	f008 ff43 	bl	800b0ec <memset>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000fc 	.word	0x200000fc

08002274 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
 800227e:	460b      	mov	r3, r1
 8002280:	80bb      	strh	r3, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	70fb      	strb	r3, [r7, #3]
	if (
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b7f      	cmp	r3, #127	; 0x7f
 800228a:	d848      	bhi.n	800231e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	2b3f      	cmp	r3, #63	; 0x3f
 8002290:	d845      	bhi.n	800231e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <SSD1306_DrawPixel+0xb8>)
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11a      	bne.n	80022e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	b298      	uxth	r0, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	01db      	lsls	r3, r3, #7
 80022ba:	4413      	add	r3, r2
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <SSD1306_DrawPixel+0xbc>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b259      	sxtb	r1, r3
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	4603      	mov	r3, r0
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	4413      	add	r3, r2
 80022dc:	b2c9      	uxtb	r1, r1
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <SSD1306_DrawPixel+0xbc>)
 80022e0:	54d1      	strb	r1, [r2, r3]
 80022e2:	e01d      	b.n	8002320 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	b298      	uxth	r0, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	4413      	add	r3, r2
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <SSD1306_DrawPixel+0xbc>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	b25a      	sxtb	r2, r3
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	b25b      	sxtb	r3, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	b25b      	sxtb	r3, r3
 800230a:	4013      	ands	r3, r2
 800230c:	b259      	sxtb	r1, r3
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	4603      	mov	r3, r0
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	b2c9      	uxtb	r1, r1
 8002318:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SSD1306_DrawPixel+0xbc>)
 800231a:	54d1      	strb	r1, [r2, r3]
 800231c:	e000      	b.n	8002320 <SSD1306_DrawPixel+0xac>
		return;
 800231e:	bf00      	nop
	}
}
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	200004fc 	.word	0x200004fc
 8002330:	200000fc 	.word	0x200000fc

08002334 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	80fb      	strh	r3, [r7, #6]
 8002340:	4613      	mov	r3, r2
 8002342:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002344:	4a05      	ldr	r2, [pc, #20]	; (800235c <SSD1306_GotoXY+0x28>)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <SSD1306_GotoXY+0x28>)
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	8053      	strh	r3, [r2, #2]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	200004fc 	.word	0x200004fc

08002360 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	4613      	mov	r3, r2
 800236e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <SSD1306_Putc+0xfc>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
	if (
 800237c:	2b7f      	cmp	r3, #127	; 0x7f
 800237e:	dc07      	bgt.n	8002390 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <SSD1306_Putc+0xfc>)
 8002382:	885b      	ldrh	r3, [r3, #2]
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800238c:	2b3f      	cmp	r3, #63	; 0x3f
 800238e:	dd01      	ble.n	8002394 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002390:	2300      	movs	r3, #0
 8002392:	e05e      	b.n	8002452 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e04b      	b.n	8002432 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3b20      	subs	r3, #32
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	7849      	ldrb	r1, [r1, #1]
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	440b      	add	r3, r1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e030      	b.n	8002420 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <SSD1306_Putc+0xfc>)
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b298      	uxth	r0, r3
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <SSD1306_Putc+0xfc>)
 80023dc:	885a      	ldrh	r2, [r3, #2]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	79ba      	ldrb	r2, [r7, #6]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7ff ff43 	bl	8002274 <SSD1306_DrawPixel>
 80023ee:	e014      	b.n	800241a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <SSD1306_Putc+0xfc>)
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	b298      	uxth	r0, r3
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <SSD1306_Putc+0xfc>)
 80023fe:	885a      	ldrh	r2, [r3, #2]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4413      	add	r3, r2
 8002406:	b299      	uxth	r1, r3
 8002408:	79bb      	ldrb	r3, [r7, #6]
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	f7ff ff2d 	bl	8002274 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3301      	adds	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4293      	cmp	r3, r2
 800242a:	d3c8      	bcc.n	80023be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	461a      	mov	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4293      	cmp	r3, r2
 800243c:	d3ad      	bcc.n	800239a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <SSD1306_Putc+0xfc>)
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4413      	add	r3, r2
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <SSD1306_Putc+0xfc>)
 800244e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002450:	79fb      	ldrb	r3, [r7, #7]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200004fc 	.word	0x200004fc

08002460 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800246e:	e012      	b.n	8002496 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff71 	bl	8002360 <SSD1306_Putc>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d002      	beq.n	8002490 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	e008      	b.n	80024a2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e8      	bne.n	8002470 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	781b      	ldrb	r3, [r3, #0]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4604      	mov	r4, r0
 80024b2:	4608      	mov	r0, r1
 80024b4:	4611      	mov	r1, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4623      	mov	r3, r4
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	4603      	mov	r3, r0
 80024be:	80bb      	strh	r3, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b7f      	cmp	r3, #127	; 0x7f
 80024cc:	d901      	bls.n	80024d2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80024ce:	237f      	movs	r3, #127	; 0x7f
 80024d0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2b7f      	cmp	r3, #127	; 0x7f
 80024d6:	d901      	bls.n	80024dc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80024d8:	237f      	movs	r3, #127	; 0x7f
 80024da:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	2b3f      	cmp	r3, #63	; 0x3f
 80024e0:	d901      	bls.n	80024e6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80024e2:	233f      	movs	r3, #63	; 0x3f
 80024e4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80024e6:	883b      	ldrh	r3, [r7, #0]
 80024e8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ea:	d901      	bls.n	80024f0 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80024ec:	233f      	movs	r3, #63	; 0x3f
 80024ee:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d205      	bcs.n	8002504 <SSD1306_DrawLine+0x5a>
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	b29b      	uxth	r3, r3
 8002500:	b21b      	sxth	r3, r3
 8002502:	e004      	b.n	800250e <SSD1306_DrawLine+0x64>
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	b29b      	uxth	r3, r3
 800250c:	b21b      	sxth	r3, r3
 800250e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002510:	88ba      	ldrh	r2, [r7, #4]
 8002512:	883b      	ldrh	r3, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d205      	bcs.n	8002524 <SSD1306_DrawLine+0x7a>
 8002518:	883a      	ldrh	r2, [r7, #0]
 800251a:	88bb      	ldrh	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21b      	sxth	r3, r3
 8002522:	e004      	b.n	800252e <SSD1306_DrawLine+0x84>
 8002524:	88ba      	ldrh	r2, [r7, #4]
 8002526:	883b      	ldrh	r3, [r7, #0]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	b21b      	sxth	r3, r3
 800252e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	429a      	cmp	r2, r3
 8002536:	d201      	bcs.n	800253c <SSD1306_DrawLine+0x92>
 8002538:	2301      	movs	r3, #1
 800253a:	e001      	b.n	8002540 <SSD1306_DrawLine+0x96>
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002542:	88ba      	ldrh	r2, [r7, #4]
 8002544:	883b      	ldrh	r3, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d201      	bcs.n	800254e <SSD1306_DrawLine+0xa4>
 800254a:	2301      	movs	r3, #1
 800254c:	e001      	b.n	8002552 <SSD1306_DrawLine+0xa8>
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002554:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002558:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	dd06      	ble.n	800256e <SSD1306_DrawLine+0xc4>
 8002560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002564:	0fda      	lsrs	r2, r3, #31
 8002566:	4413      	add	r3, r2
 8002568:	105b      	asrs	r3, r3, #1
 800256a:	b21b      	sxth	r3, r3
 800256c:	e006      	b.n	800257c <SSD1306_DrawLine+0xd2>
 800256e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002572:	0fda      	lsrs	r2, r3, #31
 8002574:	4413      	add	r3, r2
 8002576:	105b      	asrs	r3, r3, #1
 8002578:	425b      	negs	r3, r3
 800257a:	b21b      	sxth	r3, r3
 800257c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800257e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d129      	bne.n	80025da <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002586:	883a      	ldrh	r2, [r7, #0]
 8002588:	88bb      	ldrh	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	d205      	bcs.n	800259a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800258e:	883b      	ldrh	r3, [r7, #0]
 8002590:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d205      	bcs.n	80025ae <SSD1306_DrawLine+0x104>
			tmp = x1;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	82bb      	strh	r3, [r7, #20]
 80025b2:	e00c      	b.n	80025ce <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80025b4:	8ab9      	ldrh	r1, [r7, #20]
 80025b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fe59 	bl	8002274 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80025c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	82bb      	strh	r3, [r7, #20]
 80025ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025d2:	883b      	ldrh	r3, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dded      	ble.n	80025b4 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80025d8:	e05f      	b.n	800269a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80025da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d129      	bne.n	8002636 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80025e2:	883a      	ldrh	r2, [r7, #0]
 80025e4:	88bb      	ldrh	r3, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d205      	bcs.n	80025f6 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80025ea:	883b      	ldrh	r3, [r7, #0]
 80025ec:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d205      	bcs.n	800260a <SSD1306_DrawLine+0x160>
			tmp = x1;
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002606:	893b      	ldrh	r3, [r7, #8]
 8002608:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	82bb      	strh	r3, [r7, #20]
 800260e:	e00c      	b.n	800262a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002610:	8abb      	ldrh	r3, [r7, #20]
 8002612:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002616:	88b9      	ldrh	r1, [r7, #4]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe2b 	bl	8002274 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800261e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002622:	b29b      	uxth	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	82bb      	strh	r3, [r7, #20]
 800262a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	429a      	cmp	r2, r3
 8002632:	dded      	ble.n	8002610 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002634:	e031      	b.n	800269a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002636:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800263a:	88b9      	ldrh	r1, [r7, #4]
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fe18 	bl	8002274 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	429a      	cmp	r2, r3
 800264a:	d103      	bne.n	8002654 <SSD1306_DrawLine+0x1aa>
 800264c:	88ba      	ldrh	r2, [r7, #4]
 800264e:	883b      	ldrh	r3, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d021      	beq.n	8002698 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002658:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800265c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002660:	425b      	negs	r3, r3
 8002662:	429a      	cmp	r2, r3
 8002664:	dd08      	ble.n	8002678 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002666:	8afa      	ldrh	r2, [r7, #22]
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002670:	89fa      	ldrh	r2, [r7, #14]
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4413      	add	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002678:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800267c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	dad8      	bge.n	8002636 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002684:	8afa      	ldrh	r2, [r7, #22]
 8002686:	8a7b      	ldrh	r3, [r7, #18]
 8002688:	4413      	add	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800268e:	89ba      	ldrh	r2, [r7, #12]
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002696:	e7ce      	b.n	8002636 <SSD1306_DrawLine+0x18c>
			break;
 8002698:	bf00      	nop
		} 
	}
}
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}

080026a0 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	80fb      	strh	r3, [r7, #6]
 80026b2:	4603      	mov	r3, r0
 80026b4:	80bb      	strh	r3, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b7f      	cmp	r3, #127	; 0x7f
 80026c2:	d836      	bhi.n	8002732 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80026c4:	88bb      	ldrh	r3, [r7, #4]
 80026c6:	2b3f      	cmp	r3, #63	; 0x3f
 80026c8:	d833      	bhi.n	8002732 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4413      	add	r3, r2
 80026d0:	2b7f      	cmp	r3, #127	; 0x7f
 80026d2:	dd03      	ble.n	80026dc <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026da:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80026dc:	88ba      	ldrh	r2, [r7, #4]
 80026de:	883b      	ldrh	r3, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	2b3f      	cmp	r3, #63	; 0x3f
 80026e4:	dd03      	ble.n	80026ee <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80026e6:	88bb      	ldrh	r3, [r7, #4]
 80026e8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80026ec:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e018      	b.n	8002726 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	b299      	uxth	r1, r3
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	4413      	add	r3, r2
 8002704:	b29c      	uxth	r4, r3
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	b29a      	uxth	r2, r3
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	b29a      	uxth	r2, r3
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	4622      	mov	r2, r4
 800271c:	f7ff fec5 	bl	80024aa <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	3301      	adds	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	b29b      	uxth	r3, r3
 800272a:	883a      	ldrh	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d2e1      	bcs.n	80026f4 <SSD1306_DrawFilledRectangle+0x54>
 8002730:	e000      	b.n	8002734 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002732:	bf00      	nop
	}
}
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fd80 	bl	8002244 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002744:	f7ff fd50 	bl	80021e8 <SSD1306_UpdateScreen>
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b0c7      	sub	sp, #284	; 0x11c
 8002750:	af02      	add	r7, sp, #8
 8002752:	4604      	mov	r4, r0
 8002754:	4608      	mov	r0, r1
 8002756:	4639      	mov	r1, r7
 8002758:	600a      	str	r2, [r1, #0]
 800275a:	4619      	mov	r1, r3
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	4622      	mov	r2, r4
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	1dbb      	adds	r3, r7, #6
 8002764:	4602      	mov	r2, r0
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	460a      	mov	r2, r1
 800276c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	1dba      	adds	r2, r7, #6
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800277e:	e010      	b.n	80027a2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002780:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002784:	463a      	mov	r2, r7
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	441a      	add	r2, r3
 800278a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800278e:	3301      	adds	r3, #1
 8002790:	7811      	ldrb	r1, [r2, #0]
 8002792:	f107 020c 	add.w	r2, r7, #12
 8002796:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002798:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800279c:	3301      	adds	r3, #1
 800279e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	1d3a      	adds	r2, r7, #4
 80027aa:	8812      	ldrh	r2, [r2, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8e7      	bhi.n	8002780 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b299      	uxth	r1, r3
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f107 020c 	add.w	r2, r7, #12
 80027c2:	200a      	movs	r0, #10
 80027c4:	9000      	str	r0, [sp, #0]
 80027c6:	4804      	ldr	r0, [pc, #16]	; (80027d8 <ssd1306_I2C_WriteMulti+0x8c>)
 80027c8:	f002 f81e 	bl	8004808 <HAL_I2C_Master_Transmit>
}
 80027cc:	bf00      	nop
 80027ce:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20001de4 	.word	0x20001de4

080027dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	460b      	mov	r3, r1
 80027e8:	71bb      	strb	r3, [r7, #6]
 80027ea:	4613      	mov	r3, r2
 80027ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	b299      	uxth	r1, r3
 80027fa:	f107 020c 	add.w	r2, r7, #12
 80027fe:	230a      	movs	r3, #10
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2302      	movs	r3, #2
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <ssd1306_I2C_Write+0x38>)
 8002806:	f001 ffff 	bl	8004808 <HAL_I2C_Master_Transmit>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20001de4 	.word	0x20001de4

08002818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_MspInit+0x4c>)
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <HAL_MspInit+0x4c>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6613      	str	r3, [r2, #96]	; 0x60
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_MspInit+0x4c>)
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_MspInit+0x4c>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_MspInit+0x4c>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_MspInit+0x4c>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	210f      	movs	r1, #15
 8002852:	f06f 0001 	mvn.w	r0, #1
 8002856:	f001 fcde 	bl	8004216 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_ADC_MspInit+0x74>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d124      	bne.n	80028d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 8002890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_ADC_MspInit+0x78>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80028ba:	23f8      	movs	r3, #248	; 0xf8
 80028bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028be:	2303      	movs	r3, #3
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d0:	f001 fd56 	bl	8004380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	50040000 	.word	0x50040000
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_I2C_MspInit+0x7c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d127      	bne.n	8002956 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_I2C_MspInit+0x80>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	4a16      	ldr	r2, [pc, #88]	; (8002964 <HAL_I2C_MspInit+0x80>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_I2C_MspInit+0x80>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002926:	2301      	movs	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292e:	2304      	movs	r3, #4
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <HAL_I2C_MspInit+0x84>)
 800293a:	f001 fd21 	bl	8004380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_I2C_MspInit+0x80>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_I2C_MspInit+0x80>)
 8002944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_I2C_MspInit+0x80>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40005400 	.word	0x40005400
 8002964:	40021000 	.word	0x40021000
 8002968:	48000400 	.word	0x48000400

0800296c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_TIM_Base_MspInit+0x44>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d113      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6593      	str	r3, [r2, #88]	; 0x58
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2105      	movs	r1, #5
 800299a:	2036      	movs	r0, #54	; 0x36
 800299c:	f001 fc3b 	bl	8004216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029a0:	2036      	movs	r0, #54	; 0x36
 80029a2:	f001 fc54 	bl	800424e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40001000 	.word	0x40001000
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_UART_MspInit+0x90>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d131      	bne.n	8002a3e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_UART_MspInit+0x94>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_UART_MspInit+0x94>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6613      	str	r3, [r2, #96]	; 0x60
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_UART_MspInit+0x94>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_MspInit+0x94>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_UART_MspInit+0x94>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_UART_MspInit+0x94>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2a:	f001 fca9 	bl	8004380 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	2025      	movs	r0, #37	; 0x25
 8002a34:	f001 fbef 	bl	8004216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a38:	2025      	movs	r0, #37	; 0x25
 8002a3a:	f001 fc08 	bl	800424e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000

08002a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <NMI_Handler+0x4>

08002a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <HardFault_Handler+0x4>

08002a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <MemManage_Handler+0x4>

08002a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <BusFault_Handler+0x4>

08002a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <UsageFault_Handler+0x4>

08002a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f000 f8e0 	bl	8002c44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a84:	f007 fa58 	bl	8009f38 <xTaskGetSchedulerState>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a8e:	f008 f87b 	bl	800ab88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f001 fe0c 	bl	80046b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <USART1_IRQHandler+0x10>)
 8002aaa:	f004 f9c3 	bl	8006e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20001ea0 	.word	0x20001ea0

08002ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <TIM6_DAC_IRQHandler+0x24>)
 8002abe:	f003 fed5 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  count++;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <TIM6_DAC_IRQHandler+0x28>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <TIM6_DAC_IRQHandler+0x28>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20001f24 	.word	0x20001f24
 8002ae0:	200000f4 	.word	0x200000f4

08002ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <SystemInit+0x5c>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <SystemInit+0x5c>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <SystemInit+0x60>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <SystemInit+0x60>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <SystemInit+0x60>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <SystemInit+0x60>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <SystemInit+0x60>)
 8002b10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <SystemInit+0x60>)
 8002b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <SystemInit+0x60>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <SystemInit+0x60>)
 8002b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SystemInit+0x60>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	40021000 	.word	0x40021000

08002b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b4c:	f7ff ffca 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b52:	e003      	b.n	8002b5c <LoopCopyDataInit>

08002b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b5a:	3104      	adds	r1, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b64:	d3f6      	bcc.n	8002b54 <CopyDataInit>
	ldr	r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b68:	e002      	b.n	8002b70 <LoopFillZerobss>

08002b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b6c:	f842 3b04 	str.w	r3, [r2], #4

08002b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <LoopForever+0x16>)
	cmp	r2, r3
 8002b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b74:	d3f9      	bcc.n	8002b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b76:	f008 fa87 	bl	800b088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b7a:	f7fe f981 	bl	8000e80 <main>

08002b7e <LoopForever>:

LoopForever:
    b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b80:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002b84:	0800db70 	.word	0x0800db70
	ldr	r0, =_sdata
 8002b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b8c:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8002b90:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8002b94:	20001fc0 	.word	0x20001fc0

08002b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC1_IRQHandler>

08002b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f001 fb2b 	bl	8004200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002baa:	200f      	movs	r0, #15
 8002bac:	f000 f80e 	bl	8002bcc <HAL_InitTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e001      	b.n	8002bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bbc:	f7ff fe2c 	bl	8002818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_InitTick+0x6c>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_InitTick+0x70>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_InitTick+0x6c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fb37 	bl	800426a <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d809      	bhi.n	8002c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f001 fb01 	bl	8004216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_InitTick+0x74>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e007      	b.n	8002c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e004      	b.n	8002c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e001      	b.n	8002c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000002c 	.word	0x2000002c
 8002c3c:	20000024 	.word	0x20000024
 8002c40:	20000028 	.word	0x20000028

08002c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x20>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x24>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_IncTick+0x24>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000002c 	.word	0x2000002c
 8002c68:	20001f7c 	.word	0x20001f7c

08002c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_GetTick+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20001f7c 	.word	0x20001f7c

08002c84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <LL_ADC_SetOffset+0x44>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	03fff000 	.word	0x03fff000

08002d34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	461a      	mov	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3360      	adds	r3, #96	; 0x60
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3330      	adds	r3, #48	; 0x30
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	211f      	movs	r1, #31
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	401a      	ands	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	f003 011f 	and.w	r1, r3, #31
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3314      	adds	r3, #20
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0e5b      	lsrs	r3, r3, #25
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0d1b      	lsrs	r3, r3, #20
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2107      	movs	r1, #7
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0d1b      	lsrs	r3, r3, #20
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0318 	and.w	r3, r3, #24
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e90:	40d9      	lsrs	r1, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	400b      	ands	r3, r1
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	0007ffff 	.word	0x0007ffff

08002eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_IsEnabled+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_IsEnabled+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_IsDisableOngoing+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_IsDisableOngoing+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d101      	bne.n	8003054 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003072:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d101      	bne.n	80030a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e12c      	b.n	8003324 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fbc5 	bl	8002868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fef1 	bl	8002ed8 <LL_ADC_IsDeepPowerDownEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fed7 	bl	8002eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff0c 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fef0 	bl	8002f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003120:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_ADC_Init+0x27c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a82      	ldr	r2, [pc, #520]	; (8003330 <HAL_ADC_Init+0x280>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003134:	e002      	b.n	800313c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3b01      	subs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff feee 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff62 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003178:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80c5 	bne.w	8003312 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80c1 	bne.w	8003312 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003198:	f043 0202 	orr.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fefb 	bl	8002fa0 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b0:	4860      	ldr	r0, [pc, #384]	; (8003334 <HAL_ADC_Init+0x284>)
 80031b2:	f7ff fef5 	bl	8002fa0 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	485d      	ldr	r0, [pc, #372]	; (8003338 <HAL_ADC_Init+0x288>)
 80031c4:	f7ff fd5e 	bl	8002c84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e5b      	ldrb	r3, [r3, #25]
 80031cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d106      	bne.n	8003204 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	045b      	lsls	r3, r3, #17
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b45      	ldr	r3, [pc, #276]	; (800333c <HAL_ADC_Init+0x28c>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	430b      	orrs	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff feff 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 800323e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff20 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 800324a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d13d      	bne.n	80032ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d13a      	bne.n	80032ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800325c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003264:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003274:	f023 0302 	bic.w	r3, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	430b      	orrs	r3, r1
 8003280:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003288:	2b01      	cmp	r3, #1
 800328a:	d118      	bne.n	80032be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ae:	430a      	orrs	r2, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	611a      	str	r2, [r3, #16]
 80032bc:	e007      	b.n	80032ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10c      	bne.n	80032f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	f023 010f 	bic.w	r1, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	1e5a      	subs	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
 80032ee:	e007      	b.n	8003300 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020f 	bic.w	r2, r2, #15
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
 8003310:	e007      	b.n	8003322 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003322:	7ffb      	ldrb	r3, [r7, #31]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000024 	.word	0x20000024
 8003330:	053e2d63 	.word	0x053e2d63
 8003334:	50040000 	.word	0x50040000
 8003338:	50040300 	.word	0x50040300
 800333c:	fff0c007 	.word	0xfff0c007

08003340 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fe75 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d14f      	bne.n	80033f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Start+0x26>
 8003362:	2302      	movs	r3, #2
 8003364:	e04b      	b.n	80033fe <HAL_ADC_Start+0xbe>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fdb4 	bl	8003edc <ADC_Enable>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d137      	bne.n	80033ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d106      	bne.n	80033ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f023 0206 	bic.w	r2, r3, #6
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58
 80033ac:	e002      	b.n	80033b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	221c      	movs	r2, #28
 80033ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe00 	bl	8002fec <LL_ADC_REG_StartConversion>
 80033ec:	e006      	b.n	80033fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033f6:	e001      	b.n	80033fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_ADC_Stop+0x16>
 8003418:	2302      	movs	r3, #2
 800341a:	e023      	b.n	8003464 <HAL_ADC_Stop+0x5e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003424:	2103      	movs	r1, #3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fc9c 	bl	8003d64 <ADC_ConversionStop>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d111      	bne.n	800345a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fdb2 	bl	8003fa0 <ADC_Disable>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d102      	bne.n	8003484 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800347e:	2308      	movs	r3, #8
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e010      	b.n	80034a6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06f      	b.n	8003582 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80034a2:	2304      	movs	r3, #4
 80034a4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034a6:	f7ff fbe1 	bl	8002c6c <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d01d      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80034b6:	f7ff fbd9 	bl	8002c6c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <HAL_ADC_PollForConversion+0x60>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d112      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e047      	b.n	8003582 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0d6      	beq.n	80034ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fc40 	bl	8002d96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e5b      	ldrb	r3, [r3, #25]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d111      	bne.n	8003556 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d104      	bne.n	800356e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e008      	b.n	8003580 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	220c      	movs	r2, #12
 800357e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b0b6      	sub	sp, #216	; 0xd8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x22>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e3b9      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x796>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fd32 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 839e 	bne.w	8003d1c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d824      	bhi.n	8003632 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	3b02      	subs	r3, #2
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d81b      	bhi.n	800362a <HAL_ADC_ConfigChannel+0x86>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_ADC_ConfigChannel+0x54>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	08003609 	.word	0x08003609
 80035fc:	08003611 	.word	0x08003611
 8003600:	08003619 	.word	0x08003619
 8003604:	08003621 	.word	0x08003621
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	220c      	movs	r2, #12
 800360c:	605a      	str	r2, [r3, #4]
          break;
 800360e:	e011      	b.n	8003634 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2212      	movs	r2, #18
 8003614:	605a      	str	r2, [r3, #4]
          break;
 8003616:	e00d      	b.n	8003634 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2218      	movs	r2, #24
 800361c:	605a      	str	r2, [r3, #4]
          break;
 800361e:	e009      	b.n	8003634 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003626:	605a      	str	r2, [r3, #4]
          break;
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2206      	movs	r2, #6
 800362e:	605a      	str	r2, [r3, #4]
          break;
 8003630:	e000      	b.n	8003634 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003632:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f7ff fbbb 	bl	8002dbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fcf6 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003650:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fd16 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 800365e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003662:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 81a6 	bne.w	80039b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800366c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 81a1 	bne.w	80039b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	461a      	mov	r2, r3
 8003684:	f7ff fbc6 	bl	8002e14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d00a      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6919      	ldr	r1, [r3, #16]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036ba:	f7ff fb17 	bl	8002cec <LL_ADC_SetOffset>
 80036be:	e17b      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fb34 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x148>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fb29 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 80036e2:	4603      	mov	r3, r0
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	f003 021f 	and.w	r2, r3, #31
 80036ea:	e01e      	b.n	800372a <HAL_ADC_ConfigChannel+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fb1e 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800370a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800370e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e004      	b.n	8003728 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800371e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x19e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	e018      	b.n	8003774 <HAL_ADC_ConfigChannel+0x1d0>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800375a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800375e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e004      	b.n	8003774 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800376a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003774:	429a      	cmp	r2, r3
 8003776:	d106      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff faed 	bl	8002d60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fad1 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 8003792:	4603      	mov	r3, r0
 8003794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x20e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fac6 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	0e9b      	lsrs	r3, r3, #26
 80037ac:	f003 021f 	and.w	r2, r3, #31
 80037b0:	e01e      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x24c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fabb 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 80037be:	4603      	mov	r3, r0
 80037c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	e004      	b.n	80037ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80037e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x264>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	e018      	b.n	800383a <HAL_ADC_ConfigChannel+0x296>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800381c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800382c:	2320      	movs	r3, #32
 800382e:	e004      	b.n	800383a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800383a:	429a      	cmp	r2, r3
 800383c:	d106      	bne.n	800384c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fa8a 	bl	8002d60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fa6e 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 8003858:	4603      	mov	r3, r0
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x2d4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2102      	movs	r1, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fa63 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 800386e:	4603      	mov	r3, r0
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	f003 021f 	and.w	r2, r3, #31
 8003876:	e01e      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x312>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fa58 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 8003884:	4603      	mov	r3, r0
 8003886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800389a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800389e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e004      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80038aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x32a>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	e016      	b.n	80038fc <HAL_ADC_ConfigChannel+0x358>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80038ee:	2320      	movs	r3, #32
 80038f0:	e004      	b.n	80038fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80038f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d106      	bne.n	800390e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fa29 	bl	8002d60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2103      	movs	r1, #3
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fa0d 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_ADC_ConfigChannel+0x396>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2103      	movs	r1, #3
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fa02 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	0e9b      	lsrs	r3, r3, #26
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	e017      	b.n	800396a <HAL_ADC_ConfigChannel+0x3c6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2103      	movs	r1, #3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff f9f7 	bl	8002d34 <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003954:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e003      	b.n	8003968 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x3de>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	e011      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x402>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003992:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800399a:	2320      	movs	r3, #32
 800399c:	e003      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d106      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2103      	movs	r1, #3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f9d4 	bl	8002d60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff faef 	bl	8002fa0 <LL_ADC_IsEnabled>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 813f 	bne.w	8003c48 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7ff fa48 	bl	8002e6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a8e      	ldr	r2, [pc, #568]	; (8003c1c <HAL_ADC_ConfigChannel+0x678>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f040 8130 	bne.w	8003c48 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x46c>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e019      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x4a0>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a28:	2320      	movs	r3, #32
 8003a2a:	e003      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	bf94      	ite	ls
 8003a3e:	2301      	movls	r3, #1
 8003a40:	2300      	movhi	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d079      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d107      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x4c0>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	069b      	lsls	r3, r3, #26
 8003a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a62:	e015      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x4ec>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x50c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	e017      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x53c>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	ea42 0103 	orr.w	r1, r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x562>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	051b      	lsls	r3, r3, #20
 8003b04:	e018      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x594>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	e080      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d107      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x5b4>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	3301      	adds	r3, #1
 8003b50:	069b      	lsls	r3, r3, #26
 8003b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b56:	e015      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x5e0>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003b70:	2320      	movs	r3, #32
 8003b72:	e003      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	069b      	lsls	r3, r3, #26
 8003b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x600>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	3301      	adds	r3, #1
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	e017      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x630>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x65c>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	3301      	adds	r3, #1
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3b1e      	subs	r3, #30
 8003bf8:	051b      	lsls	r3, r3, #20
 8003bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	e01d      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x698>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	613b      	str	r3, [r7, #16]
  return result;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e005      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x684>
 8003c1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	3b1e      	subs	r3, #30
 8003c36:	051b      	lsls	r3, r3, #20
 8003c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	4619      	mov	r1, r3
 8003c44:	f7ff f8e6 	bl	8002e14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_ADC_ConfigChannel+0x7a0>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d06c      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c54:	483c      	ldr	r0, [pc, #240]	; (8003d48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c56:	f7ff f83b 	bl	8002cd0 <LL_ADC_GetCommonPathInternalCh>
 8003c5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <HAL_ADC_ConfigChannel+0x7a8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d127      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d121      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d157      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c86:	4619      	mov	r1, r3
 8003c88:	482f      	ldr	r0, [pc, #188]	; (8003d48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c8a:	f7ff f80e 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f9      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb6:	e03a      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d113      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x746>
 8003cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d12a      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4819      	ldr	r0, [pc, #100]	; (8003d48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003ce4:	f7fe ffe1 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce8:	e021      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d11c      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d111      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d12:	4619      	mov	r1, r3
 8003d14:	480c      	ldr	r0, [pc, #48]	; (8003d48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d16:	f7fe ffc8 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
 8003d1a:	e008      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	37d8      	adds	r7, #216	; 0xd8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	80080000 	.word	0x80080000
 8003d48:	50040300 	.word	0x50040300
 8003d4c:	c7520000 	.word	0xc7520000
 8003d50:	50040000 	.word	0x50040000
 8003d54:	20000024 	.word	0x20000024
 8003d58:	053e2d63 	.word	0x053e2d63
 8003d5c:	cb840000 	.word	0xcb840000
 8003d60:	80000001 	.word	0x80000001

08003d64 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff f95e 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003d80:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f97f 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 8003d8c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8098 	beq.w	8003ecc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02a      	beq.n	8003e00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7e5b      	ldrb	r3, [r3, #25]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d126      	bne.n	8003e00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e1b      	ldrb	r3, [r3, #24]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d122      	bne.n	8003e00 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dbe:	e014      	b.n	8003dea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4a45      	ldr	r2, [pc, #276]	; (8003ed8 <ADC_ConversionStop+0x174>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d90d      	bls.n	8003de4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e074      	b.n	8003ece <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d1e3      	bne.n	8003dc0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d014      	beq.n	8003e30 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f916 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f8d3 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f8f2 	bl	8003014 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d014      	beq.n	8003e60 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f925 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f8bb 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f901 	bl	8003062 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d005      	beq.n	8003e72 <ADC_ConversionStop+0x10e>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d105      	bne.n	8003e78 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	617b      	str	r3, [r7, #20]
        break;
 8003e70:	e005      	b.n	8003e7e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e72:	2308      	movs	r3, #8
 8003e74:	617b      	str	r3, [r7, #20]
        break;
 8003e76:	e002      	b.n	8003e7e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e78:	2304      	movs	r3, #4
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e7e:	f7fe fef5 	bl	8002c6c <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e84:	e01b      	b.n	8003ebe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e86:	f7fe fef1 	bl	8002c6c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d914      	bls.n	8003ebe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1dc      	bne.n	8003e86 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	a33fffff 	.word	0xa33fffff

08003edc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f859 	bl	8002fa0 <LL_ADC_IsEnabled>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d14d      	bne.n	8003f90 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <ADC_Enable+0xc0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e039      	b.n	8003f92 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f814 	bl	8002f50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f28:	f7fe fea0 	bl	8002c6c <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f2e:	e028      	b.n	8003f82 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff f833 	bl	8002fa0 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f803 	bl	8002f50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f4a:	f7fe fe8f 	bl	8002c6c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d914      	bls.n	8003f82 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d00d      	beq.n	8003f82 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e007      	b.n	8003f92 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d1cf      	bne.n	8003f30 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	8000003f 	.word	0x8000003f

08003fa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff f80a 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 8003fb2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fff1 	bl	8002fa0 <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d047      	beq.n	8004054 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d144      	bne.n	8004054 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030d 	and.w	r3, r3, #13
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10c      	bne.n	8003ff2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe ffcb 	bl	8002f78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fea:	f7fe fe3f 	bl	8002c6c <HAL_GetTick>
 8003fee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff0:	e029      	b.n	8004046 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f043 0210 	orr.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e023      	b.n	8004056 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800400e:	f7fe fe2d 	bl	8002c6c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d914      	bls.n	8004046 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e007      	b.n	8004056 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1dc      	bne.n	800400e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	60d3      	str	r3, [r2, #12]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0307 	and.w	r3, r3, #7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <__NVIC_EnableIRQ+0x38>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e100 	.word	0xe000e100

08004100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db0a      	blt.n	800412a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	490c      	ldr	r1, [pc, #48]	; (800414c <__NVIC_SetPriority+0x4c>)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	440b      	add	r3, r1
 8004124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004128:	e00a      	b.n	8004140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4908      	ldr	r1, [pc, #32]	; (8004150 <__NVIC_SetPriority+0x50>)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	3b04      	subs	r3, #4
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	440b      	add	r3, r1
 800413e:	761a      	strb	r2, [r3, #24]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf28      	it	cs
 8004172:	2304      	movcs	r3, #4
 8004174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3304      	adds	r3, #4
 800417a:	2b06      	cmp	r3, #6
 800417c:	d902      	bls.n	8004184 <NVIC_EncodePriority+0x30>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3b03      	subs	r3, #3
 8004182:	e000      	b.n	8004186 <NVIC_EncodePriority+0x32>
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	401a      	ands	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800419c:	f04f 31ff 	mov.w	r1, #4294967295
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	43d9      	mvns	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	4313      	orrs	r3, r2
         );
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041cc:	d301      	bcc.n	80041d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ce:	2301      	movs	r3, #1
 80041d0:	e00f      	b.n	80041f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <SysTick_Config+0x40>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041da:	210f      	movs	r1, #15
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	f7ff ff8e 	bl	8004100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <SysTick_Config+0x40>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <SysTick_Config+0x40>)
 80041ec:	2207      	movs	r2, #7
 80041ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	e000e010 	.word	0xe000e010

08004200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff29 	bl	8004060 <__NVIC_SetPriorityGrouping>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004228:	f7ff ff3e 	bl	80040a8 <__NVIC_GetPriorityGrouping>
 800422c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff8e 	bl	8004154 <NVIC_EncodePriority>
 8004238:	4602      	mov	r2, r0
 800423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff5d 	bl	8004100 <__NVIC_SetPriority>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff31 	bl	80040c4 <__NVIC_EnableIRQ>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ffa2 	bl	80041bc <SysTick_Config>
 8004278:	4603      	mov	r3, r0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d008      	beq.n	80042ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e022      	b.n	80042f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f003 021c 	and.w	r2, r3, #28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d005      	beq.n	8004322 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2204      	movs	r2, #4
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e029      	b.n	8004376 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 020e 	bic.w	r2, r2, #14
 8004330:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f003 021c 	and.w	r2, r3, #28
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
    }
  }
  return status;
 8004376:	7bfb      	ldrb	r3, [r7, #15]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800438e:	e148      	b.n	8004622 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 813a 	beq.w	800461c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d00b      	beq.n	80043c8 <HAL_GPIO_Init+0x48>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d007      	beq.n	80043c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043bc:	2b11      	cmp	r3, #17
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b12      	cmp	r3, #18
 80043c6:	d130      	bne.n	800442a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043fe:	2201      	movs	r2, #1
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0201 	and.w	r2, r3, #1
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	2203      	movs	r2, #3
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0xea>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b12      	cmp	r3, #18
 8004468:	d123      	bne.n	80044b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	08da      	lsrs	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3208      	adds	r2, #8
 8004472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	08da      	lsrs	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3208      	adds	r2, #8
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0203 	and.w	r2, r3, #3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8094 	beq.w	800461c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f4:	4b52      	ldr	r3, [pc, #328]	; (8004640 <HAL_GPIO_Init+0x2c0>)
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	4a51      	ldr	r2, [pc, #324]	; (8004640 <HAL_GPIO_Init+0x2c0>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004500:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_GPIO_Init+0x2c0>)
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800450c:	4a4d      	ldr	r2, [pc, #308]	; (8004644 <HAL_GPIO_Init+0x2c4>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	220f      	movs	r2, #15
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004536:	d00d      	beq.n	8004554 <HAL_GPIO_Init+0x1d4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a43      	ldr	r2, [pc, #268]	; (8004648 <HAL_GPIO_Init+0x2c8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <HAL_GPIO_Init+0x1d0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_GPIO_Init+0x2cc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_GPIO_Init+0x1cc>
 8004548:	2302      	movs	r3, #2
 800454a:	e004      	b.n	8004556 <HAL_GPIO_Init+0x1d6>
 800454c:	2307      	movs	r3, #7
 800454e:	e002      	b.n	8004556 <HAL_GPIO_Init+0x1d6>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_GPIO_Init+0x1d6>
 8004554:	2300      	movs	r3, #0
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	f002 0203 	and.w	r2, r2, #3
 800455c:	0092      	lsls	r2, r2, #2
 800455e:	4093      	lsls	r3, r2
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004566:	4937      	ldr	r1, [pc, #220]	; (8004644 <HAL_GPIO_Init+0x2c4>)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	3302      	adds	r3, #2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004598:	4a2d      	ldr	r2, [pc, #180]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c8:	4b21      	ldr	r3, [pc, #132]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	43db      	mvns	r3, r3
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <HAL_GPIO_Init+0x2d0>)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3301      	adds	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	f47f aeaf 	bne.w	8004390 <HAL_GPIO_Init+0x10>
  }
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40021000 	.word	0x40021000
 8004644:	40010000 	.word	0x40010000
 8004648:	48000400 	.word	0x48000400
 800464c:	48000800 	.word	0x48000800
 8004650:	40010400 	.word	0x40010400

08004654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
 8004660:	4613      	mov	r3, r2
 8004662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004664:	787b      	ldrb	r3, [r7, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004670:	e002      	b.n	8004678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	041a      	lsls	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	43d9      	mvns	r1, r3
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	400b      	ands	r3, r1
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ce:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd f8ae 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40010400 	.word	0x40010400

080046e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e081      	b.n	80047fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe f8e8 	bl	80028e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	e006      	b.n	8004770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800476e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d104      	bne.n	8004782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	ea42 0103 	orr.w	r1, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	021a      	lsls	r2, r3, #8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69d9      	ldr	r1, [r3, #28]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	461a      	mov	r2, r3
 8004814:	460b      	mov	r3, r1
 8004816:	817b      	strh	r3, [r7, #10]
 8004818:	4613      	mov	r3, r2
 800481a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	f040 80da 	bne.w	80049de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_I2C_Master_Transmit+0x30>
 8004834:	2302      	movs	r3, #2
 8004836:	e0d3      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004840:	f7fe fa14 	bl	8002c6c <HAL_GetTick>
 8004844:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2319      	movs	r3, #25
 800484c:	2201      	movs	r2, #1
 800484e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fbc6 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0be      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2210      	movs	r2, #16
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	2bff      	cmp	r3, #255	; 0xff
 8004892:	d90e      	bls.n	80048b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	8979      	ldrh	r1, [r7, #10]
 80048a2:	4b51      	ldr	r3, [pc, #324]	; (80049e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fcbc 	bl	8005228 <I2C_TransferConfig>
 80048b0:	e06c      	b.n	800498c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	8979      	ldrh	r1, [r7, #10]
 80048c4:	4b48      	ldr	r3, [pc, #288]	; (80049e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fcab 	bl	8005228 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80048d2:	e05b      	b.n	800498c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	6a39      	ldr	r1, [r7, #32]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fbc3 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e07b      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d034      	beq.n	800498c <HAL_I2C_Master_Transmit+0x184>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d130      	bne.n	800498c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2200      	movs	r2, #0
 8004932:	2180      	movs	r1, #128	; 0x80
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fb55 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04d      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2bff      	cmp	r3, #255	; 0xff
 800494c:	d90e      	bls.n	800496c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fc5f 	bl	8005228 <I2C_TransferConfig>
 800496a:	e00f      	b.n	800498c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fc4e 	bl	8005228 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d19e      	bne.n	80048d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fba2 	bl	80050e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e01a      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2220      	movs	r2, #32
 80049b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_I2C_Master_Transmit+0x1e4>)
 80049be:	400b      	ands	r3, r1
 80049c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	80002000 	.word	0x80002000
 80049ec:	fe00e800 	.word	0xfe00e800

080049f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	f040 80f9 	bne.w	8004c0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x34>
 8004a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0ed      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Mem_Write+0x4e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0e6      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a46:	f7fe f911 	bl	8002c6c <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2319      	movs	r3, #25
 8004a52:	2201      	movs	r2, #1
 8004a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fac3 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d1      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2221      	movs	r2, #33	; 0x21
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	; 0x40
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a90:	88f8      	ldrh	r0, [r7, #6]
 8004a92:	893a      	ldrh	r2, [r7, #8]
 8004a94:	8979      	ldrh	r1, [r7, #10]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f9d3 	bl	8004e4c <I2C_RequestMemoryWrite>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0a9      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2bff      	cmp	r3, #255	; 0xff
 8004ac0:	d90e      	bls.n	8004ae0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fba5 	bl	8005228 <I2C_TransferConfig>
 8004ade:	e00f      	b.n	8004b00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	8979      	ldrh	r1, [r7, #10]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fb94 	bl	8005228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 faad 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e07b      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d034      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x1c8>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d130      	bne.n	8004bb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fa3f 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e04d      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2bff      	cmp	r3, #255	; 0xff
 8004b78:	d90e      	bls.n	8004b98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	8979      	ldrh	r1, [r7, #10]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb49 	bl	8005228 <I2C_TransferConfig>
 8004b96:	e00f      	b.n	8004bb8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	8979      	ldrh	r1, [r7, #10]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fb38 	bl	8005228 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d19e      	bne.n	8004b00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa8c 	bl	80050e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e01a      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_I2C_Mem_Write+0x224>)
 8004bea:	400b      	ands	r3, r1
 8004bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e000      	b.n	8004c0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	fe00e800 	.word	0xfe00e800

08004c18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	f040 80fd 	bne.w	8004e3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_I2C_Mem_Read+0x34>
 8004c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0f1      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x4e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0ea      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fd fffd 	bl	8002c6c <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2319      	movs	r3, #25
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f9af 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0d5      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2222      	movs	r2, #34	; 0x22
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb8:	88f8      	ldrh	r0, [r7, #6]
 8004cba:	893a      	ldrh	r2, [r7, #8]
 8004cbc:	8979      	ldrh	r1, [r7, #10]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f913 	bl	8004ef4 <I2C_RequestMemoryRead>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0ad      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2bff      	cmp	r3, #255	; 0xff
 8004ce8:	d90e      	bls.n	8004d08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	4b52      	ldr	r3, [pc, #328]	; (8004e44 <HAL_I2C_Mem_Read+0x22c>)
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fa91 	bl	8005228 <I2C_TransferConfig>
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	; (8004e44 <HAL_I2C_Mem_Read+0x22c>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fa80 	bl	8005228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2104      	movs	r1, #4
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f956 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e07c      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d034      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x1d0>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d130      	bne.n	8004de8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f927 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e04d      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2bff      	cmp	r3, #255	; 0xff
 8004da8:	d90e      	bls.n	8004dc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	22ff      	movs	r2, #255	; 0xff
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	8979      	ldrh	r1, [r7, #10]
 8004db8:	2300      	movs	r3, #0
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fa31 	bl	8005228 <I2C_TransferConfig>
 8004dc6:	e00f      	b.n	8004de8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	8979      	ldrh	r1, [r7, #10]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fa20 	bl	8005228 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d19a      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f974 	bl	80050e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e01a      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_I2C_Mem_Read+0x230>)
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	80002400 	.word	0x80002400
 8004e48:	fe00e800 	.word	0xfe00e800

08004e4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	8979      	ldrh	r1, [r7, #10]
 8004e6c:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <I2C_RequestMemoryWrite+0xa4>)
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9d7 	bl	8005228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f8f0 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e02c      	b.n	8004ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e9e:	e015      	b.n	8004ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ea0:	893b      	ldrh	r3, [r7, #8]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f8d6 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e012      	b.n	8004ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f884 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	80002000 	.word	0x80002000

08004ef4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	817b      	strh	r3, [r7, #10]
 8004f06:	460b      	mov	r3, r1
 8004f08:	813b      	strh	r3, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	8979      	ldrh	r1, [r7, #10]
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <I2C_RequestMemoryRead+0xa4>)
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f984 	bl	8005228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f89d 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e02c      	b.n	8004f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3a:	893b      	ldrh	r3, [r7, #8]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	e015      	b.n	8004f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f46:	893b      	ldrh	r3, [r7, #8]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f883 	bl	8005064 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e012      	b.n	8004f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f68:	893b      	ldrh	r3, [r7, #8]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2140      	movs	r1, #64	; 0x40
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f831 	bl	8004fe4 <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	80002000 	.word	0x80002000

08004f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d103      	bne.n	8004fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d007      	beq.n	8004fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	619a      	str	r2, [r3, #24]
  }
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff4:	e022      	b.n	800503c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d01e      	beq.n	800503c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fd fe35 	bl	8002c6c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d113      	bne.n	800503c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e00f      	b.n	800505c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	429a      	cmp	r2, r3
 8005058:	d0cd      	beq.n	8004ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005070:	e02c      	b.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f870 	bl	800515c <I2C_IsAcknowledgeFailed>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e02a      	b.n	80050dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d01e      	beq.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fd fded 	bl	8002c6c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d113      	bne.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e007      	b.n	80050dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d1cb      	bne.n	8005072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f0:	e028      	b.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f830 	bl	800515c <I2C_IsAcknowledgeFailed>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e026      	b.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fd fdb1 	bl	8002c6c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e007      	b.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b20      	cmp	r3, #32
 8005150:	d1cf      	bne.n	80050f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d151      	bne.n	800521a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005176:	e022      	b.n	80051be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d01e      	beq.n	80051be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fd fd74 	bl	8002c6c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_IsAcknowledgeFailed+0x3a>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d113      	bne.n	80051be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02e      	b.n	800521c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d1d5      	bne.n	8005178 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2210      	movs	r2, #16
 80051d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2220      	movs	r2, #32
 80051da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fedd 	bl	8004f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <I2C_IsAcknowledgeFailed+0xc8>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f043 0204 	orr.w	r2, r3, #4
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	fe00e800 	.word	0xfe00e800

08005228 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	4613      	mov	r3, r2
 8005238:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	0d5b      	lsrs	r3, r3, #21
 8005244:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005248:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <I2C_TransferConfig+0x58>)
 800524a:	430b      	orrs	r3, r1
 800524c:	43db      	mvns	r3, r3
 800524e:	ea02 0103 	and.w	r1, r2, r3
 8005252:	897b      	ldrh	r3, [r7, #10]
 8005254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005258:	7a7b      	ldrb	r3, [r7, #9]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	431a      	orrs	r2, r3
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	03ff63ff 	.word	0x03ff63ff

08005284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d138      	bne.n	800530c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e032      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b20      	cmp	r3, #32
 800532e:	d139      	bne.n	80053a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800533a:	2302      	movs	r3, #2
 800533c:	e033      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2224      	movs	r2, #36	; 0x24
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800536c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6613      	str	r3, [r2, #96]	; 0x60
 80053c8:	4b08      	ldr	r3, [pc, #32]	; (80053ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	4905      	ldr	r1, [pc, #20]	; (80053f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40010000 	.word	0x40010000

080053f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	6013      	str	r3, [r2, #0]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40007000 	.word	0x40007000

08005414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_PWREx_GetVoltageRange+0x18>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40007000 	.word	0x40007000

08005430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d130      	bne.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005440:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544c:	d038      	beq.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800545c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800545e:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2232      	movs	r2, #50	; 0x32
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0c9b      	lsrs	r3, r3, #18
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005474:	e002      	b.n	800547c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b01      	subs	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d102      	bne.n	8005490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f2      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549c:	d110      	bne.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e00f      	b.n	80054c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d007      	beq.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054b8:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40007000 	.word	0x40007000
 80054d4:	20000024 	.word	0x20000024
 80054d8:	431bde83 	.word	0x431bde83

080054dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f000 bc11 	b.w	8005d12 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f0:	4ba0      	ldr	r3, [pc, #640]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054fa:	4b9e      	ldr	r3, [pc, #632]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80e4 	beq.w	80056da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_RCC_OscConfig+0x4c>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	f040 808b 	bne.w	8005636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b01      	cmp	r3, #1
 8005524:	f040 8087 	bne.w	8005636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005528:	4b92      	ldr	r3, [pc, #584]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x64>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e3e8      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	4b8b      	ldr	r3, [pc, #556]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_RCC_OscConfig+0x7e>
 8005550:	4b88      	ldr	r3, [pc, #544]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005558:	e005      	b.n	8005566 <HAL_RCC_OscConfig+0x8a>
 800555a:	4b86      	ldr	r3, [pc, #536]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800555c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	4293      	cmp	r3, r2
 8005568:	d223      	bcs.n	80055b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fd7a 	bl	8006068 <RCC_SetFlashLatencyFromMSIRange>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e3c9      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800557e:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7c      	ldr	r2, [pc, #496]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4b7a      	ldr	r3, [pc, #488]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4977      	ldr	r1, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	4972      	ldr	r1, [pc, #456]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
 80055b0:	e025      	b.n	80055fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	496a      	ldr	r1, [pc, #424]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d0:	4b68      	ldr	r3, [pc, #416]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	4965      	ldr	r1, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fd3a 	bl	8006068 <RCC_SetFlashLatencyFromMSIRange>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e389      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055fe:	f000 fc6f 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005602:	4602      	mov	r2, r0
 8005604:	4b5b      	ldr	r3, [pc, #364]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	495a      	ldr	r1, [pc, #360]	; (8005778 <HAL_RCC_OscConfig+0x29c>)
 8005610:	5ccb      	ldrb	r3, [r1, r3]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x2a0>)
 800561c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800561e:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x2a4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd fad2 	bl	8002bcc <HAL_InitTick>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d052      	beq.n	80056d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	e36d      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d032      	beq.n	80056a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800563e:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a4c      	ldr	r2, [pc, #304]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800564a:	f7fd fb0f 	bl	8002c6c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005652:	f7fd fb0b 	bl	8002c6c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e356      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005664:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005670:	4b40      	ldr	r3, [pc, #256]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a3f      	ldr	r2, [pc, #252]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005676:	f043 0308 	orr.w	r3, r3, #8
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	4b3d      	ldr	r3, [pc, #244]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	493a      	ldr	r1, [pc, #232]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4935      	ldr	r1, [pc, #212]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
 80056a2:	e01a      	b.n	80056da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056b0:	f7fd fadc 	bl	8002c6c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056b8:	f7fd fad8 	bl	8002c6c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e323      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056ca:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x1dc>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d073      	beq.n	80057ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_OscConfig+0x21c>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d10e      	bne.n	8005710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d10b      	bne.n	8005710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d063      	beq.n	80057cc <HAL_RCC_OscConfig+0x2f0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d15f      	bne.n	80057cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e300      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x24c>
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e01d      	b.n	8005764 <HAL_RCC_OscConfig+0x288>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x270>
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0x288>
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 8005752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <HAL_RCC_OscConfig+0x298>)
 800575e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fd fa7e 	bl	8002c6c <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005772:	e010      	b.n	8005796 <HAL_RCC_OscConfig+0x2ba>
 8005774:	40021000 	.word	0x40021000
 8005778:	0800da90 	.word	0x0800da90
 800577c:	20000024 	.word	0x20000024
 8005780:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd fa72 	bl	8002c6c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e2bd      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	4baf      	ldr	r3, [pc, #700]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x2a8>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd fa62 	bl	8002c6c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd fa5e 	bl	8002c6c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e2a9      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057be:	4ba5      	ldr	r3, [pc, #660]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x2d0>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d060      	beq.n	800589c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d005      	beq.n	80057ec <HAL_RCC_OscConfig+0x310>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d119      	bne.n	800581a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d116      	bne.n	800581a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	4b99      	ldr	r3, [pc, #612]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_OscConfig+0x328>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e286      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005804:	4b93      	ldr	r3, [pc, #588]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	4990      	ldr	r1, [pc, #576]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005818:	e040      	b.n	800589c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d023      	beq.n	800586a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005822:	4b8c      	ldr	r3, [pc, #560]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a8b      	ldr	r2, [pc, #556]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fd fa1d 	bl	8002c6c <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005836:	f7fd fa19 	bl	8002c6c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e264      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005848:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b7f      	ldr	r3, [pc, #508]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	497c      	ldr	r1, [pc, #496]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005864:	4313      	orrs	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
 8005868:	e018      	b.n	800589c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b7a      	ldr	r3, [pc, #488]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a79      	ldr	r2, [pc, #484]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fd f9f9 	bl	8002c6c <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fd f9f5 	bl	8002c6c <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e240      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005890:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f0      	bne.n	800587e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03c      	beq.n	8005922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01c      	beq.n	80058ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b0:	4b68      	ldr	r3, [pc, #416]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b6:	4a67      	ldr	r2, [pc, #412]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fd f9d4 	bl	8002c6c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c8:	f7fd f9d0 	bl	8002c6c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e21b      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058da:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <HAL_RCC_OscConfig+0x3ec>
 80058e8:	e01b      	b.n	8005922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ea:	4b5a      	ldr	r3, [pc, #360]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f0:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fa:	f7fd f9b7 	bl	8002c6c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005902:	f7fd f9b3 	bl	8002c6c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1fe      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005914:	4b4f      	ldr	r3, [pc, #316]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ef      	bne.n	8005902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a6 	beq.w	8005a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005934:	4b47      	ldr	r3, [pc, #284]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10d      	bne.n	800595c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005940:	4b44      	ldr	r3, [pc, #272]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	4a43      	ldr	r2, [pc, #268]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	6593      	str	r3, [r2, #88]	; 0x58
 800594c:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005958:	2301      	movs	r3, #1
 800595a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595c:	4b3e      	ldr	r3, [pc, #248]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d118      	bne.n	800599a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005974:	f7fd f97a 	bl	8002c6c <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fd f976 	bl	8002c6c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1c1      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598e:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <HAL_RCC_OscConfig+0x57c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d108      	bne.n	80059b4 <HAL_RCC_OscConfig+0x4d8>
 80059a2:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b2:	e024      	b.n	80059fe <HAL_RCC_OscConfig+0x522>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d110      	bne.n	80059de <HAL_RCC_OscConfig+0x502>
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	4a24      	ldr	r2, [pc, #144]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059c4:	f043 0304 	orr.w	r3, r3, #4
 80059c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059dc:	e00f      	b.n	80059fe <HAL_RCC_OscConfig+0x522>
 80059de:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fd f931 	bl	8002c6c <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0e:	f7fd f92d 	bl	8002c6c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e176      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_OscConfig+0x578>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ed      	beq.n	8005a0e <HAL_RCC_OscConfig+0x532>
 8005a32:	e01a      	b.n	8005a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fd f91a 	bl	8002c6c <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a3a:	e00f      	b.n	8005a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3c:	f7fd f916 	bl	8002c6c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d906      	bls.n	8005a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e15f      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a5c:	4baa      	ldr	r3, [pc, #680]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e8      	bne.n	8005a3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6a:	7ffb      	ldrb	r3, [r7, #31]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a70:	4ba5      	ldr	r3, [pc, #660]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	4aa4      	ldr	r2, [pc, #656]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a96:	4a9c      	ldr	r2, [pc, #624]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fd f8e4 	bl	8002c6c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aa8:	f7fd f8e0 	bl	8002c6c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e12b      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aba:	4b93      	ldr	r3, [pc, #588]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x5cc>
 8005ac8:	e01b      	b.n	8005b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aca:	4b8f      	ldr	r3, [pc, #572]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad0:	4a8d      	ldr	r2, [pc, #564]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ada:	f7fd f8c7 	bl	8002c6c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae2:	f7fd f8c3 	bl	8002c6c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e10e      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af4:	4b84      	ldr	r3, [pc, #528]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ef      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8102 	beq.w	8005d10 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	f040 80c5 	bne.w	8005ca0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b16:	4b7c      	ldr	r3, [pc, #496]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 0203 	and.w	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d12c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	3b01      	subs	r3, #1
 8005b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d123      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d11b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d113      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d109      	bne.n	8005b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d067      	beq.n	8005c54 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d062      	beq.n	8005c50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b8a:	4b5f      	ldr	r3, [pc, #380]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0bb      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5a      	ldr	r2, [pc, #360]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ba6:	f7fd f861 	bl	8002c6c <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bae:	f7fd f85d 	bl	8002c6c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0a8      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc0:	4b51      	ldr	r3, [pc, #324]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bcc:	4b4e      	ldr	r3, [pc, #312]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <HAL_RCC_OscConfig+0x830>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bdc:	3a01      	subs	r2, #1
 8005bde:	0112      	lsls	r2, r2, #4
 8005be0:	4311      	orrs	r1, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be6:	0212      	lsls	r2, r2, #8
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bee:	0852      	lsrs	r2, r2, #1
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	0552      	lsls	r2, r2, #21
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bfa:	0852      	lsrs	r2, r2, #1
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0652      	lsls	r2, r2, #25
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c06:	06d2      	lsls	r2, r2, #27
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	493f      	ldr	r1, [pc, #252]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c10:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c1c:	4b3a      	ldr	r3, [pc, #232]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a39      	ldr	r2, [pc, #228]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c28:	f7fd f820 	bl	8002c6c <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd f81c 	bl	8002c6c <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e067      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c42:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c4e:	e05f      	b.n	8005d10 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e05e      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c54:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d157      	bne.n	8005d10 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c60:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a28      	ldr	r2, [pc, #160]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c6c:	4b26      	ldr	r3, [pc, #152]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c78:	f7fc fff8 	bl	8002c6c <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fc fff4 	bl	8002c6c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e03f      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f0      	beq.n	8005c80 <HAL_RCC_OscConfig+0x7a4>
 8005c9e:	e037      	b.n	8005d10 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d02d      	beq.n	8005d02 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4a11      	ldr	r2, [pc, #68]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cc4:	f023 0303 	bic.w	r3, r3, #3
 8005cc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005cca:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fc ffc7 	bl	8002c6c <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce2:	f7fc ffc3 	bl	8002c6c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e00e      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <HAL_RCC_OscConfig+0x82c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x806>
 8005d00:	e006      	b.n	8005d10 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e005      	b.n	8005d12 <HAL_RCC_OscConfig+0x836>
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop

08005d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0c8      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d30:	4b66      	ldr	r3, [pc, #408]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d910      	bls.n	8005d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b63      	ldr	r3, [pc, #396]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 0207 	bic.w	r2, r3, #7
 8005d46:	4961      	ldr	r1, [pc, #388]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0b0      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d04c      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d74:	4b56      	ldr	r3, [pc, #344]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d121      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e09e      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d8c:	4b50      	ldr	r3, [pc, #320]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e092      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005da4:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e086      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db4:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e07e      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 0203 	bic.w	r2, r3, #3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	493f      	ldr	r1, [pc, #252]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd6:	f7fc ff49 	bl	8002c6c <HAL_GetTick>
 8005dda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dde:	f7fc ff45 	bl	8002c6c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e066      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df4:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 020c 	and.w	r2, r3, #12
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d1eb      	bne.n	8005dde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e12:	4b2f      	ldr	r3, [pc, #188]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	492c      	ldr	r1, [pc, #176]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e24:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d210      	bcs.n	8005e54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 0207 	bic.w	r2, r3, #7
 8005e3a:	4924      	ldr	r1, [pc, #144]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCC_ClockConfig+0x1b0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e036      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4918      	ldr	r1, [pc, #96]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4910      	ldr	r1, [pc, #64]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e92:	f000 f825 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005e96:	4602      	mov	r2, r0
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	490c      	ldr	r1, [pc, #48]	; (8005ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea4:	5ccb      	ldrb	r3, [r1, r3]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fc fe88 	bl	8002bcc <HAL_InitTick>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40022000 	.word	0x40022000
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800da90 	.word	0x0800da90
 8005ed8:	20000024 	.word	0x20000024
 8005edc:	20000028 	.word	0x20000028

08005ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x34>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d121      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d11e      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f14:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f20:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e005      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f30:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d102      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e004      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d134      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d003      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0xac>
 8005f84:	e005      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f86:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f88:	617b      	str	r3, [r7, #20]
      break;
 8005f8a:	e005      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f8e:	617b      	str	r3, [r7, #20]
      break;
 8005f90:	e002      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	617b      	str	r3, [r7, #20]
      break;
 8005f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	fb02 f203 	mul.w	r2, r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	0e5b      	lsrs	r3, r3, #25
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3724      	adds	r7, #36	; 0x24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	0800daa8 	.word	0x0800daa8
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	007a1200 	.word	0x007a1200

08005ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <HAL_RCC_GetHCLKFreq+0x14>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20000024 	.word	0x20000024

08006010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006014:	f7ff fff0 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006018:	4602      	mov	r2, r0
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4904      	ldr	r1, [pc, #16]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006026:	5ccb      	ldrb	r3, [r1, r3]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	0800daa0 	.word	0x0800daa0

0800603c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006040:	f7ff ffda 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0adb      	lsrs	r3, r3, #11
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4904      	ldr	r1, [pc, #16]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40021000 	.word	0x40021000
 8006064:	0800daa0 	.word	0x0800daa0

08006068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006074:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006080:	f7ff f9c8 	bl	8005414 <HAL_PWREx_GetVoltageRange>
 8006084:	6178      	str	r0, [r7, #20]
 8006086:	e014      	b.n	80060b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	4a24      	ldr	r2, [pc, #144]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
 8006094:	4b22      	ldr	r3, [pc, #136]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060a0:	f7ff f9b8 	bl	8005414 <HAL_PWREx_GetVoltageRange>
 80060a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d10b      	bne.n	80060d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d919      	bls.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2ba0      	cmp	r3, #160	; 0xa0
 80060c4:	d902      	bls.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060c6:	2302      	movs	r3, #2
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e013      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060cc:	2301      	movs	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	e010      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d902      	bls.n	80060de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060d8:	2303      	movs	r3, #3
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	e00a      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d102      	bne.n	80060ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060e4:	2302      	movs	r3, #2
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e004      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b70      	cmp	r3, #112	; 0x70
 80060ee:	d101      	bne.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f0:	2301      	movs	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f023 0207 	bic.w	r2, r3, #7
 80060fc:	4909      	ldr	r1, [pc, #36]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d001      	beq.n	8006116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40021000 	.word	0x40021000
 8006124:	40022000 	.word	0x40022000

08006128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006130:	2300      	movs	r3, #0
 8006132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006134:	2300      	movs	r3, #0
 8006136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006140:	2b00      	cmp	r3, #0
 8006142:	d031      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800614c:	d01a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800614e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006152:	d814      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800615c:	d10f      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800615e:	4bac      	ldr	r3, [pc, #688]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	4aab      	ldr	r2, [pc, #684]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006168:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800616a:	e00c      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f9dc 	bl	8006530 <RCCEx_PLLSAI1_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	74fb      	strb	r3, [r7, #19]
      break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7cfb      	ldrb	r3, [r7, #19]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800618c:	4ba0      	ldr	r3, [pc, #640]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	499d      	ldr	r1, [pc, #628]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061a2:	e001      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8099 	beq.w	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061ba:	4b95      	ldr	r3, [pc, #596]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d0:	4b8f      	ldr	r3, [pc, #572]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	4a8e      	ldr	r2, [pc, #568]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061da:	6593      	str	r3, [r2, #88]	; 0x58
 80061dc:	4b8c      	ldr	r3, [pc, #560]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ec:	4b89      	ldr	r3, [pc, #548]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a88      	ldr	r2, [pc, #544]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f8:	f7fc fd38 	bl	8002c6c <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061fe:	e009      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006200:	f7fc fd34 	bl	8002c6c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d902      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	74fb      	strb	r3, [r7, #19]
        break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006214:	4b7f      	ldr	r3, [pc, #508]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ef      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d155      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006226:	4b7a      	ldr	r3, [pc, #488]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006230:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d019      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006242:	4b73      	ldr	r3, [pc, #460]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800624e:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	4a6e      	ldr	r2, [pc, #440]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800625e:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	4a6a      	ldr	r2, [pc, #424]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800626e:	4a68      	ldr	r2, [pc, #416]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006280:	f7fc fcf4 	bl	8002c6c <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006286:	e00b      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f7fc fcf0 	bl	8002c6c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d902      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	74fb      	strb	r3, [r7, #19]
            break;
 800629e:	e006      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a0:	4b5b      	ldr	r3, [pc, #364]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ec      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b4:	4b56      	ldr	r3, [pc, #344]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c2:	4953      	ldr	r1, [pc, #332]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	74bb      	strb	r3, [r7, #18]
 80062d0:	e001      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	7cfb      	ldrb	r3, [r7, #19]
 80062d4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062d6:	7c7b      	ldrb	r3, [r7, #17]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062dc:	4b4c      	ldr	r3, [pc, #304]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	4a4b      	ldr	r2, [pc, #300]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062f4:	4b46      	ldr	r3, [pc, #280]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	f023 0203 	bic.w	r2, r3, #3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4943      	ldr	r1, [pc, #268]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	f023 020c 	bic.w	r2, r3, #12
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	493a      	ldr	r1, [pc, #232]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006338:	4b35      	ldr	r3, [pc, #212]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	4932      	ldr	r1, [pc, #200]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800635a:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	4929      	ldr	r1, [pc, #164]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	4921      	ldr	r1, [pc, #132]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4918      	ldr	r1, [pc, #96]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	4910      	ldr	r1, [pc, #64]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02c      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	4907      	ldr	r1, [pc, #28]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006400:	d10a      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4a02      	ldr	r2, [pc, #8]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800640c:	60d3      	str	r3, [r2, #12]
 800640e:	e015      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006410:	40021000 	.word	0x40021000
 8006414:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006420:	d10c      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f881 	bl	8006530 <RCCEx_PLLSAI1_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d028      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006448:	4b30      	ldr	r3, [pc, #192]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	492d      	ldr	r1, [pc, #180]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006466:	d106      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006468:	4b28      	ldr	r3, [pc, #160]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4a27      	ldr	r2, [pc, #156]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800646e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006472:	60d3      	str	r3, [r2, #12]
 8006474:	e011      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800647e:	d10c      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f852 	bl	8006530 <RCCEx_PLLSAI1_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01c      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064a6:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	4915      	ldr	r1, [pc, #84]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	2102      	movs	r1, #2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f82f 	bl	8006530 <RCCEx_PLLSAI1_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064ec:	4b07      	ldr	r3, [pc, #28]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fa:	4904      	ldr	r1, [pc, #16]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006502:	7cbb      	ldrb	r3, [r7, #18]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40021000 	.word	0x40021000

08006510 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800651a:	f043 0304 	orr.w	r3, r3, #4
 800651e:	6013      	str	r3, [r2, #0]
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000

08006530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800653e:	4b74      	ldr	r3, [pc, #464]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d018      	beq.n	800657c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800654a:	4b71      	ldr	r3, [pc, #452]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0203 	and.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d10d      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
       ||
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006562:	4b6b      	ldr	r3, [pc, #428]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
       ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d047      	beq.n	8006606 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	73fb      	strb	r3, [r7, #15]
 800657a:	e044      	b.n	8006606 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d018      	beq.n	80065b6 <RCCEx_PLLSAI1_Config+0x86>
 8006584:	2b03      	cmp	r3, #3
 8006586:	d825      	bhi.n	80065d4 <RCCEx_PLLSAI1_Config+0xa4>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d002      	beq.n	8006592 <RCCEx_PLLSAI1_Config+0x62>
 800658c:	2b02      	cmp	r3, #2
 800658e:	d009      	beq.n	80065a4 <RCCEx_PLLSAI1_Config+0x74>
 8006590:	e020      	b.n	80065d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006592:	4b5f      	ldr	r3, [pc, #380]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11d      	bne.n	80065da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a2:	e01a      	b.n	80065da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065a4:	4b5a      	ldr	r3, [pc, #360]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d116      	bne.n	80065de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b4:	e013      	b.n	80065de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065b6:	4b56      	ldr	r3, [pc, #344]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065c2:	4b53      	ldr	r3, [pc, #332]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065d2:	e006      	b.n	80065e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e004      	b.n	80065e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ea:	4b49      	ldr	r3, [pc, #292]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	430b      	orrs	r3, r1
 8006600:	4943      	ldr	r1, [pc, #268]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d17c      	bne.n	8006706 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800660c:	4b40      	ldr	r3, [pc, #256]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3f      	ldr	r2, [pc, #252]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006618:	f7fc fb28 	bl	8002c6c <HAL_GetTick>
 800661c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800661e:	e009      	b.n	8006634 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006620:	f7fc fb24 	bl	8002c6c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d902      	bls.n	8006634 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	73fb      	strb	r3, [r7, #15]
        break;
 8006632:	e005      	b.n	8006640 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ef      	bne.n	8006620 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d15f      	bne.n	8006706 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d110      	bne.n	800666e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800664c:	4b30      	ldr	r3, [pc, #192]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6892      	ldr	r2, [r2, #8]
 800665c:	0211      	lsls	r1, r2, #8
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68d2      	ldr	r2, [r2, #12]
 8006662:	06d2      	lsls	r2, r2, #27
 8006664:	430a      	orrs	r2, r1
 8006666:	492a      	ldr	r1, [pc, #168]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	4313      	orrs	r3, r2
 800666a:	610b      	str	r3, [r1, #16]
 800666c:	e027      	b.n	80066be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d112      	bne.n	800669a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006674:	4b26      	ldr	r3, [pc, #152]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800667c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6892      	ldr	r2, [r2, #8]
 8006684:	0211      	lsls	r1, r2, #8
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6912      	ldr	r2, [r2, #16]
 800668a:	0852      	lsrs	r2, r2, #1
 800668c:	3a01      	subs	r2, #1
 800668e:	0552      	lsls	r2, r2, #21
 8006690:	430a      	orrs	r2, r1
 8006692:	491f      	ldr	r1, [pc, #124]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	610b      	str	r3, [r1, #16]
 8006698:	e011      	b.n	80066be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6892      	ldr	r2, [r2, #8]
 80066aa:	0211      	lsls	r1, r2, #8
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6952      	ldr	r2, [r2, #20]
 80066b0:	0852      	lsrs	r2, r2, #1
 80066b2:	3a01      	subs	r2, #1
 80066b4:	0652      	lsls	r2, r2, #25
 80066b6:	430a      	orrs	r2, r1
 80066b8:	4915      	ldr	r1, [pc, #84]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7fc facf 	bl	8002c6c <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066d0:	e009      	b.n	80066e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d2:	f7fc facb 	bl	8002c6c <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d902      	bls.n	80066e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	73fb      	strb	r3, [r7, #15]
          break;
 80066e4:	e005      	b.n	80066f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ef      	beq.n	80066d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	4903      	ldr	r1, [pc, #12]	; (8006710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006702:	4313      	orrs	r3, r2
 8006704:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40021000 	.word	0x40021000

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e049      	b.n	80067ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc f916 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 f9dc 	bl	8006b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d001      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e03b      	b.n	8006854 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <HAL_TIM_Base_Start_IT+0x9c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0x4e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006806:	d004      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0x4e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <HAL_TIM_Base_Start_IT+0xa0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d115      	bne.n	800683e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_TIM_Base_Start_IT+0xa4>)
 800681a:	4013      	ands	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d015      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682a:	d011      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	e008      	b.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e000      	b.n	8006852 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40014000 	.word	0x40014000
 8006868:	00010007 	.word	0x00010007

0800686c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b02      	cmp	r3, #2
 8006880:	d122      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d11b      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0202 	mvn.w	r2, #2
 8006898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f90f 	bl	8006ad2 <HAL_TIM_IC_CaptureCallback>
 80068b4:	e005      	b.n	80068c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f901 	bl	8006abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f912 	bl	8006ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d122      	bne.n	800691c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d11b      	bne.n	800691c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0204 	mvn.w	r2, #4
 80068ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8e5 	bl	8006ad2 <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f8d7 	bl	8006abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f8e8 	bl	8006ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b08      	cmp	r3, #8
 8006928:	d122      	bne.n	8006970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d11b      	bne.n	8006970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0208 	mvn.w	r2, #8
 8006940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2204      	movs	r2, #4
 8006946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8bb 	bl	8006ad2 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8ad 	bl	8006abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8be 	bl	8006ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b10      	cmp	r3, #16
 800697c:	d122      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d11b      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0210 	mvn.w	r2, #16
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2208      	movs	r2, #8
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f891 	bl	8006ad2 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f883 	bl	8006abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f894 	bl	8006ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10e      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d107      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0201 	mvn.w	r2, #1
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f85d 	bl	8006aaa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f94e 	bl	8006cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2a:	d10e      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d107      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f941 	bl	8006ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d10e      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f842 	bl	8006afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d10e      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f06f 0220 	mvn.w	r2, #32
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f901 	bl	8006ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a2a      	ldr	r2, [pc, #168]	; (8006bcc <TIM_Base_SetConfig+0xbc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0x20>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d108      	bne.n	8006b42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <TIM_Base_SetConfig+0xbc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_Base_SetConfig+0x52>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d007      	beq.n	8006b62 <TIM_Base_SetConfig+0x52>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1e      	ldr	r2, [pc, #120]	; (8006bd0 <TIM_Base_SetConfig+0xc0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_Base_SetConfig+0x52>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <TIM_Base_SetConfig+0xc4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <TIM_Base_SetConfig+0xbc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0xa0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0b      	ldr	r2, [pc, #44]	; (8006bd0 <TIM_Base_SetConfig+0xc0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0xa0>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <TIM_Base_SetConfig+0xc4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d103      	bne.n	8006bb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40014400 	.word	0x40014400

08006bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e04f      	b.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d004      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10c      	bne.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40014000 	.word	0x40014000

08006ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e040      	b.n	8006d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb fe58 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2224      	movs	r2, #36	; 0x24
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 faaa 	bl	8007278 <UART_SetConfig>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e022      	b.n	8006d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fcaa 	bl	8007690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fd31 	bl	80077d4 <UART_CheckIdleState>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d145      	bne.n	8006e1e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_UART_Transmit_IT+0x22>
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e03e      	b.n	8006e20 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_UART_Transmit_IT+0x34>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e037      	b.n	8006e20 <HAL_UART_Transmit_IT+0xa4>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2221      	movs	r2, #33	; 0x21
 8006de0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d107      	bne.n	8006dfc <HAL_UART_Transmit_IT+0x80>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <HAL_UART_Transmit_IT+0xb0>)
 8006df8:	669a      	str	r2, [r3, #104]	; 0x68
 8006dfa:	e002      	b.n	8006e02 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <HAL_UART_Transmit_IT+0xb4>)
 8006e00:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	08007a5d 	.word	0x08007a5d
 8006e30:	080079e9 	.word	0x080079e9

08006e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d113      	bne.n	8006e8c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 81ce 	beq.w	800721e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
      }
      return;
 8006e8a:	e1c8      	b.n	800721e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80e3 	beq.w	800705a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4ba6      	ldr	r3, [pc, #664]	; (800713c <HAL_UART_IRQHandler+0x308>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80d8 	beq.w	800705a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xa2>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_UART_IRQHandler+0xce>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef8:	f043 0204 	orr.w	r2, r3, #4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d010      	beq.n	8006f2e <HAL_UART_IRQHandler+0xfa>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f24:	f043 0202 	orr.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d015      	beq.n	8006f64 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2208      	movs	r2, #8
 8006f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5a:	f043 0208 	orr.w	r2, r3, #8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d011      	beq.n	8006f92 <HAL_UART_IRQHandler+0x15e>
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00c      	beq.n	8006f92 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8142 	beq.w	8007222 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd4:	2b40      	cmp	r3, #64	; 0x40
 8006fd6:	d004      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d031      	beq.n	8007046 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcbb 	bl	800795e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d123      	bne.n	800703e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007004:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	2b00      	cmp	r3, #0
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	4a4b      	ldr	r2, [pc, #300]	; (8007140 <HAL_UART_IRQHandler+0x30c>)
 8007014:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd f96f 	bl	80042fe <HAL_DMA_Abort_IT>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d017      	beq.n	8007056 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00f      	b.n	8007056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f908 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e00b      	b.n	8007056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f904 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e007      	b.n	8007056 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f900 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007054:	e0e5      	b.n	8007222 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007056:	bf00      	nop
    return;
 8007058:	e0e3      	b.n	8007222 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705e:	2b01      	cmp	r3, #1
 8007060:	f040 80a9 	bne.w	80071b6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80a3 	beq.w	80071b6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 809d 	beq.w	80071b6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2210      	movs	r2, #16
 8007082:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b40      	cmp	r3, #64	; 0x40
 8007090:	d158      	bne.n	8007144 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800709c:	893b      	ldrh	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80c1 	beq.w	8007226 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070aa:	893a      	ldrh	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	f080 80ba 	bcs.w	8007226 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	893a      	ldrh	r2, [r7, #8]
 80070b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12a      	bne.n	8007120 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0210 	bic.w	r2, r2, #16
 8007114:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd f8b1 	bl	8004282 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800712c:	b29b      	uxth	r3, r3
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	b29b      	uxth	r3, r3
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f893 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800713a:	e074      	b.n	8007226 <HAL_UART_IRQHandler+0x3f2>
 800713c:	04000120 	.word	0x04000120
 8007140:	080079bd 	.word	0x080079bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007150:	b29b      	uxth	r3, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d063      	beq.n	800722a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d060      	beq.n	800722a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007176:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0210 	bic.w	r2, r2, #16
 80071a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071aa:	897b      	ldrh	r3, [r7, #10]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f856 	bl	8007260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071b4:	e039      	b.n	800722a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <HAL_UART_IRQHandler+0x3a8>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d008      	beq.n	80071dc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc98 	bl	8007b0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071da:	e029      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
    }
    return;
 8007200:	e015      	b.n	800722e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d011      	beq.n	8007230 <HAL_UART_IRQHandler+0x3fc>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00c      	beq.n	8007230 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc5e 	bl	8007ad8 <UART_EndTransmit_IT>
    return;
 800721c:	e008      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
      return;
 800721e:	bf00      	nop
 8007220:	e006      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007222:	bf00      	nop
 8007224:	e004      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007226:	bf00      	nop
 8007228:	e002      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
      return;
 800722a:	bf00      	nop
 800722c:	e000      	b.n	8007230 <HAL_UART_IRQHandler+0x3fc>
    return;
 800722e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop

08007238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007278:	b5b0      	push	{r4, r5, r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	4313      	orrs	r3, r2
 800729a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4baf      	ldr	r3, [pc, #700]	; (8007560 <UART_SetConfig+0x2e8>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	69f9      	ldr	r1, [r7, #28]
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4aa4      	ldr	r2, [pc, #656]	; (8007564 <UART_SetConfig+0x2ec>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d004      	beq.n	80072e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a9b      	ldr	r2, [pc, #620]	; (8007568 <UART_SetConfig+0x2f0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d121      	bne.n	8007342 <UART_SetConfig+0xca>
 80072fe:	4b9b      	ldr	r3, [pc, #620]	; (800756c <UART_SetConfig+0x2f4>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d817      	bhi.n	800733c <UART_SetConfig+0xc4>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x9c>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007325 	.word	0x08007325
 8007318:	08007331 	.word	0x08007331
 800731c:	0800732b 	.word	0x0800732b
 8007320:	08007337 	.word	0x08007337
 8007324:	2301      	movs	r3, #1
 8007326:	76fb      	strb	r3, [r7, #27]
 8007328:	e070      	b.n	800740c <UART_SetConfig+0x194>
 800732a:	2302      	movs	r3, #2
 800732c:	76fb      	strb	r3, [r7, #27]
 800732e:	e06d      	b.n	800740c <UART_SetConfig+0x194>
 8007330:	2304      	movs	r3, #4
 8007332:	76fb      	strb	r3, [r7, #27]
 8007334:	e06a      	b.n	800740c <UART_SetConfig+0x194>
 8007336:	2308      	movs	r3, #8
 8007338:	76fb      	strb	r3, [r7, #27]
 800733a:	e067      	b.n	800740c <UART_SetConfig+0x194>
 800733c:	2310      	movs	r3, #16
 800733e:	76fb      	strb	r3, [r7, #27]
 8007340:	e064      	b.n	800740c <UART_SetConfig+0x194>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a8a      	ldr	r2, [pc, #552]	; (8007570 <UART_SetConfig+0x2f8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d132      	bne.n	80073b2 <UART_SetConfig+0x13a>
 800734c:	4b87      	ldr	r3, [pc, #540]	; (800756c <UART_SetConfig+0x2f4>)
 800734e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d828      	bhi.n	80073ac <UART_SetConfig+0x134>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0xe8>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007395 	.word	0x08007395
 8007364:	080073ad 	.word	0x080073ad
 8007368:	080073ad 	.word	0x080073ad
 800736c:	080073ad 	.word	0x080073ad
 8007370:	080073a1 	.word	0x080073a1
 8007374:	080073ad 	.word	0x080073ad
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073ad 	.word	0x080073ad
 8007380:	0800739b 	.word	0x0800739b
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073ad 	.word	0x080073ad
 8007390:	080073a7 	.word	0x080073a7
 8007394:	2300      	movs	r3, #0
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e038      	b.n	800740c <UART_SetConfig+0x194>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e035      	b.n	800740c <UART_SetConfig+0x194>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e032      	b.n	800740c <UART_SetConfig+0x194>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e02f      	b.n	800740c <UART_SetConfig+0x194>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	e02c      	b.n	800740c <UART_SetConfig+0x194>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a6b      	ldr	r2, [pc, #428]	; (8007564 <UART_SetConfig+0x2ec>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x190>
 80073bc:	4b6b      	ldr	r3, [pc, #428]	; (800756c <UART_SetConfig+0x2f4>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ca:	d017      	beq.n	80073fc <UART_SetConfig+0x184>
 80073cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d0:	d817      	bhi.n	8007402 <UART_SetConfig+0x18a>
 80073d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d6:	d00b      	beq.n	80073f0 <UART_SetConfig+0x178>
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d811      	bhi.n	8007402 <UART_SetConfig+0x18a>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <UART_SetConfig+0x172>
 80073e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e6:	d006      	beq.n	80073f6 <UART_SetConfig+0x17e>
 80073e8:	e00b      	b.n	8007402 <UART_SetConfig+0x18a>
 80073ea:	2300      	movs	r3, #0
 80073ec:	76fb      	strb	r3, [r7, #27]
 80073ee:	e00d      	b.n	800740c <UART_SetConfig+0x194>
 80073f0:	2302      	movs	r3, #2
 80073f2:	76fb      	strb	r3, [r7, #27]
 80073f4:	e00a      	b.n	800740c <UART_SetConfig+0x194>
 80073f6:	2304      	movs	r3, #4
 80073f8:	76fb      	strb	r3, [r7, #27]
 80073fa:	e007      	b.n	800740c <UART_SetConfig+0x194>
 80073fc:	2308      	movs	r3, #8
 80073fe:	76fb      	strb	r3, [r7, #27]
 8007400:	e004      	b.n	800740c <UART_SetConfig+0x194>
 8007402:	2310      	movs	r3, #16
 8007404:	76fb      	strb	r3, [r7, #27]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x194>
 8007408:	2310      	movs	r3, #16
 800740a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a54      	ldr	r2, [pc, #336]	; (8007564 <UART_SetConfig+0x2ec>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d173      	bne.n	80074fe <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007416:	7efb      	ldrb	r3, [r7, #27]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d824      	bhi.n	8007466 <UART_SetConfig+0x1ee>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x1ac>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007449 	.word	0x08007449
 8007428:	08007467 	.word	0x08007467
 800742c:	08007451 	.word	0x08007451
 8007430:	08007467 	.word	0x08007467
 8007434:	08007457 	.word	0x08007457
 8007438:	08007467 	.word	0x08007467
 800743c:	08007467 	.word	0x08007467
 8007440:	08007467 	.word	0x08007467
 8007444:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe fde2 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 800744c:	6178      	str	r0, [r7, #20]
        break;
 800744e:	e00f      	b.n	8007470 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b48      	ldr	r3, [pc, #288]	; (8007574 <UART_SetConfig+0x2fc>)
 8007452:	617b      	str	r3, [r7, #20]
        break;
 8007454:	e00c      	b.n	8007470 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fe fd43 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 800745a:	6178      	str	r0, [r7, #20]
        break;
 800745c:	e008      	b.n	8007470 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	617b      	str	r3, [r7, #20]
        break;
 8007464:	e004      	b.n	8007470 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	76bb      	strb	r3, [r7, #26]
        break;
 800746e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80fe 	beq.w	8007674 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	4613      	mov	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	429a      	cmp	r2, r3
 8007486:	d305      	bcc.n	8007494 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	429a      	cmp	r2, r3
 8007492:	d902      	bls.n	800749a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	76bb      	strb	r3, [r7, #26]
 8007498:	e0ec      	b.n	8007674 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	4618      	mov	r0, r3
 800749e:	f04f 0100 	mov.w	r1, #0
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	020b      	lsls	r3, r1, #8
 80074ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074b0:	0202      	lsls	r2, r0, #8
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	6849      	ldr	r1, [r1, #4]
 80074b6:	0849      	lsrs	r1, r1, #1
 80074b8:	4608      	mov	r0, r1
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	1814      	adds	r4, r2, r0
 80074c0:	eb43 0501 	adc.w	r5, r3, r1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	461a      	mov	r2, r3
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7f9 fb59 	bl	8000b88 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4613      	mov	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d308      	bcc.n	80074f8 <UART_SetConfig+0x280>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ec:	d204      	bcs.n	80074f8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e0bd      	b.n	8007674 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	76bb      	strb	r3, [r7, #26]
 80074fc:	e0ba      	b.n	8007674 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007506:	d168      	bne.n	80075da <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007508:	7efb      	ldrb	r3, [r7, #27]
 800750a:	2b08      	cmp	r3, #8
 800750c:	d834      	bhi.n	8007578 <UART_SetConfig+0x300>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x29c>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007539 	.word	0x08007539
 8007518:	08007541 	.word	0x08007541
 800751c:	08007549 	.word	0x08007549
 8007520:	08007579 	.word	0x08007579
 8007524:	0800754f 	.word	0x0800754f
 8007528:	08007579 	.word	0x08007579
 800752c:	08007579 	.word	0x08007579
 8007530:	08007579 	.word	0x08007579
 8007534:	08007557 	.word	0x08007557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe fd6a 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 800753c:	6178      	str	r0, [r7, #20]
        break;
 800753e:	e020      	b.n	8007582 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007540:	f7fe fd7c 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8007544:	6178      	str	r0, [r7, #20]
        break;
 8007546:	e01c      	b.n	8007582 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <UART_SetConfig+0x2fc>)
 800754a:	617b      	str	r3, [r7, #20]
        break;
 800754c:	e019      	b.n	8007582 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754e:	f7fe fcc7 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8007552:	6178      	str	r0, [r7, #20]
        break;
 8007554:	e015      	b.n	8007582 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755a:	617b      	str	r3, [r7, #20]
        break;
 800755c:	e011      	b.n	8007582 <UART_SetConfig+0x30a>
 800755e:	bf00      	nop
 8007560:	efff69f3 	.word	0xefff69f3
 8007564:	40008000 	.word	0x40008000
 8007568:	40013800 	.word	0x40013800
 800756c:	40021000 	.word	0x40021000
 8007570:	40004400 	.word	0x40004400
 8007574:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	76bb      	strb	r3, [r7, #26]
        break;
 8007580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d075      	beq.n	8007674 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	005a      	lsls	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	441a      	add	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	b29b      	uxth	r3, r3
 800759e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d916      	bls.n	80075d4 <UART_SetConfig+0x35c>
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d212      	bcs.n	80075d4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f023 030f 	bic.w	r3, r3, #15
 80075b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	89fb      	ldrh	r3, [r7, #14]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	89fa      	ldrh	r2, [r7, #14]
 80075d0:	60da      	str	r2, [r3, #12]
 80075d2:	e04f      	b.n	8007674 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	76bb      	strb	r3, [r7, #26]
 80075d8:	e04c      	b.n	8007674 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075da:	7efb      	ldrb	r3, [r7, #27]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d828      	bhi.n	8007632 <UART_SetConfig+0x3ba>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0x370>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	08007633 	.word	0x08007633
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007633 	.word	0x08007633
 8007600:	08007633 	.word	0x08007633
 8007604:	08007633 	.word	0x08007633
 8007608:	0800762b 	.word	0x0800762b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fe fd00 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8007610:	6178      	str	r0, [r7, #20]
        break;
 8007612:	e013      	b.n	800763c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fe fd12 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8007618:	6178      	str	r0, [r7, #20]
        break;
 800761a:	e00f      	b.n	800763c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800761c:	4b1b      	ldr	r3, [pc, #108]	; (800768c <UART_SetConfig+0x414>)
 800761e:	617b      	str	r3, [r7, #20]
        break;
 8007620:	e00c      	b.n	800763c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007622:	f7fe fc5d 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8007626:	6178      	str	r0, [r7, #20]
        break;
 8007628:	e008      	b.n	800763c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762e:	617b      	str	r3, [r7, #20]
        break;
 8007630:	e004      	b.n	800763c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	76bb      	strb	r3, [r7, #26]
        break;
 800763a:	bf00      	nop
    }

    if (pclk != 0U)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d018      	beq.n	8007674 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085a      	lsrs	r2, r3, #1
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	441a      	add	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
 8007654:	b29b      	uxth	r3, r3
 8007656:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d908      	bls.n	8007670 <UART_SetConfig+0x3f8>
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	d204      	bcs.n	8007670 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	60da      	str	r2, [r3, #12]
 800766e:	e001      	b.n	8007674 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007680:	7ebb      	ldrb	r3, [r7, #26]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bdb0      	pop	{r4, r5, r7, pc}
 800768a:	bf00      	nop
 800768c:	00f42400 	.word	0x00f42400

08007690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01a      	beq.n	80077a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800778e:	d10a      	bne.n	80077a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	605a      	str	r2, [r3, #4]
  }
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077e4:	f7fb fa42 	bl	8002c6c <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d10e      	bne.n	8007816 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f82d 	bl	8007866 <UART_WaitOnFlagUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e023      	b.n	800785e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b04      	cmp	r3, #4
 8007822:	d10e      	bne.n	8007842 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f817 	bl	8007866 <UART_WaitOnFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e00d      	b.n	800785e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007876:	e05e      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d05a      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007880:	f7fb f9f4 	bl	8002c6c <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <UART_WaitOnFlagUntilTimeout+0x30>
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11b      	bne.n	80078ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e043      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d02c      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ea:	d124      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007904:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d091      	beq.n	8007878 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007974:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0201 	bic.w	r2, r2, #1
 8007984:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798a:	2b01      	cmp	r3, #1
 800798c:	d107      	bne.n	800799e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0210 	bic.w	r2, r2, #16
 800799c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff fc36 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079f4:	2b21      	cmp	r3, #33	; 0x21
 80079f6:	d12b      	bne.n	8007a50 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d110      	bne.n	8007a26 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a12:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a22:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a24:	e014      	b.n	8007a50 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	b292      	uxth	r2, r2
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a68:	2b21      	cmp	r3, #33	; 0x21
 8007a6a:	d12f      	bne.n	8007acc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d110      	bne.n	8007a9a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a86:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a96:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a98:	e018      	b.n	8007acc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	881a      	ldrh	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aac:	b292      	uxth	r2, r2
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab4:	1c9a      	adds	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff fb9b 	bl	8007238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <__NVIC_SetPriority>:
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db0a      	blt.n	8007b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	490c      	ldr	r1, [pc, #48]	; (8007b6c <__NVIC_SetPriority+0x4c>)
 8007b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3e:	0112      	lsls	r2, r2, #4
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	440b      	add	r3, r1
 8007b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b48:	e00a      	b.n	8007b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	4908      	ldr	r1, [pc, #32]	; (8007b70 <__NVIC_SetPriority+0x50>)
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	3b04      	subs	r3, #4
 8007b58:	0112      	lsls	r2, r2, #4
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	761a      	strb	r2, [r3, #24]
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	e000e100 	.word	0xe000e100
 8007b70:	e000ed00 	.word	0xe000ed00

08007b74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f06f 0004 	mvn.w	r0, #4
 8007b7e:	f7ff ffcf 	bl	8007b20 <__NVIC_SetPriority>
#endif
}
 8007b82:	bf00      	nop
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8e:	f3ef 8305 	mrs	r3, IPSR
 8007b92:	603b      	str	r3, [r7, #0]
  return(result);
 8007b94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b9a:	f06f 0305 	mvn.w	r3, #5
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	e00c      	b.n	8007bbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <osKernelInitialize+0x44>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007baa:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <osKernelInitialize+0x44>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e002      	b.n	8007bbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bbc:	687b      	ldr	r3, [r7, #4]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000504 	.word	0x20000504

08007bd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd6:	f3ef 8305 	mrs	r3, IPSR
 8007bda:	603b      	str	r3, [r7, #0]
  return(result);
 8007bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <osKernelStart+0x1a>
    stat = osErrorISR;
 8007be2:	f06f 0305 	mvn.w	r3, #5
 8007be6:	607b      	str	r3, [r7, #4]
 8007be8:	e010      	b.n	8007c0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <osKernelStart+0x48>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d109      	bne.n	8007c06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bf2:	f7ff ffbf 	bl	8007b74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <osKernelStart+0x48>)
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bfc:	f001 fcb6 	bl	800956c <vTaskStartScheduler>
      stat = osOK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	e002      	b.n	8007c0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c06:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c0c:	687b      	ldr	r3, [r7, #4]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000504 	.word	0x20000504

08007c1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08e      	sub	sp, #56	; 0x38
 8007c20:	af04      	add	r7, sp, #16
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c2c:	f3ef 8305 	mrs	r3, IPSR
 8007c30:	617b      	str	r3, [r7, #20]
  return(result);
 8007c32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d17e      	bne.n	8007d36 <osThreadNew+0x11a>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d07b      	beq.n	8007d36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c3e:	2380      	movs	r3, #128	; 0x80
 8007c40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c42:	2318      	movs	r3, #24
 8007c44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d045      	beq.n	8007ce2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <osThreadNew+0x48>
        name = attr->name;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <osThreadNew+0x6e>
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	2b38      	cmp	r3, #56	; 0x38
 8007c7c:	d805      	bhi.n	8007c8a <osThreadNew+0x6e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <osThreadNew+0x72>
        return (NULL);
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e054      	b.n	8007d38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <osThreadNew+0xa8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	2b5b      	cmp	r3, #91	; 0x5b
 8007cac:	d90a      	bls.n	8007cc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d006      	beq.n	8007cc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <osThreadNew+0xa8>
        mem = 1;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	e010      	b.n	8007ce6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <osThreadNew+0xca>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d108      	bne.n	8007ce6 <osThreadNew+0xca>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <osThreadNew+0xca>
          mem = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	e001      	b.n	8007ce6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d110      	bne.n	8007d0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cf4:	9202      	str	r2, [sp, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6a3a      	ldr	r2, [r7, #32]
 8007d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f001 fa5c 	bl	80091c0 <xTaskCreateStatic>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	e013      	b.n	8007d36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d110      	bne.n	8007d36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f107 0310 	add.w	r3, r7, #16
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 faa7 	bl	800927a <xTaskCreate>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d001      	beq.n	8007d36 <osThreadNew+0x11a>
            hTask = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d36:	693b      	ldr	r3, [r7, #16]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3728      	adds	r7, #40	; 0x28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d48:	f3ef 8305 	mrs	r3, IPSR
 8007d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <osDelay+0x1c>
    stat = osErrorISR;
 8007d54:	f06f 0305 	mvn.w	r3, #5
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	e007      	b.n	8007d6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fbcc 	bl	8009504 <vTaskDelay>
    }
  }

  return (stat);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d82:	f3ef 8305 	mrs	r3, IPSR
 8007d86:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d88:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d12d      	bne.n	8007dea <osEventFlagsNew+0x74>
    mem = -1;
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d92:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d015      	beq.n	8007dc6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d006      	beq.n	8007db0 <osEventFlagsNew+0x3a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	2b1f      	cmp	r3, #31
 8007da8:	d902      	bls.n	8007db0 <osEventFlagsNew+0x3a>
        mem = 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	e00c      	b.n	8007dca <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d108      	bne.n	8007dca <osEventFlagsNew+0x54>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <osEventFlagsNew+0x54>
          mem = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	e001      	b.n	8007dca <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d106      	bne.n	8007dde <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f973 	bl	80080c0 <xEventGroupCreateStatic>
 8007dda:	6178      	str	r0, [r7, #20]
 8007ddc:	e005      	b.n	8007dea <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007de4:	f000 f9a3 	bl	800812e <xEventGroupCreate>
 8007de8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007dea:	697b      	ldr	r3, [r7, #20]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e04:	f3ef 8305 	mrs	r3, IPSR
 8007e08:	613b      	str	r3, [r7, #16]
  return(result);
 8007e0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d15f      	bne.n	8007ed0 <osMessageQueueNew+0xdc>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d05c      	beq.n	8007ed0 <osMessageQueueNew+0xdc>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d059      	beq.n	8007ed0 <osMessageQueueNew+0xdc>
    mem = -1;
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d029      	beq.n	8007e7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d012      	beq.n	8007e56 <osMessageQueueNew+0x62>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b4f      	cmp	r3, #79	; 0x4f
 8007e36:	d90e      	bls.n	8007e56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	fb01 f303 	mul.w	r3, r1, r3
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d302      	bcc.n	8007e56 <osMessageQueueNew+0x62>
        mem = 1;
 8007e50:	2301      	movs	r3, #1
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	e014      	b.n	8007e80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d110      	bne.n	8007e80 <osMessageQueueNew+0x8c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10c      	bne.n	8007e80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d108      	bne.n	8007e80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <osMessageQueueNew+0x8c>
          mem = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	e001      	b.n	8007e80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d10b      	bne.n	8007e9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	9100      	str	r1, [sp, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fc55 	bl	8008744 <xQueueGenericCreateStatic>
 8007e9a:	61f8      	str	r0, [r7, #28]
 8007e9c:	e008      	b.n	8007eb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fcc3 	bl	8008834 <xQueueGenericCreate>
 8007eae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e001      	b.n	8007ec8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	69f8      	ldr	r0, [r7, #28]
 8007ecc:	f001 f91a 	bl	8009104 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef4:	f3ef 8305 	mrs	r3, IPSR
 8007ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d028      	beq.n	8007f52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <osMessageQueuePut+0x36>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <osMessageQueuePut+0x36>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007f12:	f06f 0303 	mvn.w	r3, #3
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e038      	b.n	8007f8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f1e:	f107 0210 	add.w	r2, r7, #16
 8007f22:	2300      	movs	r3, #0
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	69b8      	ldr	r0, [r7, #24]
 8007f28:	f000 fde0 	bl	8008aec <xQueueGenericSendFromISR>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d003      	beq.n	8007f3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007f32:	f06f 0302 	mvn.w	r3, #2
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e028      	b.n	8007f8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d025      	beq.n	8007f8c <osMessageQueuePut+0xb0>
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <osMessageQueuePut+0xbc>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	e01c      	b.n	8007f8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <osMessageQueuePut+0x82>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007f5e:	f06f 0303 	mvn.w	r3, #3
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e012      	b.n	8007f8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f66:	2300      	movs	r3, #0
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	69b8      	ldr	r0, [r7, #24]
 8007f6e:	f000 fcbf 	bl	80088f0 <xQueueGenericSend>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d009      	beq.n	8007f8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007f7e:	f06f 0301 	mvn.w	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e002      	b.n	8007f8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007f86:	f06f 0302 	mvn.w	r3, #2
 8007f8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d028      	beq.n	8008010 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <osMessageQueueGet+0x34>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <osMessageQueueGet+0x34>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007fd0:	f06f 0303 	mvn.w	r3, #3
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e037      	b.n	8008048 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	69b8      	ldr	r0, [r7, #24]
 8007fe6:	f000 fefd 	bl	8008de4 <xQueueReceiveFromISR>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d003      	beq.n	8007ff8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ff0:	f06f 0302 	mvn.w	r3, #2
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	e027      	b.n	8008048 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d024      	beq.n	8008048 <osMessageQueueGet+0xac>
 8007ffe:	4b15      	ldr	r3, [pc, #84]	; (8008054 <osMessageQueueGet+0xb8>)
 8008000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	e01b      	b.n	8008048 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <osMessageQueueGet+0x80>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800801c:	f06f 0303 	mvn.w	r3, #3
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e011      	b.n	8008048 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	69b8      	ldr	r0, [r7, #24]
 800802a:	f000 fdfb 	bl	8008c24 <xQueueReceive>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d009      	beq.n	8008048 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800803a:	f06f 0301 	mvn.w	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e002      	b.n	8008048 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008042:	f06f 0302 	mvn.w	r3, #2
 8008046:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a07      	ldr	r2, [pc, #28]	; (8008084 <vApplicationGetIdleTaskMemory+0x2c>)
 8008068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4a06      	ldr	r2, [pc, #24]	; (8008088 <vApplicationGetIdleTaskMemory+0x30>)
 800806e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2280      	movs	r2, #128	; 0x80
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000508 	.word	0x20000508
 8008088:	20000564 	.word	0x20000564

0800808c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a07      	ldr	r2, [pc, #28]	; (80080b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800809c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4a06      	ldr	r2, [pc, #24]	; (80080bc <vApplicationGetTimerTaskMemory+0x30>)
 80080a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080aa:	601a      	str	r2, [r3, #0]
}
 80080ac:	bf00      	nop
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000764 	.word	0x20000764
 80080bc:	200007c0 	.word	0x200007c0

080080c0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80080e4:	2320      	movs	r3, #32
 80080e6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d00a      	beq.n	8008104 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f9f7 	bl	800850c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2201      	movs	r2, #1
 8008122:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008124:	697b      	ldr	r3, [r7, #20]
	}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008134:	2020      	movs	r0, #32
 8008136:	f002 fdb7 	bl	800aca8 <pvPortMalloc>
 800813a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f9dd 	bl	800850c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008158:	687b      	ldr	r3, [r7, #4]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b090      	sub	sp, #64	; 0x40
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10a      	bne.n	800819a <xEventGroupWaitBits+0x36>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	623b      	str	r3, [r7, #32]
}
 8008196:	bf00      	nop
 8008198:	e7fe      	b.n	8008198 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <xEventGroupWaitBits+0x56>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	61fb      	str	r3, [r7, #28]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	61bb      	str	r3, [r7, #24]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081d6:	f001 feaf 	bl	8009f38 <xTaskGetSchedulerState>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <xEventGroupWaitBits+0x82>
 80081e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <xEventGroupWaitBits+0x86>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <xEventGroupWaitBits+0x88>
 80081ea:	2300      	movs	r3, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	617b      	str	r3, [r7, #20]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8008206:	f001 fa17 	bl	8009638 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008216:	f000 f943 	bl	80084a0 <prvTestWaitCondition>
 800821a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008226:	2300      	movs	r3, #0
 8008228:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d028      	beq.n	8008282 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	43db      	mvns	r3, r3
 8008238:	401a      	ands	r2, r3
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	e020      	b.n	8008282 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008242:	2b00      	cmp	r3, #0
 8008244:	d104      	bne.n	8008250 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	633b      	str	r3, [r7, #48]	; 0x30
 800824e:	e018      	b.n	8008282 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800826a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	1d18      	adds	r0, r3, #4
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	4313      	orrs	r3, r2
 8008276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008278:	4619      	mov	r1, r3
 800827a:	f001 fbd5 	bl	8009a28 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008282:	f001 f9e7 	bl	8009654 <xTaskResumeAll>
 8008286:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800828a:	2b00      	cmp	r3, #0
 800828c:	d031      	beq.n	80082f2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d107      	bne.n	80082a4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008294:	4b19      	ldr	r3, [pc, #100]	; (80082fc <xEventGroupWaitBits+0x198>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80082a4:	f001 fed4 	bl	800a050 <uxTaskResetEventItemValue>
 80082a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11a      	bne.n	80082ea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80082b4:	f002 fbd6 	bl	800aa64 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082c4:	f000 f8ec 	bl	80084a0 <prvTestWaitCondition>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	43db      	mvns	r3, r3
 80082dc:	401a      	ands	r2, r3
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80082e2:	2301      	movs	r3, #1
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80082e6:	f002 fbed 	bl	800aac4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80082f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3740      	adds	r7, #64	; 0x40
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xEventGroupClearBits+0x2a>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	60fb      	str	r3, [r7, #12]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00a      	beq.n	800834a <xEventGroupClearBits+0x4a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60bb      	str	r3, [r7, #8]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800834a:	f002 fb8b 	bl	800aa64 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	43db      	mvns	r3, r3
 800835c:	401a      	ands	r2, r3
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008362:	f002 fbaf 	bl	800aac4 <vPortExitCritical>

	return uxReturn;
 8008366:	693b      	ldr	r3, [r7, #16]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08e      	sub	sp, #56	; 0x38
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800837a:	2300      	movs	r3, #0
 800837c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xEventGroupSetBits+0x32>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	613b      	str	r3, [r7, #16]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <xEventGroupSetBits+0x52>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	60fb      	str	r3, [r7, #12]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	3304      	adds	r3, #4
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	3308      	adds	r3, #8
 80083cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80083ce:	f001 f933 	bl	8009638 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	431a      	orrs	r2, r3
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80083e4:	e03c      	b.n	8008460 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80083e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008404:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d108      	bne.n	8008422 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	4013      	ands	r3, r2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800841c:	2301      	movs	r3, #1
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008420:	e008      	b.n	8008434 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	4013      	ands	r3, r2
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	429a      	cmp	r2, r3
 800842e:	d101      	bne.n	8008434 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008430:	2301      	movs	r3, #1
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4313      	orrs	r3, r2
 800844a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008454:	4619      	mov	r1, r3
 8008456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008458:	f001 fbb2 	bl	8009bc0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	429a      	cmp	r2, r3
 8008466:	d1be      	bne.n	80083e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	43db      	mvns	r3, r3
 8008470:	401a      	ands	r2, r3
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008476:	f001 f8ed 	bl	8009654 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	681b      	ldr	r3, [r3, #0]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3738      	adds	r7, #56	; 0x38
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff6c 	bl	8008370 <xEventGroupSetBits>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d107      	bne.n	80084c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e007      	b.n	80084d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4013      	ands	r3, r2
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d101      	bne.n	80084d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	4804      	ldr	r0, [pc, #16]	; (8008508 <xEventGroupSetBitsFromISR+0x24>)
 80084f8:	f002 f964 	bl	800a7c4 <xTimerPendFunctionCallFromISR>
 80084fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80084fe:	697b      	ldr	r3, [r7, #20]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	08008487 	.word	0x08008487

0800850c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f103 0208 	add.w	r2, r3, #8
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f04f 32ff 	mov.w	r2, #4294967295
 8008524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f103 0208 	add.w	r2, r3, #8
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f103 0208 	add.w	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	601a      	str	r2, [r3, #0]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d103      	bne.n	80085ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e00c      	b.n	80085e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3308      	adds	r3, #8
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e002      	b.n	80085dc <vListInsert+0x2e>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d2f6      	bcs.n	80085d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6892      	ldr	r2, [r2, #8]
 8008636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6852      	ldr	r2, [r2, #4]
 8008640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d103      	bne.n	8008654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	1e5a      	subs	r2, r3, #1
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xQueueGenericReset+0x2a>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60bb      	str	r3, [r7, #8]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800869e:	f002 f9e1 	bl	800aa64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086ae:	fb01 f303 	mul.w	r3, r1, r3
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	3b01      	subs	r3, #1
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	441a      	add	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	22ff      	movs	r2, #255	; 0xff
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d114      	bne.n	800871e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01a      	beq.n	8008732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3310      	adds	r3, #16
 8008700:	4618      	mov	r0, r3
 8008702:	f001 f9f9 	bl	8009af8 <xTaskRemoveFromEventList>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d012      	beq.n	8008732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800870c:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <xQueueGenericReset+0xcc>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	e009      	b.n	8008732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3310      	adds	r3, #16
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fef2 	bl	800850c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3324      	adds	r3, #36	; 0x24
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff feed 	bl	800850c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008732:	f002 f9c7 	bl	800aac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008736:	2301      	movs	r3, #1
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	e000ed04 	.word	0xe000ed04

08008744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08e      	sub	sp, #56	; 0x38
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <xQueueGenericCreateStatic+0x52>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <xQueueGenericCreateStatic+0x56>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <xQueueGenericCreateStatic+0x58>
 800879a:	2300      	movs	r3, #0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <xQueueGenericCreateStatic+0x7e>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericCreateStatic+0x82>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericCreateStatic+0x84>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61fb      	str	r3, [r7, #28]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087e2:	2350      	movs	r3, #80	; 0x50
 80087e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b50      	cmp	r3, #80	; 0x50
 80087ea:	d00a      	beq.n	8008802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	61bb      	str	r3, [r7, #24]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f83f 	bl	80088a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800882c:	4618      	mov	r0, r3
 800882e:	3730      	adds	r7, #48	; 0x30
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	613b      	str	r3, [r7, #16]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3350      	adds	r3, #80	; 0x50
 800886c:	4618      	mov	r0, r3
 800886e:	f002 fa1b 	bl	800aca8 <pvPortMalloc>
 8008872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d011      	beq.n	800889e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	3350      	adds	r3, #80	; 0x50
 8008882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800888c:	79fa      	ldrb	r2, [r7, #7]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f805 	bl	80088a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800889e:	69bb      	ldr	r3, [r7, #24]
	}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d103      	bne.n	80088c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	e002      	b.n	80088ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088d6:	2101      	movs	r1, #1
 80088d8:	69b8      	ldr	r0, [r7, #24]
 80088da:	f7ff fecb 	bl	8008674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08e      	sub	sp, #56	; 0x38
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088fe:	2300      	movs	r3, #0
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xQueueGenericSend+0x32>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <xQueueGenericSend+0x40>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <xQueueGenericSend+0x44>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <xQueueGenericSend+0x46>
 8008934:	2300      	movs	r3, #0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10a      	bne.n	8008950 <xQueueGenericSend+0x60>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d103      	bne.n	800895e <xQueueGenericSend+0x6e>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <xQueueGenericSend+0x72>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <xQueueGenericSend+0x74>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <xQueueGenericSend+0x8e>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	623b      	str	r3, [r7, #32]
}
 800897a:	bf00      	nop
 800897c:	e7fe      	b.n	800897c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800897e:	f001 fadb 	bl	8009f38 <xTaskGetSchedulerState>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <xQueueGenericSend+0x9e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <xQueueGenericSend+0xa2>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <xQueueGenericSend+0xa4>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xQueueGenericSend+0xbe>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	61fb      	str	r3, [r7, #28]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ae:	f002 f859 	bl	800aa64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d302      	bcc.n	80089c4 <xQueueGenericSend+0xd4>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d129      	bne.n	8008a18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ca:	f000 fa8b 	bl	8008ee4 <prvCopyDataToQueue>
 80089ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d010      	beq.n	80089fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	3324      	adds	r3, #36	; 0x24
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 f88b 	bl	8009af8 <xTaskRemoveFromEventList>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d013      	beq.n	8008a10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089e8:	4b3f      	ldr	r3, [pc, #252]	; (8008ae8 <xQueueGenericSend+0x1f8>)
 80089ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	e00a      	b.n	8008a10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a00:	4b39      	ldr	r3, [pc, #228]	; (8008ae8 <xQueueGenericSend+0x1f8>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a10:	f002 f858 	bl	800aac4 <vPortExitCritical>
				return pdPASS;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e063      	b.n	8008ae0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a1e:	f002 f851 	bl	800aac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e05c      	b.n	8008ae0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 f927 	bl	8009c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a36:	2301      	movs	r3, #1
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a3a:	f002 f843 	bl	800aac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a3e:	f000 fdfb 	bl	8009638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a42:	f002 f80f 	bl	800aa64 <vPortEnterCritical>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d103      	bne.n	8008a5c <xQueueGenericSend+0x16c>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a68:	d103      	bne.n	8008a72 <xQueueGenericSend+0x182>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a72:	f002 f827 	bl	800aac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a76:	1d3a      	adds	r2, r7, #4
 8008a78:	f107 0314 	add.w	r3, r7, #20
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 f916 	bl	8009cb0 <xTaskCheckForTimeOut>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d124      	bne.n	8008ad4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8c:	f000 fb22 	bl	80090d4 <prvIsQueueFull>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d018      	beq.n	8008ac8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	3310      	adds	r3, #16
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 ff9e 	bl	80099e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa6:	f000 faad 	bl	8009004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008aaa:	f000 fdd3 	bl	8009654 <xTaskResumeAll>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f af7c 	bne.w	80089ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <xQueueGenericSend+0x1f8>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	e772      	b.n	80089ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aca:	f000 fa9b 	bl	8009004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ace:	f000 fdc1 	bl	8009654 <xTaskResumeAll>
 8008ad2:	e76c      	b.n	80089ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad6:	f000 fa95 	bl	8009004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ada:	f000 fdbb 	bl	8009654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3738      	adds	r7, #56	; 0x38
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b090      	sub	sp, #64	; 0x40
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <xQueueGenericSendFromISR+0x3c>
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <xQueueGenericSendFromISR+0x40>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <xQueueGenericSendFromISR+0x42>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d103      	bne.n	8008b56 <xQueueGenericSendFromISR+0x6a>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <xQueueGenericSendFromISR+0x6e>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <xQueueGenericSendFromISR+0x70>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	623b      	str	r3, [r7, #32]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b76:	f002 f857 	bl	800ac28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61fa      	str	r2, [r7, #28]
 8008b90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <xQueueGenericSendFromISR+0xbc>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d12f      	bne.n	8008c08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bbe:	f000 f991 	bl	8008ee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bca:	d112      	bne.n	8008bf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d016      	beq.n	8008c02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	3324      	adds	r3, #36	; 0x24
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 ff8d 	bl	8009af8 <xTaskRemoveFromEventList>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00e      	beq.n	8008c02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e007      	b.n	8008c02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	b25a      	sxtb	r2, r3
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c02:	2301      	movs	r3, #1
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c06:	e001      	b.n	8008c0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3740      	adds	r7, #64	; 0x40
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08c      	sub	sp, #48	; 0x30
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <xQueueReceive+0x30>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	623b      	str	r3, [r7, #32]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <xQueueReceive+0x3e>
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <xQueueReceive+0x42>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueReceive+0x44>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xQueueReceive+0x5e>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	61fb      	str	r3, [r7, #28]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c82:	f001 f959 	bl	8009f38 <xTaskGetSchedulerState>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <xQueueReceive+0x6e>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <xQueueReceive+0x72>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <xQueueReceive+0x74>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <xQueueReceive+0x8e>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	61bb      	str	r3, [r7, #24]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cb2:	f001 fed7 	bl	800aa64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01f      	beq.n	8008d02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc6:	f000 f977 	bl	8008fb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	3310      	adds	r3, #16
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 ff0a 	bl	8009af8 <xTaskRemoveFromEventList>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cea:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <xQueueReceive+0x1bc>)
 8008cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cfa:	f001 fee3 	bl	800aac4 <vPortExitCritical>
				return pdPASS;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e069      	b.n	8008dd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d08:	f001 fedc 	bl	800aac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e062      	b.n	8008dd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d16:	f107 0310 	add.w	r3, r7, #16
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 ffb2 	bl	8009c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d24:	f001 fece 	bl	800aac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d28:	f000 fc86 	bl	8009638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d2c:	f001 fe9a 	bl	800aa64 <vPortEnterCritical>
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d36:	b25b      	sxtb	r3, r3
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d103      	bne.n	8008d46 <xQueueReceive+0x122>
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d4c:	b25b      	sxtb	r3, r3
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d52:	d103      	bne.n	8008d5c <xQueueReceive+0x138>
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d5c:	f001 feb2 	bl	800aac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d60:	1d3a      	adds	r2, r7, #4
 8008d62:	f107 0310 	add.w	r3, r7, #16
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 ffa1 	bl	8009cb0 <xTaskCheckForTimeOut>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d123      	bne.n	8008dbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	f000 f997 	bl	80090a8 <prvIsQueueEmpty>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d017      	beq.n	8008db0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	3324      	adds	r3, #36	; 0x24
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4611      	mov	r1, r2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fe29 	bl	80099e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d90:	f000 f938 	bl	8009004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d94:	f000 fc5e 	bl	8009654 <xTaskResumeAll>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d189      	bne.n	8008cb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <xQueueReceive+0x1bc>)
 8008da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	e780      	b.n	8008cb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db2:	f000 f927 	bl	8009004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008db6:	f000 fc4d 	bl	8009654 <xTaskResumeAll>
 8008dba:	e77a      	b.n	8008cb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dbe:	f000 f921 	bl	8009004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dc2:	f000 fc47 	bl	8009654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc8:	f000 f96e 	bl	80090a8 <prvIsQueueEmpty>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f43f af6f 	beq.w	8008cb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3730      	adds	r7, #48	; 0x30
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	e000ed04 	.word	0xe000ed04

08008de4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08e      	sub	sp, #56	; 0x38
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	623b      	str	r3, [r7, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d103      	bne.n	8008e1e <xQueueReceiveFromISR+0x3a>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <xQueueReceiveFromISR+0x3e>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <xQueueReceiveFromISR+0x40>
 8008e22:	2300      	movs	r3, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	61fb      	str	r3, [r7, #28]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e3e:	f001 fef3 	bl	800ac28 <vPortValidateInterruptPriority>
	__asm volatile
 8008e42:	f3ef 8211 	mrs	r2, BASEPRI
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	61ba      	str	r2, [r7, #24]
 8008e58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d02f      	beq.n	8008eca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e78:	f000 f89e 	bl	8008fb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	1e5a      	subs	r2, r3, #1
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d112      	bne.n	8008eb4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d016      	beq.n	8008ec4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	3310      	adds	r3, #16
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fe2c 	bl	8009af8 <xTaskRemoveFromEventList>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00e      	beq.n	8008ec4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e007      	b.n	8008ec4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb8:	3301      	adds	r3, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	b25a      	sxtb	r2, r3
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec8:	e001      	b.n	8008ece <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f383 8811 	msr	BASEPRI, r3
}
 8008ed8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3738      	adds	r7, #56	; 0x38
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d14d      	bne.n	8008fa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 f830 	bl	8009f74 <xTaskPriorityDisinherit>
 8008f14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	609a      	str	r2, [r3, #8]
 8008f1c:	e043      	b.n	8008fa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d119      	bne.n	8008f58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6858      	ldr	r0, [r3, #4]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	f002 f8ce 	bl	800b0d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d32b      	bcc.n	8008fa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	605a      	str	r2, [r3, #4]
 8008f56:	e026      	b.n	8008fa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68d8      	ldr	r0, [r3, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	461a      	mov	r2, r3
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	f002 f8b4 	bl	800b0d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	68da      	ldr	r2, [r3, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	425b      	negs	r3, r3
 8008f72:	441a      	add	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d207      	bcs.n	8008f94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	441a      	add	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d105      	bne.n	8008fa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d018      	beq.n	8008ffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	441a      	add	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d303      	bcc.n	8008fec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68d9      	ldr	r1, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6838      	ldr	r0, [r7, #0]
 8008ff8:	f002 f86a 	bl	800b0d0 <memcpy>
	}
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800900c:	f001 fd2a 	bl	800aa64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009018:	e011      	b.n	800903e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b00      	cmp	r3, #0
 8009020:	d012      	beq.n	8009048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3324      	adds	r3, #36	; 0x24
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fd66 	bl	8009af8 <xTaskRemoveFromEventList>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009032:	f000 fe9f 	bl	8009d74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	3b01      	subs	r3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800903e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009042:	2b00      	cmp	r3, #0
 8009044:	dce9      	bgt.n	800901a <prvUnlockQueue+0x16>
 8009046:	e000      	b.n	800904a <prvUnlockQueue+0x46>
					break;
 8009048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	22ff      	movs	r2, #255	; 0xff
 800904e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009052:	f001 fd37 	bl	800aac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009056:	f001 fd05 	bl	800aa64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009062:	e011      	b.n	8009088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d012      	beq.n	8009092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3310      	adds	r3, #16
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fd41 	bl	8009af8 <xTaskRemoveFromEventList>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800907c:	f000 fe7a 	bl	8009d74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	3b01      	subs	r3, #1
 8009084:	b2db      	uxtb	r3, r3
 8009086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dce9      	bgt.n	8009064 <prvUnlockQueue+0x60>
 8009090:	e000      	b.n	8009094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800909c:	f001 fd12 	bl	800aac4 <vPortExitCritical>
}
 80090a0:	bf00      	nop
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090b0:	f001 fcd8 	bl	800aa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e001      	b.n	80090c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090c6:	f001 fcfd 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090dc:	f001 fcc2 	bl	800aa64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d102      	bne.n	80090f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090ec:	2301      	movs	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e001      	b.n	80090f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f001 fce5 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e014      	b.n	800913e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009114:	4a0f      	ldr	r2, [pc, #60]	; (8009154 <vQueueAddToRegistry+0x50>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10b      	bne.n	8009138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009120:	490c      	ldr	r1, [pc, #48]	; (8009154 <vQueueAddToRegistry+0x50>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800912a:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <vQueueAddToRegistry+0x50>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4413      	add	r3, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009136:	e006      	b.n	8009146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b07      	cmp	r3, #7
 8009142:	d9e7      	bls.n	8009114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20001f80 	.word	0x20001f80

08009158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009168:	f001 fc7c 	bl	800aa64 <vPortEnterCritical>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009172:	b25b      	sxtb	r3, r3
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009178:	d103      	bne.n	8009182 <vQueueWaitForMessageRestricted+0x2a>
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009188:	b25b      	sxtb	r3, r3
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918e:	d103      	bne.n	8009198 <vQueueWaitForMessageRestricted+0x40>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009198:	f001 fc94 	bl	800aac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	3324      	adds	r3, #36	; 0x24
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fc77 	bl	8009aa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091b2:	6978      	ldr	r0, [r7, #20]
 80091b4:	f7ff ff26 	bl	8009004 <prvUnlockQueue>
	}
 80091b8:	bf00      	nop
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	623b      	str	r3, [r7, #32]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <xTaskCreateStatic+0x46>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	61fb      	str	r3, [r7, #28]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009206:	235c      	movs	r3, #92	; 0x5c
 8009208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b5c      	cmp	r3, #92	; 0x5c
 800920e:	d00a      	beq.n	8009226 <xTaskCreateStatic+0x66>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	61bb      	str	r3, [r7, #24]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01e      	beq.n	800926c <xTaskCreateStatic+0xac>
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01b      	beq.n	800926c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	2202      	movs	r2, #2
 8009242:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009246:	2300      	movs	r3, #0
 8009248:	9303      	str	r3, [sp, #12]
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	f107 0314 	add.w	r3, r7, #20
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 f850 	bl	8009304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009266:	f000 f8dd 	bl	8009424 <prvAddNewTaskToReadyList>
 800926a:	e001      	b.n	8009270 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009270:	697b      	ldr	r3, [r7, #20]
	}
 8009272:	4618      	mov	r0, r3
 8009274:	3728      	adds	r7, #40	; 0x28
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800927a:	b580      	push	{r7, lr}
 800927c:	b08c      	sub	sp, #48	; 0x30
 800927e:	af04      	add	r7, sp, #16
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fd0a 	bl	800aca8 <pvPortMalloc>
 8009294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00e      	beq.n	80092ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800929c:	205c      	movs	r0, #92	; 0x5c
 800929e:	f001 fd03 	bl	800aca8 <pvPortMalloc>
 80092a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
 80092b0:	e005      	b.n	80092be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092b2:	6978      	ldr	r0, [r7, #20]
 80092b4:	f001 fdc4 	bl	800ae40 <vPortFree>
 80092b8:	e001      	b.n	80092be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d017      	beq.n	80092f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	2300      	movs	r3, #0
 80092d0:	9303      	str	r3, [sp, #12]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	9302      	str	r3, [sp, #8]
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f80e 	bl	8009304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e8:	69f8      	ldr	r0, [r7, #28]
 80092ea:	f000 f89b 	bl	8009424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	e002      	b.n	80092fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092fa:	69bb      	ldr	r3, [r7, #24]
	}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	461a      	mov	r2, r3
 800931c:	21a5      	movs	r1, #165	; 0xa5
 800931e:	f001 fee5 	bl	800b0ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800932c:	3b01      	subs	r3, #1
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f023 0307 	bic.w	r3, r3, #7
 800933a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	617b      	str	r3, [r7, #20]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d01f      	beq.n	80093a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	e012      	b.n	800938e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	7819      	ldrb	r1, [r3, #0]
 8009370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	4413      	add	r3, r2
 8009376:	3334      	adds	r3, #52	; 0x34
 8009378:	460a      	mov	r2, r1
 800937a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	4413      	add	r3, r2
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d006      	beq.n	8009396 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3301      	adds	r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2b0f      	cmp	r3, #15
 8009392:	d9e9      	bls.n	8009368 <prvInitialiseNewTask+0x64>
 8009394:	e000      	b.n	8009398 <prvInitialiseNewTask+0x94>
			{
				break;
 8009396:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093a0:	e003      	b.n	80093aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	2b37      	cmp	r3, #55	; 0x37
 80093ae:	d901      	bls.n	80093b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093b0:	2337      	movs	r3, #55	; 0x37
 80093b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	2200      	movs	r2, #0
 80093c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff f8be 	bl	800854c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	3318      	adds	r3, #24
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff f8b9 	bl	800854c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	2200      	movs	r2, #0
 80093f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	68f9      	ldr	r1, [r7, #12]
 8009402:	69b8      	ldr	r0, [r7, #24]
 8009404:	f001 f9fe 	bl	800a804 <pxPortInitialiseStack>
 8009408:	4602      	mov	r2, r0
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800941a:	bf00      	nop
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800942c:	f001 fb1a 	bl	800aa64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009430:	4b2d      	ldr	r3, [pc, #180]	; (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	4a2c      	ldr	r2, [pc, #176]	; (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 8009438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800943a:	4b2c      	ldr	r3, [pc, #176]	; (80094ec <prvAddNewTaskToReadyList+0xc8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009442:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <prvAddNewTaskToReadyList+0xc8>)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009448:	4b27      	ldr	r3, [pc, #156]	; (80094e8 <prvAddNewTaskToReadyList+0xc4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d110      	bne.n	8009472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009450:	f000 fcb4 	bl	8009dbc <prvInitialiseTaskLists>
 8009454:	e00d      	b.n	8009472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009456:	4b26      	ldr	r3, [pc, #152]	; (80094f0 <prvAddNewTaskToReadyList+0xcc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800945e:	4b23      	ldr	r3, [pc, #140]	; (80094ec <prvAddNewTaskToReadyList+0xc8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	429a      	cmp	r2, r3
 800946a:	d802      	bhi.n	8009472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800946c:	4a1f      	ldr	r2, [pc, #124]	; (80094ec <prvAddNewTaskToReadyList+0xc8>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009472:	4b20      	ldr	r3, [pc, #128]	; (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 800947a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <prvAddNewTaskToReadyList+0xd0>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4b1b      	ldr	r3, [pc, #108]	; (80094f8 <prvAddNewTaskToReadyList+0xd4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d903      	bls.n	8009498 <prvAddNewTaskToReadyList+0x74>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	4a18      	ldr	r2, [pc, #96]	; (80094f8 <prvAddNewTaskToReadyList+0xd4>)
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4a15      	ldr	r2, [pc, #84]	; (80094fc <prvAddNewTaskToReadyList+0xd8>)
 80094a6:	441a      	add	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f7ff f859 	bl	8008566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094b4:	f001 fb06 	bl	800aac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <prvAddNewTaskToReadyList+0xcc>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00e      	beq.n	80094de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094c0:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <prvAddNewTaskToReadyList+0xc8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d207      	bcs.n	80094de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ce:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <prvAddNewTaskToReadyList+0xdc>)
 80094d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20001094 	.word	0x20001094
 80094ec:	20000bc0 	.word	0x20000bc0
 80094f0:	200010a0 	.word	0x200010a0
 80094f4:	200010b0 	.word	0x200010b0
 80094f8:	2000109c 	.word	0x2000109c
 80094fc:	20000bc4 	.word	0x20000bc4
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d017      	beq.n	8009546 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009516:	4b13      	ldr	r3, [pc, #76]	; (8009564 <vTaskDelay+0x60>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <vTaskDelay+0x30>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60bb      	str	r3, [r7, #8]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009534:	f000 f880 	bl	8009638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009538:	2100      	movs	r1, #0
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fda0 	bl	800a080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009540:	f000 f888 	bl	8009654 <xTaskResumeAll>
 8009544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d107      	bne.n	800955c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <vTaskDelay+0x64>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	200010bc 	.word	0x200010bc
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	; 0x28
 8009570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800957a:	463a      	mov	r2, r7
 800957c:	1d39      	adds	r1, r7, #4
 800957e:	f107 0308 	add.w	r3, r7, #8
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fd68 	bl	8008058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	2300      	movs	r3, #0
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2300      	movs	r3, #0
 8009598:	460a      	mov	r2, r1
 800959a:	4921      	ldr	r1, [pc, #132]	; (8009620 <vTaskStartScheduler+0xb4>)
 800959c:	4821      	ldr	r0, [pc, #132]	; (8009624 <vTaskStartScheduler+0xb8>)
 800959e:	f7ff fe0f 	bl	80091c0 <xTaskCreateStatic>
 80095a2:	4603      	mov	r3, r0
 80095a4:	4a20      	ldr	r2, [pc, #128]	; (8009628 <vTaskStartScheduler+0xbc>)
 80095a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095a8:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <vTaskStartScheduler+0xbc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095b0:	2301      	movs	r3, #1
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e001      	b.n	80095ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d102      	bne.n	80095c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095c0:	f000 fdb2 	bl	800a128 <xTimerCreateTimerTask>
 80095c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d116      	bne.n	80095fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	613b      	str	r3, [r7, #16]
}
 80095de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095e0:	4b12      	ldr	r3, [pc, #72]	; (800962c <vTaskStartScheduler+0xc0>)
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095e8:	4b11      	ldr	r3, [pc, #68]	; (8009630 <vTaskStartScheduler+0xc4>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <vTaskStartScheduler+0xc8>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095f4:	f001 f994 	bl	800a920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095f8:	e00e      	b.n	8009618 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d10a      	bne.n	8009618 <vTaskStartScheduler+0xac>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	60fb      	str	r3, [r7, #12]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <vTaskStartScheduler+0xaa>
}
 8009618:	bf00      	nop
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	0800c4e0 	.word	0x0800c4e0
 8009624:	08009d8d 	.word	0x08009d8d
 8009628:	200010b8 	.word	0x200010b8
 800962c:	200010b4 	.word	0x200010b4
 8009630:	200010a0 	.word	0x200010a0
 8009634:	20001098 	.word	0x20001098

08009638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <vTaskSuspendAll+0x18>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3301      	adds	r3, #1
 8009642:	4a03      	ldr	r2, [pc, #12]	; (8009650 <vTaskSuspendAll+0x18>)
 8009644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009646:	bf00      	nop
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	200010bc 	.word	0x200010bc

08009654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009662:	4b42      	ldr	r3, [pc, #264]	; (800976c <xTaskResumeAll+0x118>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <xTaskResumeAll+0x2c>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	603b      	str	r3, [r7, #0]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009680:	f001 f9f0 	bl	800aa64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009684:	4b39      	ldr	r3, [pc, #228]	; (800976c <xTaskResumeAll+0x118>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3b01      	subs	r3, #1
 800968a:	4a38      	ldr	r2, [pc, #224]	; (800976c <xTaskResumeAll+0x118>)
 800968c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800968e:	4b37      	ldr	r3, [pc, #220]	; (800976c <xTaskResumeAll+0x118>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d162      	bne.n	800975c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009696:	4b36      	ldr	r3, [pc, #216]	; (8009770 <xTaskResumeAll+0x11c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d05e      	beq.n	800975c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800969e:	e02f      	b.n	8009700 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a0:	4b34      	ldr	r3, [pc, #208]	; (8009774 <xTaskResumeAll+0x120>)
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3318      	adds	r3, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe ffb7 	bl	8008620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe ffb2 	bl	8008620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4b2d      	ldr	r3, [pc, #180]	; (8009778 <xTaskResumeAll+0x124>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d903      	bls.n	80096d0 <xTaskResumeAll+0x7c>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <xTaskResumeAll+0x124>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4a27      	ldr	r2, [pc, #156]	; (800977c <xTaskResumeAll+0x128>)
 80096de:	441a      	add	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fe ff3d 	bl	8008566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	4b23      	ldr	r3, [pc, #140]	; (8009780 <xTaskResumeAll+0x12c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d302      	bcc.n	8009700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096fa:	4b22      	ldr	r3, [pc, #136]	; (8009784 <xTaskResumeAll+0x130>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009700:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <xTaskResumeAll+0x120>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1cb      	bne.n	80096a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800970e:	f000 fbf3 	bl	8009ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009712:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <xTaskResumeAll+0x134>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d010      	beq.n	8009740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800971e:	f000 f847 	bl	80097b0 <xTaskIncrementTick>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009728:	4b16      	ldr	r3, [pc, #88]	; (8009784 <xTaskResumeAll+0x130>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1f1      	bne.n	800971e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <xTaskResumeAll+0x134>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009740:	4b10      	ldr	r3, [pc, #64]	; (8009784 <xTaskResumeAll+0x130>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800974c:	4b0f      	ldr	r3, [pc, #60]	; (800978c <xTaskResumeAll+0x138>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800975c:	f001 f9b2 	bl	800aac4 <vPortExitCritical>

	return xAlreadyYielded;
 8009760:	68bb      	ldr	r3, [r7, #8]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	200010bc 	.word	0x200010bc
 8009770:	20001094 	.word	0x20001094
 8009774:	20001054 	.word	0x20001054
 8009778:	2000109c 	.word	0x2000109c
 800977c:	20000bc4 	.word	0x20000bc4
 8009780:	20000bc0 	.word	0x20000bc0
 8009784:	200010a8 	.word	0x200010a8
 8009788:	200010a4 	.word	0x200010a4
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <xTaskGetTickCount+0x1c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800979c:	687b      	ldr	r3, [r7, #4]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20001098 	.word	0x20001098

080097b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ba:	4b4f      	ldr	r3, [pc, #316]	; (80098f8 <xTaskIncrementTick+0x148>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 808f 	bne.w	80098e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097c4:	4b4d      	ldr	r3, [pc, #308]	; (80098fc <xTaskIncrementTick+0x14c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097cc:	4a4b      	ldr	r2, [pc, #300]	; (80098fc <xTaskIncrementTick+0x14c>)
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d120      	bne.n	800981a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097d8:	4b49      	ldr	r3, [pc, #292]	; (8009900 <xTaskIncrementTick+0x150>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	603b      	str	r3, [r7, #0]
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <xTaskIncrementTick+0x46>
 80097f8:	4b41      	ldr	r3, [pc, #260]	; (8009900 <xTaskIncrementTick+0x150>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	4b41      	ldr	r3, [pc, #260]	; (8009904 <xTaskIncrementTick+0x154>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a3f      	ldr	r2, [pc, #252]	; (8009900 <xTaskIncrementTick+0x150>)
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	4a3f      	ldr	r2, [pc, #252]	; (8009904 <xTaskIncrementTick+0x154>)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	4b3e      	ldr	r3, [pc, #248]	; (8009908 <xTaskIncrementTick+0x158>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	4a3d      	ldr	r2, [pc, #244]	; (8009908 <xTaskIncrementTick+0x158>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	f000 fb6f 	bl	8009ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800981a:	4b3c      	ldr	r3, [pc, #240]	; (800990c <xTaskIncrementTick+0x15c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	429a      	cmp	r2, r3
 8009822:	d349      	bcc.n	80098b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009824:	4b36      	ldr	r3, [pc, #216]	; (8009900 <xTaskIncrementTick+0x150>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982e:	4b37      	ldr	r3, [pc, #220]	; (800990c <xTaskIncrementTick+0x15c>)
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	601a      	str	r2, [r3, #0]
					break;
 8009836:	e03f      	b.n	80098b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009838:	4b31      	ldr	r3, [pc, #196]	; (8009900 <xTaskIncrementTick+0x150>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	429a      	cmp	r2, r3
 800984e:	d203      	bcs.n	8009858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009850:	4a2e      	ldr	r2, [pc, #184]	; (800990c <xTaskIncrementTick+0x15c>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009856:	e02f      	b.n	80098b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	3304      	adds	r3, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fedf 	bl	8008620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	3318      	adds	r3, #24
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fed6 	bl	8008620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009878:	4b25      	ldr	r3, [pc, #148]	; (8009910 <xTaskIncrementTick+0x160>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d903      	bls.n	8009888 <xTaskIncrementTick+0xd8>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a22      	ldr	r2, [pc, #136]	; (8009910 <xTaskIncrementTick+0x160>)
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <xTaskIncrementTick+0x164>)
 8009896:	441a      	add	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f7fe fe61 	bl	8008566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a8:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <xTaskIncrementTick+0x168>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d3b8      	bcc.n	8009824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098b6:	e7b5      	b.n	8009824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098b8:	4b17      	ldr	r3, [pc, #92]	; (8009918 <xTaskIncrementTick+0x168>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098be:	4915      	ldr	r1, [pc, #84]	; (8009914 <xTaskIncrementTick+0x164>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d901      	bls.n	80098d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098d0:	2301      	movs	r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098d4:	4b11      	ldr	r3, [pc, #68]	; (800991c <xTaskIncrementTick+0x16c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e004      	b.n	80098ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098e2:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <xTaskIncrementTick+0x170>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3301      	adds	r3, #1
 80098e8:	4a0d      	ldr	r2, [pc, #52]	; (8009920 <xTaskIncrementTick+0x170>)
 80098ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098ec:	697b      	ldr	r3, [r7, #20]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	200010bc 	.word	0x200010bc
 80098fc:	20001098 	.word	0x20001098
 8009900:	2000104c 	.word	0x2000104c
 8009904:	20001050 	.word	0x20001050
 8009908:	200010ac 	.word	0x200010ac
 800990c:	200010b4 	.word	0x200010b4
 8009910:	2000109c 	.word	0x2000109c
 8009914:	20000bc4 	.word	0x20000bc4
 8009918:	20000bc0 	.word	0x20000bc0
 800991c:	200010a8 	.word	0x200010a8
 8009920:	200010a4 	.word	0x200010a4

08009924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800992a:	4b28      	ldr	r3, [pc, #160]	; (80099cc <vTaskSwitchContext+0xa8>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009932:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <vTaskSwitchContext+0xac>)
 8009934:	2201      	movs	r2, #1
 8009936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009938:	e041      	b.n	80099be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800993a:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <vTaskSwitchContext+0xac>)
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009940:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <vTaskSwitchContext+0xb0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e010      	b.n	800996a <vTaskSwitchContext+0x46>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <vTaskSwitchContext+0x40>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <vTaskSwitchContext+0x3e>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3b01      	subs	r3, #1
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	491b      	ldr	r1, [pc, #108]	; (80099d8 <vTaskSwitchContext+0xb4>)
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	440b      	add	r3, r1
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0e4      	beq.n	8009948 <vTaskSwitchContext+0x24>
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4a13      	ldr	r2, [pc, #76]	; (80099d8 <vTaskSwitchContext+0xb4>)
 800998a:	4413      	add	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	605a      	str	r2, [r3, #4]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3308      	adds	r3, #8
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d104      	bne.n	80099ae <vTaskSwitchContext+0x8a>
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	605a      	str	r2, [r3, #4]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4a09      	ldr	r2, [pc, #36]	; (80099dc <vTaskSwitchContext+0xb8>)
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	4a06      	ldr	r2, [pc, #24]	; (80099d4 <vTaskSwitchContext+0xb0>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6013      	str	r3, [r2, #0]
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200010bc 	.word	0x200010bc
 80099d0:	200010a8 	.word	0x200010a8
 80099d4:	2000109c 	.word	0x2000109c
 80099d8:	20000bc4 	.word	0x20000bc4
 80099dc:	20000bc0 	.word	0x20000bc0

080099e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a06:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <vTaskPlaceOnEventList+0x44>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3318      	adds	r3, #24
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fe fdcd 	bl	80085ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a14:	2101      	movs	r1, #1
 8009a16:	6838      	ldr	r0, [r7, #0]
 8009a18:	f000 fb32 	bl	800a080 <prvAddCurrentTaskToDelayedList>
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000bc0 	.word	0x20000bc0

08009a28 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	617b      	str	r3, [r7, #20]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009a50:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	613b      	str	r3, [r7, #16]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009a78:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3318      	adds	r3, #24
 8009a80:	4619      	mov	r1, r3
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7fe fd6f 	bl	8008566 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a88:	2101      	movs	r1, #1
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 faf8 	bl	800a080 <prvAddCurrentTaskToDelayedList>
}
 8009a90:	bf00      	nop
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200010bc 	.word	0x200010bc
 8009a9c:	20000bc0 	.word	0x20000bc0

08009aa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	617b      	str	r3, [r7, #20]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3318      	adds	r3, #24
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7fe fd48 	bl	8008566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f000 facb 	bl	800a080 <prvAddCurrentTaskToDelayedList>
	}
 8009aea:	bf00      	nop
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000bc0 	.word	0x20000bc0

08009af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60fb      	str	r3, [r7, #12]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	3318      	adds	r3, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fd79 	bl	8008620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2e:	4b1e      	ldr	r3, [pc, #120]	; (8009ba8 <xTaskRemoveFromEventList+0xb0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11d      	bne.n	8009b72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fd70 	bl	8008620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4b19      	ldr	r3, [pc, #100]	; (8009bac <xTaskRemoveFromEventList+0xb4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d903      	bls.n	8009b54 <xTaskRemoveFromEventList+0x5c>
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <xTaskRemoveFromEventList+0xb4>)
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <xTaskRemoveFromEventList+0xb8>)
 8009b62:	441a      	add	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f7fe fcfb 	bl	8008566 <vListInsertEnd>
 8009b70:	e005      	b.n	8009b7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3318      	adds	r3, #24
 8009b76:	4619      	mov	r1, r3
 8009b78:	480e      	ldr	r0, [pc, #56]	; (8009bb4 <xTaskRemoveFromEventList+0xbc>)
 8009b7a:	f7fe fcf4 	bl	8008566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <xTaskRemoveFromEventList+0xc0>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d905      	bls.n	8009b98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <xTaskRemoveFromEventList+0xc4>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	e001      	b.n	8009b9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b9c:	697b      	ldr	r3, [r7, #20]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200010bc 	.word	0x200010bc
 8009bac:	2000109c 	.word	0x2000109c
 8009bb0:	20000bc4 	.word	0x20000bc4
 8009bb4:	20001054 	.word	0x20001054
 8009bb8:	20000bc0 	.word	0x20000bc0
 8009bbc:	200010a8 	.word	0x200010a8

08009bc0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009bca:	4b29      	ldr	r3, [pc, #164]	; (8009c70 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	613b      	str	r3, [r7, #16]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60fb      	str	r3, [r7, #12]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7fe fd03 	bl	8008620 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fcfe 	bl	8008620 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <vTaskRemoveFromUnorderedEventList+0x78>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a0f      	ldr	r2, [pc, #60]	; (8009c74 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a0c      	ldr	r2, [pc, #48]	; (8009c78 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fc89 	bl	8008566 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d902      	bls.n	8009c68 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009c62:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
	}
}
 8009c68:	bf00      	nop
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200010bc 	.word	0x200010bc
 8009c74:	2000109c 	.word	0x2000109c
 8009c78:	20000bc4 	.word	0x20000bc4
 8009c7c:	20000bc0 	.word	0x20000bc0
 8009c80:	200010a8 	.word	0x200010a8

08009c84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <vTaskInternalSetTimeOutState+0x24>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <vTaskInternalSetTimeOutState+0x28>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	605a      	str	r2, [r3, #4]
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200010ac 	.word	0x200010ac
 8009cac:	20001098 	.word	0x20001098

08009cb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	613b      	str	r3, [r7, #16]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cf2:	f000 feb7 	bl	800aa64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cf6:	4b1d      	ldr	r3, [pc, #116]	; (8009d6c <xTaskCheckForTimeOut+0xbc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d102      	bne.n	8009d16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	e023      	b.n	8009d5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <xTaskCheckForTimeOut+0xc0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d007      	beq.n	8009d32 <xTaskCheckForTimeOut+0x82>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d302      	bcc.n	8009d32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e015      	b.n	8009d5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d20b      	bcs.n	8009d54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	1ad2      	subs	r2, r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ff9b 	bl	8009c84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61fb      	str	r3, [r7, #28]
 8009d52:	e004      	b.n	8009d5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d5e:	f000 feb1 	bl	800aac4 <vPortExitCritical>

	return xReturn;
 8009d62:	69fb      	ldr	r3, [r7, #28]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20001098 	.word	0x20001098
 8009d70:	200010ac 	.word	0x200010ac

08009d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d78:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <vTaskMissedYield+0x14>)
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	200010a8 	.word	0x200010a8

08009d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d94:	f000 f852 	bl	8009e3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <prvIdleTask+0x28>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d9f9      	bls.n	8009d94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <prvIdleTask+0x2c>)
 8009da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009db0:	e7f0      	b.n	8009d94 <prvIdleTask+0x8>
 8009db2:	bf00      	nop
 8009db4:	20000bc4 	.word	0x20000bc4
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	e00c      	b.n	8009de2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4a12      	ldr	r2, [pc, #72]	; (8009e1c <prvInitialiseTaskLists+0x60>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe fb98 	bl	800850c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3301      	adds	r3, #1
 8009de0:	607b      	str	r3, [r7, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b37      	cmp	r3, #55	; 0x37
 8009de6:	d9ef      	bls.n	8009dc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009de8:	480d      	ldr	r0, [pc, #52]	; (8009e20 <prvInitialiseTaskLists+0x64>)
 8009dea:	f7fe fb8f 	bl	800850c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dee:	480d      	ldr	r0, [pc, #52]	; (8009e24 <prvInitialiseTaskLists+0x68>)
 8009df0:	f7fe fb8c 	bl	800850c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009df4:	480c      	ldr	r0, [pc, #48]	; (8009e28 <prvInitialiseTaskLists+0x6c>)
 8009df6:	f7fe fb89 	bl	800850c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dfa:	480c      	ldr	r0, [pc, #48]	; (8009e2c <prvInitialiseTaskLists+0x70>)
 8009dfc:	f7fe fb86 	bl	800850c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e00:	480b      	ldr	r0, [pc, #44]	; (8009e30 <prvInitialiseTaskLists+0x74>)
 8009e02:	f7fe fb83 	bl	800850c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <prvInitialiseTaskLists+0x78>)
 8009e08:	4a05      	ldr	r2, [pc, #20]	; (8009e20 <prvInitialiseTaskLists+0x64>)
 8009e0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <prvInitialiseTaskLists+0x7c>)
 8009e0e:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <prvInitialiseTaskLists+0x68>)
 8009e10:	601a      	str	r2, [r3, #0]
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000bc4 	.word	0x20000bc4
 8009e20:	20001024 	.word	0x20001024
 8009e24:	20001038 	.word	0x20001038
 8009e28:	20001054 	.word	0x20001054
 8009e2c:	20001068 	.word	0x20001068
 8009e30:	20001080 	.word	0x20001080
 8009e34:	2000104c 	.word	0x2000104c
 8009e38:	20001050 	.word	0x20001050

08009e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e42:	e019      	b.n	8009e78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e44:	f000 fe0e 	bl	800aa64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e48:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <prvCheckTasksWaitingTermination+0x50>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe fbe3 	bl	8008620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <prvCheckTasksWaitingTermination+0x54>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	4a0b      	ldr	r2, [pc, #44]	; (8009e90 <prvCheckTasksWaitingTermination+0x54>)
 8009e62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <prvCheckTasksWaitingTermination+0x58>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	4a0a      	ldr	r2, [pc, #40]	; (8009e94 <prvCheckTasksWaitingTermination+0x58>)
 8009e6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e6e:	f000 fe29 	bl	800aac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f810 	bl	8009e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <prvCheckTasksWaitingTermination+0x58>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e1      	bne.n	8009e44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20001068 	.word	0x20001068
 8009e90:	20001094 	.word	0x20001094
 8009e94:	2000107c 	.word	0x2000107c

08009e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d108      	bne.n	8009ebc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 ffc6 	bl	800ae40 <vPortFree>
				vPortFree( pxTCB );
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 ffc3 	bl	800ae40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eba:	e018      	b.n	8009eee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d103      	bne.n	8009ece <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 ffba 	bl	800ae40 <vPortFree>
	}
 8009ecc:	e00f      	b.n	8009eee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d00a      	beq.n	8009eee <prvDeleteTCB+0x56>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	60fb      	str	r3, [r7, #12]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <prvDeleteTCB+0x54>
	}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <prvResetNextTaskUnblockTime+0x38>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <prvResetNextTaskUnblockTime+0x3c>)
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f10:	e008      	b.n	8009f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <prvResetNextTaskUnblockTime+0x38>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <prvResetNextTaskUnblockTime+0x3c>)
 8009f22:	6013      	str	r3, [r2, #0]
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	2000104c 	.word	0x2000104c
 8009f34:	200010b4 	.word	0x200010b4

08009f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f3e:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <xTaskGetSchedulerState+0x34>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f46:	2301      	movs	r3, #1
 8009f48:	607b      	str	r3, [r7, #4]
 8009f4a:	e008      	b.n	8009f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f4c:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <xTaskGetSchedulerState+0x38>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f54:	2302      	movs	r3, #2
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	e001      	b.n	8009f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f5e:	687b      	ldr	r3, [r7, #4]
	}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	200010a0 	.word	0x200010a0
 8009f70:	200010bc 	.word	0x200010bc

08009f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d056      	beq.n	800a038 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f8a:	4b2e      	ldr	r3, [pc, #184]	; (800a044 <xTaskPriorityDisinherit+0xd0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d00a      	beq.n	8009faa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	60fb      	str	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	60bb      	str	r3, [r7, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fcc:	1e5a      	subs	r2, r3, #1
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d02c      	beq.n	800a038 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d128      	bne.n	800a038 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe fb18 	bl	8008620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <xTaskPriorityDisinherit+0xd4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d903      	bls.n	800a018 <xTaskPriorityDisinherit+0xa4>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <xTaskPriorityDisinherit+0xd4>)
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4a09      	ldr	r2, [pc, #36]	; (800a04c <xTaskPriorityDisinherit+0xd8>)
 800a026:	441a      	add	r2, r3
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7fe fa99 	bl	8008566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a038:	697b      	ldr	r3, [r7, #20]
	}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000bc0 	.word	0x20000bc0
 800a048:	2000109c 	.word	0x2000109c
 800a04c:	20000bc4 	.word	0x20000bc4

0800a050 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <uxTaskResetEventItemValue+0x2c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05e:	4b07      	ldr	r3, [pc, #28]	; (800a07c <uxTaskResetEventItemValue+0x2c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <uxTaskResetEventItemValue+0x2c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a06c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a06e:	687b      	ldr	r3, [r7, #4]
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000bc0 	.word	0x20000bc0

0800a080 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a08a:	4b21      	ldr	r3, [pc, #132]	; (800a110 <prvAddCurrentTaskToDelayedList+0x90>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a090:	4b20      	ldr	r3, [pc, #128]	; (800a114 <prvAddCurrentTaskToDelayedList+0x94>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3304      	adds	r3, #4
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fac2 	bl	8008620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d10a      	bne.n	800a0ba <prvAddCurrentTaskToDelayedList+0x3a>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0aa:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4819      	ldr	r0, [pc, #100]	; (800a118 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0b4:	f7fe fa57 	bl	8008566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0b8:	e026      	b.n	800a108 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4413      	add	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0c2:	4b14      	ldr	r3, [pc, #80]	; (800a114 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d209      	bcs.n	800a0e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe fa65 	bl	80085ae <vListInsert>
}
 800a0e4:	e010      	b.n	800a108 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0e6:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe fa5b 	bl	80085ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d202      	bcs.n	800a108 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a102:	4a08      	ldr	r2, [pc, #32]	; (800a124 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6013      	str	r3, [r2, #0]
}
 800a108:	bf00      	nop
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20001098 	.word	0x20001098
 800a114:	20000bc0 	.word	0x20000bc0
 800a118:	20001080 	.word	0x20001080
 800a11c:	20001050 	.word	0x20001050
 800a120:	2000104c 	.word	0x2000104c
 800a124:	200010b4 	.word	0x200010b4

0800a128 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	; 0x28
 800a12c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a132:	f000 fb07 	bl	800a744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a136:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <xTimerCreateTimerTask+0x80>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d021      	beq.n	800a182 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a146:	1d3a      	adds	r2, r7, #4
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	f107 030c 	add.w	r3, r7, #12
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd ff9b 	bl	800808c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	2302      	movs	r3, #2
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	460a      	mov	r2, r1
 800a168:	4910      	ldr	r1, [pc, #64]	; (800a1ac <xTimerCreateTimerTask+0x84>)
 800a16a:	4811      	ldr	r0, [pc, #68]	; (800a1b0 <xTimerCreateTimerTask+0x88>)
 800a16c:	f7ff f828 	bl	80091c0 <xTaskCreateStatic>
 800a170:	4603      	mov	r3, r0
 800a172:	4a10      	ldr	r2, [pc, #64]	; (800a1b4 <xTimerCreateTimerTask+0x8c>)
 800a174:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <xTimerCreateTimerTask+0x8c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a17e:	2301      	movs	r3, #1
 800a180:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	613b      	str	r3, [r7, #16]
}
 800a19a:	bf00      	nop
 800a19c:	e7fe      	b.n	800a19c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a19e:	697b      	ldr	r3, [r7, #20]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	200010f0 	.word	0x200010f0
 800a1ac:	0800c4e8 	.word	0x0800c4e8
 800a1b0:	0800a2ed 	.word	0x0800a2ed
 800a1b4:	200010f4 	.word	0x200010f4

0800a1b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	623b      	str	r3, [r7, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1e6:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <xTimerGenericCommand+0x98>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d02a      	beq.n	800a244 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b05      	cmp	r3, #5
 800a1fe:	dc18      	bgt.n	800a232 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a200:	f7ff fe9a 	bl	8009f38 <xTaskGetSchedulerState>
 800a204:	4603      	mov	r3, r0
 800a206:	2b02      	cmp	r3, #2
 800a208:	d109      	bne.n	800a21e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <xTimerGenericCommand+0x98>)
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f107 0110 	add.w	r1, r7, #16
 800a212:	2300      	movs	r3, #0
 800a214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a216:	f7fe fb6b 	bl	80088f0 <xQueueGenericSend>
 800a21a:	6278      	str	r0, [r7, #36]	; 0x24
 800a21c:	e012      	b.n	800a244 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a21e:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <xTimerGenericCommand+0x98>)
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f107 0110 	add.w	r1, r7, #16
 800a226:	2300      	movs	r3, #0
 800a228:	2200      	movs	r2, #0
 800a22a:	f7fe fb61 	bl	80088f0 <xQueueGenericSend>
 800a22e:	6278      	str	r0, [r7, #36]	; 0x24
 800a230:	e008      	b.n	800a244 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a232:	4b07      	ldr	r3, [pc, #28]	; (800a250 <xTimerGenericCommand+0x98>)
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	f107 0110 	add.w	r1, r7, #16
 800a23a:	2300      	movs	r3, #0
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	f7fe fc55 	bl	8008aec <xQueueGenericSendFromISR>
 800a242:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a246:	4618      	mov	r0, r3
 800a248:	3728      	adds	r7, #40	; 0x28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	200010f0 	.word	0x200010f0

0800a254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af02      	add	r7, sp, #8
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25e:	4b22      	ldr	r3, [pc, #136]	; (800a2e8 <prvProcessExpiredTimer+0x94>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe f9d7 	bl	8008620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d022      	beq.n	800a2c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	699a      	ldr	r2, [r3, #24]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	18d1      	adds	r1, r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	6978      	ldr	r0, [r7, #20]
 800a28e:	f000 f8d1 	bl	800a434 <prvInsertTimerInActiveList>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01f      	beq.n	800a2d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a298:	2300      	movs	r3, #0
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	2300      	movs	r3, #0
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	6978      	ldr	r0, [r7, #20]
 800a2a4:	f7ff ff88 	bl	800a1b8 <xTimerGenericCommand>
 800a2a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d113      	bne.n	800a2d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	60fb      	str	r3, [r7, #12]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	6978      	ldr	r0, [r7, #20]
 800a2de:	4798      	blx	r3
}
 800a2e0:	bf00      	nop
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	200010e8 	.word	0x200010e8

0800a2ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f857 	bl	800a3ac <prvGetNextExpireTime>
 800a2fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4619      	mov	r1, r3
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 f803 	bl	800a310 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a30a:	f000 f8d5 	bl	800a4b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a30e:	e7f1      	b.n	800a2f4 <prvTimerTask+0x8>

0800a310 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a31a:	f7ff f98d 	bl	8009638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a31e:	f107 0308 	add.w	r3, r7, #8
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f866 	bl	800a3f4 <prvSampleTimeNow>
 800a328:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d130      	bne.n	800a392 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <prvProcessTimerOrBlockTask+0x3c>
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d806      	bhi.n	800a34c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a33e:	f7ff f989 	bl	8009654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff ff85 	bl	800a254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a34a:	e024      	b.n	800a396 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d008      	beq.n	800a364 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <prvProcessTimerOrBlockTask+0x90>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <prvProcessTimerOrBlockTask+0x50>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <prvProcessTimerOrBlockTask+0x52>
 800a360:	2300      	movs	r3, #0
 800a362:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <prvProcessTimerOrBlockTask+0x94>)
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4619      	mov	r1, r3
 800a372:	f7fe fef1 	bl	8009158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a376:	f7ff f96d 	bl	8009654 <xTaskResumeAll>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <prvProcessTimerOrBlockTask+0x98>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
}
 800a390:	e001      	b.n	800a396 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a392:	f7ff f95f 	bl	8009654 <xTaskResumeAll>
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200010ec 	.word	0x200010ec
 800a3a4:	200010f0 	.word	0x200010f0
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <prvGetNextExpireTime+0x44>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <prvGetNextExpireTime+0x16>
 800a3be:	2201      	movs	r2, #1
 800a3c0:	e000      	b.n	800a3c4 <prvGetNextExpireTime+0x18>
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <prvGetNextExpireTime+0x44>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	e001      	b.n	800a3e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	200010e8 	.word	0x200010e8

0800a3f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3fc:	f7ff f9c8 	bl	8009790 <xTaskGetTickCount>
 800a400:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a402:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <prvSampleTimeNow+0x3c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d205      	bcs.n	800a418 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a40c:	f000 f936 	bl	800a67c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	e002      	b.n	800a41e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a41e:	4a04      	ldr	r2, [pc, #16]	; (800a430 <prvSampleTimeNow+0x3c>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a424:	68fb      	ldr	r3, [r7, #12]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	200010f8 	.word	0x200010f8

0800a434 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d812      	bhi.n	800a480 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	429a      	cmp	r2, r3
 800a466:	d302      	bcc.n	800a46e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a468:	2301      	movs	r3, #1
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	e01b      	b.n	800a4a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a46e:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <prvInsertTimerInActiveList+0x7c>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3304      	adds	r3, #4
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f7fe f898 	bl	80085ae <vListInsert>
 800a47e:	e012      	b.n	800a4a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d206      	bcs.n	800a496 <prvInsertTimerInActiveList+0x62>
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d302      	bcc.n	800a496 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e007      	b.n	800a4a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a496:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <prvInsertTimerInActiveList+0x80>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7fe f884 	bl	80085ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4a6:	697b      	ldr	r3, [r7, #20]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200010ec 	.word	0x200010ec
 800a4b4:	200010e8 	.word	0x200010e8

0800a4b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08e      	sub	sp, #56	; 0x38
 800a4bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4be:	e0ca      	b.n	800a656 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da18      	bge.n	800a4f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	61fb      	str	r3, [r7, #28]
}
 800a4e4:	bf00      	nop
 800a4e6:	e7fe      	b.n	800a4e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ee:	6850      	ldr	r0, [r2, #4]
 800a4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f2:	6892      	ldr	r2, [r2, #8]
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f2c0 80aa 	blt.w	800a654 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d004      	beq.n	800a516 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	3304      	adds	r3, #4
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe f885 	bl	8008620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a516:	463b      	mov	r3, r7
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff ff6b 	bl	800a3f4 <prvSampleTimeNow>
 800a51e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b09      	cmp	r3, #9
 800a524:	f200 8097 	bhi.w	800a656 <prvProcessReceivedCommands+0x19e>
 800a528:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <prvProcessReceivedCommands+0x78>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a559 	.word	0x0800a559
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a559 	.word	0x0800a559
 800a53c:	0800a5cd 	.word	0x0800a5cd
 800a540:	0800a5e1 	.word	0x0800a5e1
 800a544:	0800a62b 	.word	0x0800a62b
 800a548:	0800a559 	.word	0x0800a559
 800a54c:	0800a559 	.word	0x0800a559
 800a550:	0800a5cd 	.word	0x0800a5cd
 800a554:	0800a5e1 	.word	0x0800a5e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	18d1      	adds	r1, r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a578:	f7ff ff5c 	bl	800a434 <prvInsertTimerInActiveList>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d069      	beq.n	800a656 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a588:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d05e      	beq.n	800a656 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	441a      	add	r2, r3
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5aa:	f7ff fe05 	bl	800a1b8 <xTimerGenericCommand>
 800a5ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d14f      	bne.n	800a656 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	61bb      	str	r3, [r7, #24]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a5de:	e03a      	b.n	800a656 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	617b      	str	r3, [r7, #20]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	18d1      	adds	r1, r2, r3
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a624:	f7ff ff06 	bl	800a434 <prvInsertTimerInActiveList>
					break;
 800a628:	e015      	b.n	800a656 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63a:	f000 fc01 	bl	800ae40 <vPortFree>
 800a63e:	e00a      	b.n	800a656 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a646:	f023 0301 	bic.w	r3, r3, #1
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a652:	e000      	b.n	800a656 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <prvProcessReceivedCommands+0x1c0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	1d39      	adds	r1, r7, #4
 800a65c:	2200      	movs	r2, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe fae0 	bl	8008c24 <xQueueReceive>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	f47f af2a 	bne.w	800a4c0 <prvProcessReceivedCommands+0x8>
	}
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	3730      	adds	r7, #48	; 0x30
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200010f0 	.word	0x200010f0

0800a67c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a682:	e048      	b.n	800a716 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68e:	4b2b      	ldr	r3, [pc, #172]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd ffbf 	bl	8008620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02e      	beq.n	800a716 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4413      	add	r3, r2
 800a6c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d90e      	bls.n	800a6e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6d6:	4b19      	ldr	r3, [pc, #100]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7fd ff64 	bl	80085ae <vListInsert>
 800a6e6:	e016      	b.n	800a716 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7ff fd60 	bl	800a1b8 <xTimerGenericCommand>
 800a6f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	603b      	str	r3, [r7, #0]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1b1      	bne.n	800a684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a726:	4b06      	ldr	r3, [pc, #24]	; (800a740 <prvSwitchTimerLists+0xc4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a04      	ldr	r2, [pc, #16]	; (800a73c <prvSwitchTimerLists+0xc0>)
 800a72c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <prvSwitchTimerLists+0xc4>)
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	6013      	str	r3, [r2, #0]
}
 800a734:	bf00      	nop
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	200010e8 	.word	0x200010e8
 800a740:	200010ec 	.word	0x200010ec

0800a744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a74a:	f000 f98b 	bl	800aa64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a74e:	4b15      	ldr	r3, [pc, #84]	; (800a7a4 <prvCheckForValidListAndQueue+0x60>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d120      	bne.n	800a798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a756:	4814      	ldr	r0, [pc, #80]	; (800a7a8 <prvCheckForValidListAndQueue+0x64>)
 800a758:	f7fd fed8 	bl	800850c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a75c:	4813      	ldr	r0, [pc, #76]	; (800a7ac <prvCheckForValidListAndQueue+0x68>)
 800a75e:	f7fd fed5 	bl	800850c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <prvCheckForValidListAndQueue+0x6c>)
 800a764:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <prvCheckForValidListAndQueue+0x64>)
 800a766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a768:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <prvCheckForValidListAndQueue+0x70>)
 800a76a:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <prvCheckForValidListAndQueue+0x68>)
 800a76c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a76e:	2300      	movs	r3, #0
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	4b11      	ldr	r3, [pc, #68]	; (800a7b8 <prvCheckForValidListAndQueue+0x74>)
 800a774:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <prvCheckForValidListAndQueue+0x78>)
 800a776:	2110      	movs	r1, #16
 800a778:	200a      	movs	r0, #10
 800a77a:	f7fd ffe3 	bl	8008744 <xQueueGenericCreateStatic>
 800a77e:	4603      	mov	r3, r0
 800a780:	4a08      	ldr	r2, [pc, #32]	; (800a7a4 <prvCheckForValidListAndQueue+0x60>)
 800a782:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a784:	4b07      	ldr	r3, [pc, #28]	; (800a7a4 <prvCheckForValidListAndQueue+0x60>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d005      	beq.n	800a798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <prvCheckForValidListAndQueue+0x60>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	490b      	ldr	r1, [pc, #44]	; (800a7c0 <prvCheckForValidListAndQueue+0x7c>)
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fcb6 	bl	8009104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a798:	f000 f994 	bl	800aac4 <vPortExitCritical>
}
 800a79c:	bf00      	nop
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200010f0 	.word	0x200010f0
 800a7a8:	200010c0 	.word	0x200010c0
 800a7ac:	200010d4 	.word	0x200010d4
 800a7b0:	200010e8 	.word	0x200010e8
 800a7b4:	200010ec 	.word	0x200010ec
 800a7b8:	2000119c 	.word	0x2000119c
 800a7bc:	200010fc 	.word	0x200010fc
 800a7c0:	0800c4f0 	.word	0x0800c4f0

0800a7c4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	; 0x28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a7d2:	f06f 0301 	mvn.w	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <xTimerPendFunctionCallFromISR+0x3c>)
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	f107 0114 	add.w	r1, r7, #20
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	f7fe f97c 	bl	8008aec <xQueueGenericSendFromISR>
 800a7f4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3728      	adds	r7, #40	; 0x28
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	200010f0 	.word	0x200010f0

0800a804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3b04      	subs	r3, #4
 800a814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3b04      	subs	r3, #4
 800a822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f023 0201 	bic.w	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3b04      	subs	r3, #4
 800a832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a834:	4a0c      	ldr	r2, [pc, #48]	; (800a868 <pxPortInitialiseStack+0x64>)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3b14      	subs	r3, #20
 800a83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b04      	subs	r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f06f 0202 	mvn.w	r2, #2
 800a852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3b20      	subs	r3, #32
 800a858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a85a:	68fb      	ldr	r3, [r7, #12]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	0800a86d 	.word	0x0800a86d

0800a86c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a876:	4b12      	ldr	r3, [pc, #72]	; (800a8c0 <prvTaskExitError+0x54>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87e:	d00a      	beq.n	800a896 <prvTaskExitError+0x2a>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <prvTaskExitError+0x28>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	60bb      	str	r3, [r7, #8]
}
 800a8a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8aa:	bf00      	nop
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0fc      	beq.n	800a8ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	20000030 	.word	0x20000030
	...

0800a8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <pxCurrentTCBConst2>)
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	6808      	ldr	r0, [r1, #0]
 800a8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	f380 8809 	msr	PSP, r0
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f04f 0000 	mov.w	r0, #0
 800a8e6:	f380 8811 	msr	BASEPRI, r0
 800a8ea:	4770      	bx	lr
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst2>:
 800a8f0:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8f8:	4808      	ldr	r0, [pc, #32]	; (800a91c <prvPortStartFirstTask+0x24>)
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	6800      	ldr	r0, [r0, #0]
 800a8fe:	f380 8808 	msr	MSP, r0
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8814 	msr	CONTROL, r0
 800a90a:	b662      	cpsie	i
 800a90c:	b661      	cpsie	f
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	df00      	svc	0
 800a918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a91a:	bf00      	nop
 800a91c:	e000ed08 	.word	0xe000ed08

0800a920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a926:	4b46      	ldr	r3, [pc, #280]	; (800aa40 <xPortStartScheduler+0x120>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a46      	ldr	r2, [pc, #280]	; (800aa44 <xPortStartScheduler+0x124>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d10a      	bne.n	800a946 <xPortStartScheduler+0x26>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	613b      	str	r3, [r7, #16]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a946:	4b3e      	ldr	r3, [pc, #248]	; (800aa40 <xPortStartScheduler+0x120>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a3f      	ldr	r2, [pc, #252]	; (800aa48 <xPortStartScheduler+0x128>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10a      	bne.n	800a966 <xPortStartScheduler+0x46>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	60fb      	str	r3, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a966:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <xPortStartScheduler+0x12c>)
 800a968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <xPortStartScheduler+0x130>)
 800a98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a98e:	4b31      	ldr	r3, [pc, #196]	; (800aa54 <xPortStartScheduler+0x134>)
 800a990:	2207      	movs	r2, #7
 800a992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a994:	e009      	b.n	800a9aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a996:	4b2f      	ldr	r3, [pc, #188]	; (800aa54 <xPortStartScheduler+0x134>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	4a2d      	ldr	r2, [pc, #180]	; (800aa54 <xPortStartScheduler+0x134>)
 800a99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d0ef      	beq.n	800a996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9b6:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1c3 0307 	rsb	r3, r3, #7
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d00a      	beq.n	800a9d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	60bb      	str	r3, [r7, #8]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9d8:	4b1e      	ldr	r3, [pc, #120]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	4a1d      	ldr	r2, [pc, #116]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9e2:	4b1c      	ldr	r3, [pc, #112]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9ea:	4a1a      	ldr	r2, [pc, #104]	; (800aa54 <xPortStartScheduler+0x134>)
 800a9ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9f6:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <xPortStartScheduler+0x138>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <xPortStartScheduler+0x138>)
 800a9fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa02:	4b15      	ldr	r3, [pc, #84]	; (800aa58 <xPortStartScheduler+0x138>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a14      	ldr	r2, [pc, #80]	; (800aa58 <xPortStartScheduler+0x138>)
 800aa08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa0e:	f000 f8dd 	bl	800abcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <xPortStartScheduler+0x13c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa18:	f000 f8fc 	bl	800ac14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xPortStartScheduler+0x140>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0f      	ldr	r2, [pc, #60]	; (800aa60 <xPortStartScheduler+0x140>)
 800aa22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa28:	f7ff ff66 	bl	800a8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa2c:	f7fe ff7a 	bl	8009924 <vTaskSwitchContext>
	prvTaskExitError();
 800aa30:	f7ff ff1c 	bl	800a86c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000ed00 	.word	0xe000ed00
 800aa44:	410fc271 	.word	0x410fc271
 800aa48:	410fc270 	.word	0x410fc270
 800aa4c:	e000e400 	.word	0xe000e400
 800aa50:	200011ec 	.word	0x200011ec
 800aa54:	200011f0 	.word	0x200011f0
 800aa58:	e000ed20 	.word	0xe000ed20
 800aa5c:	20000030 	.word	0x20000030
 800aa60:	e000ef34 	.word	0xe000ef34

0800aa64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	607b      	str	r3, [r7, #4]
}
 800aa7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa7e:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <vPortEnterCritical+0x58>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	4a0d      	ldr	r2, [pc, #52]	; (800aabc <vPortEnterCritical+0x58>)
 800aa86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <vPortEnterCritical+0x58>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d10f      	bne.n	800aab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <vPortEnterCritical+0x5c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	603b      	str	r3, [r7, #0]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vPortEnterCritical+0x4a>
	}
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	20000030 	.word	0x20000030
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaca:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <vPortExitCritical+0x50>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <vPortExitCritical+0x24>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	607b      	str	r3, [r7, #4]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aae8:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <vPortExitCritical+0x50>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	4a09      	ldr	r2, [pc, #36]	; (800ab14 <vPortExitCritical+0x50>)
 800aaf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <vPortExitCritical+0x50>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <vPortExitCritical+0x42>
 800aafa:	2300      	movs	r3, #0
 800aafc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f383 8811 	msr	BASEPRI, r3
}
 800ab04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000030 	.word	0x20000030
	...

0800ab20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab20:	f3ef 8009 	mrs	r0, PSP
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <pxCurrentTCBConst>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	f01e 0f10 	tst.w	lr, #16
 800ab30:	bf08      	it	eq
 800ab32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	6010      	str	r0, [r2, #0]
 800ab3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab44:	f380 8811 	msr	BASEPRI, r0
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f7fe fee8 	bl	8009924 <vTaskSwitchContext>
 800ab54:	f04f 0000 	mov.w	r0, #0
 800ab58:	f380 8811 	msr	BASEPRI, r0
 800ab5c:	bc09      	pop	{r0, r3}
 800ab5e:	6819      	ldr	r1, [r3, #0]
 800ab60:	6808      	ldr	r0, [r1, #0]
 800ab62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab66:	f01e 0f10 	tst.w	lr, #16
 800ab6a:	bf08      	it	eq
 800ab6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab70:	f380 8809 	msr	PSP, r0
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	f3af 8000 	nop.w

0800ab80 <pxCurrentTCBConst>:
 800ab80:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop

0800ab88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	607b      	str	r3, [r7, #4]
}
 800aba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aba2:	f7fe fe05 	bl	80097b0 <xTaskIncrementTick>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <xPortSysTickHandler+0x40>)
 800abae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	2300      	movs	r3, #0
 800abb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f383 8811 	msr	BASEPRI, r3
}
 800abbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <vPortSetupTimerInterrupt+0x34>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <vPortSetupTimerInterrupt+0x38>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <vPortSetupTimerInterrupt+0x3c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <vPortSetupTimerInterrupt+0x40>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	099b      	lsrs	r3, r3, #6
 800abe8:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <vPortSetupTimerInterrupt+0x44>)
 800abea:	3b01      	subs	r3, #1
 800abec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abee:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <vPortSetupTimerInterrupt+0x34>)
 800abf0:	2207      	movs	r2, #7
 800abf2:	601a      	str	r2, [r3, #0]
}
 800abf4:	bf00      	nop
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	e000e010 	.word	0xe000e010
 800ac04:	e000e018 	.word	0xe000e018
 800ac08:	20000024 	.word	0x20000024
 800ac0c:	10624dd3 	.word	0x10624dd3
 800ac10:	e000e014 	.word	0xe000e014

0800ac14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac24 <vPortEnableVFP+0x10>
 800ac18:	6801      	ldr	r1, [r0, #0]
 800ac1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac1e:	6001      	str	r1, [r0, #0]
 800ac20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac22:	bf00      	nop
 800ac24:	e000ed88 	.word	0xe000ed88

0800ac28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac2e:	f3ef 8305 	mrs	r3, IPSR
 800ac32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b0f      	cmp	r3, #15
 800ac38:	d914      	bls.n	800ac64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac3a:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <vPortValidateInterruptPriority+0x70>)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4413      	add	r3, r2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac44:	4b15      	ldr	r3, [pc, #84]	; (800ac9c <vPortValidateInterruptPriority+0x74>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	7afa      	ldrb	r2, [r7, #11]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d20a      	bcs.n	800ac64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	607b      	str	r3, [r7, #4]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <vPortValidateInterruptPriority+0x78>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <vPortValidateInterruptPriority+0x7c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d90a      	bls.n	800ac8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	603b      	str	r3, [r7, #0]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <vPortValidateInterruptPriority+0x60>
	}
 800ac8a:	bf00      	nop
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	e000e3f0 	.word	0xe000e3f0
 800ac9c:	200011ec 	.word	0x200011ec
 800aca0:	e000ed0c 	.word	0xe000ed0c
 800aca4:	200011f0 	.word	0x200011f0

0800aca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acb4:	f7fe fcc0 	bl	8009638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acb8:	4b5b      	ldr	r3, [pc, #364]	; (800ae28 <pvPortMalloc+0x180>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acc0:	f000 f920 	bl	800af04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acc4:	4b59      	ldr	r3, [pc, #356]	; (800ae2c <pvPortMalloc+0x184>)
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 8093 	bne.w	800adf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01d      	beq.n	800ad14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800acd8:	2208      	movs	r2, #8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d014      	beq.n	800ad14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	3308      	adds	r3, #8
 800acf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <pvPortMalloc+0x6c>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	617b      	str	r3, [r7, #20]
}
 800ad10:	bf00      	nop
 800ad12:	e7fe      	b.n	800ad12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d06e      	beq.n	800adf8 <pvPortMalloc+0x150>
 800ad1a:	4b45      	ldr	r3, [pc, #276]	; (800ae30 <pvPortMalloc+0x188>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d869      	bhi.n	800adf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad24:	4b43      	ldr	r3, [pc, #268]	; (800ae34 <pvPortMalloc+0x18c>)
 800ad26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad28:	4b42      	ldr	r3, [pc, #264]	; (800ae34 <pvPortMalloc+0x18c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad2e:	e004      	b.n	800ad3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <pvPortMalloc+0xa4>
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1f1      	bne.n	800ad30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad4c:	4b36      	ldr	r3, [pc, #216]	; (800ae28 <pvPortMalloc+0x180>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d050      	beq.n	800adf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	4413      	add	r3, r2
 800ad5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	2308      	movs	r3, #8
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d91f      	bls.n	800adb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <pvPortMalloc+0xf8>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	613b      	str	r3, [r7, #16]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	1ad2      	subs	r2, r2, r3
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adb2:	69b8      	ldr	r0, [r7, #24]
 800adb4:	f000 f908 	bl	800afc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adb8:	4b1d      	ldr	r3, [pc, #116]	; (800ae30 <pvPortMalloc+0x188>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	4a1b      	ldr	r2, [pc, #108]	; (800ae30 <pvPortMalloc+0x188>)
 800adc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adc6:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <pvPortMalloc+0x188>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b1b      	ldr	r3, [pc, #108]	; (800ae38 <pvPortMalloc+0x190>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d203      	bcs.n	800adda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800add2:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <pvPortMalloc+0x188>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a18      	ldr	r2, [pc, #96]	; (800ae38 <pvPortMalloc+0x190>)
 800add8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <pvPortMalloc+0x184>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800adee:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <pvPortMalloc+0x194>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	4a11      	ldr	r2, [pc, #68]	; (800ae3c <pvPortMalloc+0x194>)
 800adf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800adf8:	f7fe fc2c 	bl	8009654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <pvPortMalloc+0x174>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60fb      	str	r3, [r7, #12]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <pvPortMalloc+0x172>
	return pvReturn;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3728      	adds	r7, #40	; 0x28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20001db4 	.word	0x20001db4
 800ae2c:	20001dc8 	.word	0x20001dc8
 800ae30:	20001db8 	.word	0x20001db8
 800ae34:	20001dac 	.word	0x20001dac
 800ae38:	20001dbc 	.word	0x20001dbc
 800ae3c:	20001dc0 	.word	0x20001dc0

0800ae40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d04d      	beq.n	800aeee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae52:	2308      	movs	r3, #8
 800ae54:	425b      	negs	r3, r3
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4413      	add	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <vPortFree+0xb8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <vPortFree+0x44>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	60fb      	str	r3, [r7, #12]
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <vPortFree+0x62>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60bb      	str	r3, [r7, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <vPortFree+0xb8>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01e      	beq.n	800aeee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d11a      	bne.n	800aeee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <vPortFree+0xb8>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	43db      	mvns	r3, r3
 800aec2:	401a      	ands	r2, r3
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aec8:	f7fe fbb6 	bl	8009638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <vPortFree+0xbc>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4413      	add	r3, r2
 800aed6:	4a09      	ldr	r2, [pc, #36]	; (800aefc <vPortFree+0xbc>)
 800aed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aeda:	6938      	ldr	r0, [r7, #16]
 800aedc:	f000 f874 	bl	800afc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <vPortFree+0xc0>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3301      	adds	r3, #1
 800aee6:	4a06      	ldr	r2, [pc, #24]	; (800af00 <vPortFree+0xc0>)
 800aee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aeea:	f7fe fbb3 	bl	8009654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aeee:	bf00      	nop
 800aef0:	3718      	adds	r7, #24
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20001dc8 	.word	0x20001dc8
 800aefc:	20001db8 	.word	0x20001db8
 800af00:	20001dc4 	.word	0x20001dc4

0800af04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800af0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af10:	4b27      	ldr	r3, [pc, #156]	; (800afb0 <prvHeapInit+0xac>)
 800af12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00c      	beq.n	800af38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3307      	adds	r3, #7
 800af22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0307 	bic.w	r3, r3, #7
 800af2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	4a1f      	ldr	r2, [pc, #124]	; (800afb0 <prvHeapInit+0xac>)
 800af34:	4413      	add	r3, r2
 800af36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af3c:	4a1d      	ldr	r2, [pc, #116]	; (800afb4 <prvHeapInit+0xb0>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af42:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <prvHeapInit+0xb0>)
 800af44:	2200      	movs	r2, #0
 800af46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	4413      	add	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af50:	2208      	movs	r2, #8
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 0307 	bic.w	r3, r3, #7
 800af5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a15      	ldr	r2, [pc, #84]	; (800afb8 <prvHeapInit+0xb4>)
 800af64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <prvHeapInit+0xb4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <prvHeapInit+0xb4>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	1ad2      	subs	r2, r2, r3
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af84:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <prvHeapInit+0xb4>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <prvHeapInit+0xb8>)
 800af92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <prvHeapInit+0xbc>)
 800af9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <prvHeapInit+0xc0>)
 800af9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afa2:	601a      	str	r2, [r3, #0]
}
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	200011f4 	.word	0x200011f4
 800afb4:	20001dac 	.word	0x20001dac
 800afb8:	20001db4 	.word	0x20001db4
 800afbc:	20001dbc 	.word	0x20001dbc
 800afc0:	20001db8 	.word	0x20001db8
 800afc4:	20001dc8 	.word	0x20001dc8

0800afc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <prvInsertBlockIntoFreeList+0xac>)
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e002      	b.n	800afdc <prvInsertBlockIntoFreeList+0x14>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d8f7      	bhi.n	800afd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	4413      	add	r3, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d108      	bne.n	800b00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	441a      	add	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	441a      	add	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d118      	bne.n	800b050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4b15      	ldr	r3, [pc, #84]	; (800b078 <prvInsertBlockIntoFreeList+0xb0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d00d      	beq.n	800b046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	441a      	add	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	e008      	b.n	800b058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <prvInsertBlockIntoFreeList+0xb0>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	e003      	b.n	800b058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d002      	beq.n	800b066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20001dac 	.word	0x20001dac
 800b078:	20001db4 	.word	0x20001db4

0800b07c <__errno>:
 800b07c:	4b01      	ldr	r3, [pc, #4]	; (800b084 <__errno+0x8>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20000034 	.word	0x20000034

0800b088 <__libc_init_array>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	4d0d      	ldr	r5, [pc, #52]	; (800b0c0 <__libc_init_array+0x38>)
 800b08c:	4c0d      	ldr	r4, [pc, #52]	; (800b0c4 <__libc_init_array+0x3c>)
 800b08e:	1b64      	subs	r4, r4, r5
 800b090:	10a4      	asrs	r4, r4, #2
 800b092:	2600      	movs	r6, #0
 800b094:	42a6      	cmp	r6, r4
 800b096:	d109      	bne.n	800b0ac <__libc_init_array+0x24>
 800b098:	4d0b      	ldr	r5, [pc, #44]	; (800b0c8 <__libc_init_array+0x40>)
 800b09a:	4c0c      	ldr	r4, [pc, #48]	; (800b0cc <__libc_init_array+0x44>)
 800b09c:	f001 f9ba 	bl	800c414 <_init>
 800b0a0:	1b64      	subs	r4, r4, r5
 800b0a2:	10a4      	asrs	r4, r4, #2
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	42a6      	cmp	r6, r4
 800b0a8:	d105      	bne.n	800b0b6 <__libc_init_array+0x2e>
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b0:	4798      	blx	r3
 800b0b2:	3601      	adds	r6, #1
 800b0b4:	e7ee      	b.n	800b094 <__libc_init_array+0xc>
 800b0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ba:	4798      	blx	r3
 800b0bc:	3601      	adds	r6, #1
 800b0be:	e7f2      	b.n	800b0a6 <__libc_init_array+0x1e>
 800b0c0:	0800db68 	.word	0x0800db68
 800b0c4:	0800db68 	.word	0x0800db68
 800b0c8:	0800db68 	.word	0x0800db68
 800b0cc:	0800db6c 	.word	0x0800db6c

0800b0d0 <memcpy>:
 800b0d0:	440a      	add	r2, r1
 800b0d2:	4291      	cmp	r1, r2
 800b0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0d8:	d100      	bne.n	800b0dc <memcpy+0xc>
 800b0da:	4770      	bx	lr
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0e6:	4291      	cmp	r1, r2
 800b0e8:	d1f9      	bne.n	800b0de <memcpy+0xe>
 800b0ea:	bd10      	pop	{r4, pc}

0800b0ec <memset>:
 800b0ec:	4402      	add	r2, r0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d100      	bne.n	800b0f6 <memset+0xa>
 800b0f4:	4770      	bx	lr
 800b0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fa:	e7f9      	b.n	800b0f0 <memset+0x4>
 800b0fc:	0000      	movs	r0, r0
	...

0800b100 <atan>:
 800b100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	ec55 4b10 	vmov	r4, r5, d0
 800b108:	4bc3      	ldr	r3, [pc, #780]	; (800b418 <atan+0x318>)
 800b10a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b10e:	429e      	cmp	r6, r3
 800b110:	46ab      	mov	fp, r5
 800b112:	dd18      	ble.n	800b146 <atan+0x46>
 800b114:	4bc1      	ldr	r3, [pc, #772]	; (800b41c <atan+0x31c>)
 800b116:	429e      	cmp	r6, r3
 800b118:	dc01      	bgt.n	800b11e <atan+0x1e>
 800b11a:	d109      	bne.n	800b130 <atan+0x30>
 800b11c:	b144      	cbz	r4, 800b130 <atan+0x30>
 800b11e:	4622      	mov	r2, r4
 800b120:	462b      	mov	r3, r5
 800b122:	4620      	mov	r0, r4
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 f859 	bl	80001dc <__adddf3>
 800b12a:	4604      	mov	r4, r0
 800b12c:	460d      	mov	r5, r1
 800b12e:	e006      	b.n	800b13e <atan+0x3e>
 800b130:	f1bb 0f00 	cmp.w	fp, #0
 800b134:	f300 8131 	bgt.w	800b39a <atan+0x29a>
 800b138:	a59b      	add	r5, pc, #620	; (adr r5, 800b3a8 <atan+0x2a8>)
 800b13a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b13e:	ec45 4b10 	vmov	d0, r4, r5
 800b142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	4bb6      	ldr	r3, [pc, #728]	; (800b420 <atan+0x320>)
 800b148:	429e      	cmp	r6, r3
 800b14a:	dc14      	bgt.n	800b176 <atan+0x76>
 800b14c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b150:	429e      	cmp	r6, r3
 800b152:	dc0d      	bgt.n	800b170 <atan+0x70>
 800b154:	a396      	add	r3, pc, #600	; (adr r3, 800b3b0 <atan+0x2b0>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	ee10 0a10 	vmov	r0, s0
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 f83c 	bl	80001dc <__adddf3>
 800b164:	4baf      	ldr	r3, [pc, #700]	; (800b424 <atan+0x324>)
 800b166:	2200      	movs	r2, #0
 800b168:	f7f5 fc7e 	bl	8000a68 <__aeabi_dcmpgt>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d1e6      	bne.n	800b13e <atan+0x3e>
 800b170:	f04f 3aff 	mov.w	sl, #4294967295
 800b174:	e02b      	b.n	800b1ce <atan+0xce>
 800b176:	f000 f963 	bl	800b440 <fabs>
 800b17a:	4bab      	ldr	r3, [pc, #684]	; (800b428 <atan+0x328>)
 800b17c:	429e      	cmp	r6, r3
 800b17e:	ec55 4b10 	vmov	r4, r5, d0
 800b182:	f300 80bf 	bgt.w	800b304 <atan+0x204>
 800b186:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b18a:	429e      	cmp	r6, r3
 800b18c:	f300 80a0 	bgt.w	800b2d0 <atan+0x1d0>
 800b190:	ee10 2a10 	vmov	r2, s0
 800b194:	ee10 0a10 	vmov	r0, s0
 800b198:	462b      	mov	r3, r5
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 f81e 	bl	80001dc <__adddf3>
 800b1a0:	4ba0      	ldr	r3, [pc, #640]	; (800b424 <atan+0x324>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f7f5 f818 	bl	80001d8 <__aeabi_dsub>
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 f811 	bl	80001dc <__adddf3>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 faeb 	bl	800079c <__aeabi_ddiv>
 800b1c6:	f04f 0a00 	mov.w	sl, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f7f5 f9b7 	bl	8000548 <__aeabi_dmul>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4680      	mov	r8, r0
 800b1e0:	4689      	mov	r9, r1
 800b1e2:	f7f5 f9b1 	bl	8000548 <__aeabi_dmul>
 800b1e6:	a374      	add	r3, pc, #464	; (adr r3, 800b3b8 <atan+0x2b8>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	460f      	mov	r7, r1
 800b1f0:	f7f5 f9aa 	bl	8000548 <__aeabi_dmul>
 800b1f4:	a372      	add	r3, pc, #456	; (adr r3, 800b3c0 <atan+0x2c0>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f7f4 ffef 	bl	80001dc <__adddf3>
 800b1fe:	4632      	mov	r2, r6
 800b200:	463b      	mov	r3, r7
 800b202:	f7f5 f9a1 	bl	8000548 <__aeabi_dmul>
 800b206:	a370      	add	r3, pc, #448	; (adr r3, 800b3c8 <atan+0x2c8>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f4 ffe6 	bl	80001dc <__adddf3>
 800b210:	4632      	mov	r2, r6
 800b212:	463b      	mov	r3, r7
 800b214:	f7f5 f998 	bl	8000548 <__aeabi_dmul>
 800b218:	a36d      	add	r3, pc, #436	; (adr r3, 800b3d0 <atan+0x2d0>)
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	f7f4 ffdd 	bl	80001dc <__adddf3>
 800b222:	4632      	mov	r2, r6
 800b224:	463b      	mov	r3, r7
 800b226:	f7f5 f98f 	bl	8000548 <__aeabi_dmul>
 800b22a:	a36b      	add	r3, pc, #428	; (adr r3, 800b3d8 <atan+0x2d8>)
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	f7f4 ffd4 	bl	80001dc <__adddf3>
 800b234:	4632      	mov	r2, r6
 800b236:	463b      	mov	r3, r7
 800b238:	f7f5 f986 	bl	8000548 <__aeabi_dmul>
 800b23c:	a368      	add	r3, pc, #416	; (adr r3, 800b3e0 <atan+0x2e0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f4 ffcb 	bl	80001dc <__adddf3>
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	f7f5 f97d 	bl	8000548 <__aeabi_dmul>
 800b24e:	a366      	add	r3, pc, #408	; (adr r3, 800b3e8 <atan+0x2e8>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	4680      	mov	r8, r0
 800b256:	4689      	mov	r9, r1
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 f974 	bl	8000548 <__aeabi_dmul>
 800b260:	a363      	add	r3, pc, #396	; (adr r3, 800b3f0 <atan+0x2f0>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f4 ffb7 	bl	80001d8 <__aeabi_dsub>
 800b26a:	4632      	mov	r2, r6
 800b26c:	463b      	mov	r3, r7
 800b26e:	f7f5 f96b 	bl	8000548 <__aeabi_dmul>
 800b272:	a361      	add	r3, pc, #388	; (adr r3, 800b3f8 <atan+0x2f8>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f4 ffae 	bl	80001d8 <__aeabi_dsub>
 800b27c:	4632      	mov	r2, r6
 800b27e:	463b      	mov	r3, r7
 800b280:	f7f5 f962 	bl	8000548 <__aeabi_dmul>
 800b284:	a35e      	add	r3, pc, #376	; (adr r3, 800b400 <atan+0x300>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f4 ffa5 	bl	80001d8 <__aeabi_dsub>
 800b28e:	4632      	mov	r2, r6
 800b290:	463b      	mov	r3, r7
 800b292:	f7f5 f959 	bl	8000548 <__aeabi_dmul>
 800b296:	a35c      	add	r3, pc, #368	; (adr r3, 800b408 <atan+0x308>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f4 ff9c 	bl	80001d8 <__aeabi_dsub>
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	f7f5 f950 	bl	8000548 <__aeabi_dmul>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	f7f4 ff94 	bl	80001dc <__adddf3>
 800b2b4:	4622      	mov	r2, r4
 800b2b6:	462b      	mov	r3, r5
 800b2b8:	f7f5 f946 	bl	8000548 <__aeabi_dmul>
 800b2bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	d14b      	bne.n	800b35e <atan+0x25e>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ff85 	bl	80001d8 <__aeabi_dsub>
 800b2ce:	e72c      	b.n	800b12a <atan+0x2a>
 800b2d0:	ee10 0a10 	vmov	r0, s0
 800b2d4:	4b53      	ldr	r3, [pc, #332]	; (800b424 <atan+0x324>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4629      	mov	r1, r5
 800b2da:	f7f4 ff7d 	bl	80001d8 <__aeabi_dsub>
 800b2de:	4b51      	ldr	r3, [pc, #324]	; (800b424 <atan+0x324>)
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	460f      	mov	r7, r1
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f4 ff77 	bl	80001dc <__adddf3>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f7f5 fa51 	bl	800079c <__aeabi_ddiv>
 800b2fa:	f04f 0a01 	mov.w	sl, #1
 800b2fe:	4604      	mov	r4, r0
 800b300:	460d      	mov	r5, r1
 800b302:	e764      	b.n	800b1ce <atan+0xce>
 800b304:	4b49      	ldr	r3, [pc, #292]	; (800b42c <atan+0x32c>)
 800b306:	429e      	cmp	r6, r3
 800b308:	da1d      	bge.n	800b346 <atan+0x246>
 800b30a:	ee10 0a10 	vmov	r0, s0
 800b30e:	4b48      	ldr	r3, [pc, #288]	; (800b430 <atan+0x330>)
 800b310:	2200      	movs	r2, #0
 800b312:	4629      	mov	r1, r5
 800b314:	f7f4 ff60 	bl	80001d8 <__aeabi_dsub>
 800b318:	4b45      	ldr	r3, [pc, #276]	; (800b430 <atan+0x330>)
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	2200      	movs	r2, #0
 800b320:	4620      	mov	r0, r4
 800b322:	4629      	mov	r1, r5
 800b324:	f7f5 f910 	bl	8000548 <__aeabi_dmul>
 800b328:	4b3e      	ldr	r3, [pc, #248]	; (800b424 <atan+0x324>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	f7f4 ff56 	bl	80001dc <__adddf3>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4630      	mov	r0, r6
 800b336:	4639      	mov	r1, r7
 800b338:	f7f5 fa30 	bl	800079c <__aeabi_ddiv>
 800b33c:	f04f 0a02 	mov.w	sl, #2
 800b340:	4604      	mov	r4, r0
 800b342:	460d      	mov	r5, r1
 800b344:	e743      	b.n	800b1ce <atan+0xce>
 800b346:	462b      	mov	r3, r5
 800b348:	ee10 2a10 	vmov	r2, s0
 800b34c:	4939      	ldr	r1, [pc, #228]	; (800b434 <atan+0x334>)
 800b34e:	2000      	movs	r0, #0
 800b350:	f7f5 fa24 	bl	800079c <__aeabi_ddiv>
 800b354:	f04f 0a03 	mov.w	sl, #3
 800b358:	4604      	mov	r4, r0
 800b35a:	460d      	mov	r5, r1
 800b35c:	e737      	b.n	800b1ce <atan+0xce>
 800b35e:	4b36      	ldr	r3, [pc, #216]	; (800b438 <atan+0x338>)
 800b360:	4e36      	ldr	r6, [pc, #216]	; (800b43c <atan+0x33c>)
 800b362:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b366:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b36a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b36e:	f7f4 ff33 	bl	80001d8 <__aeabi_dsub>
 800b372:	4622      	mov	r2, r4
 800b374:	462b      	mov	r3, r5
 800b376:	f7f4 ff2f 	bl	80001d8 <__aeabi_dsub>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b382:	f7f4 ff29 	bl	80001d8 <__aeabi_dsub>
 800b386:	f1bb 0f00 	cmp.w	fp, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	460d      	mov	r5, r1
 800b38e:	f6bf aed6 	bge.w	800b13e <atan+0x3e>
 800b392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b396:	461d      	mov	r5, r3
 800b398:	e6d1      	b.n	800b13e <atan+0x3e>
 800b39a:	a51d      	add	r5, pc, #116	; (adr r5, 800b410 <atan+0x310>)
 800b39c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3a0:	e6cd      	b.n	800b13e <atan+0x3e>
 800b3a2:	bf00      	nop
 800b3a4:	f3af 8000 	nop.w
 800b3a8:	54442d18 	.word	0x54442d18
 800b3ac:	bff921fb 	.word	0xbff921fb
 800b3b0:	8800759c 	.word	0x8800759c
 800b3b4:	7e37e43c 	.word	0x7e37e43c
 800b3b8:	e322da11 	.word	0xe322da11
 800b3bc:	3f90ad3a 	.word	0x3f90ad3a
 800b3c0:	24760deb 	.word	0x24760deb
 800b3c4:	3fa97b4b 	.word	0x3fa97b4b
 800b3c8:	a0d03d51 	.word	0xa0d03d51
 800b3cc:	3fb10d66 	.word	0x3fb10d66
 800b3d0:	c54c206e 	.word	0xc54c206e
 800b3d4:	3fb745cd 	.word	0x3fb745cd
 800b3d8:	920083ff 	.word	0x920083ff
 800b3dc:	3fc24924 	.word	0x3fc24924
 800b3e0:	5555550d 	.word	0x5555550d
 800b3e4:	3fd55555 	.word	0x3fd55555
 800b3e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3ec:	bfa2b444 	.word	0xbfa2b444
 800b3f0:	52defd9a 	.word	0x52defd9a
 800b3f4:	3fadde2d 	.word	0x3fadde2d
 800b3f8:	af749a6d 	.word	0xaf749a6d
 800b3fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b400:	fe231671 	.word	0xfe231671
 800b404:	3fbc71c6 	.word	0x3fbc71c6
 800b408:	9998ebc4 	.word	0x9998ebc4
 800b40c:	3fc99999 	.word	0x3fc99999
 800b410:	54442d18 	.word	0x54442d18
 800b414:	3ff921fb 	.word	0x3ff921fb
 800b418:	440fffff 	.word	0x440fffff
 800b41c:	7ff00000 	.word	0x7ff00000
 800b420:	3fdbffff 	.word	0x3fdbffff
 800b424:	3ff00000 	.word	0x3ff00000
 800b428:	3ff2ffff 	.word	0x3ff2ffff
 800b42c:	40038000 	.word	0x40038000
 800b430:	3ff80000 	.word	0x3ff80000
 800b434:	bff00000 	.word	0xbff00000
 800b438:	0800daf8 	.word	0x0800daf8
 800b43c:	0800dad8 	.word	0x0800dad8

0800b440 <fabs>:
 800b440:	ec51 0b10 	vmov	r0, r1, d0
 800b444:	ee10 2a10 	vmov	r2, s0
 800b448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b44c:	ec43 2b10 	vmov	d0, r2, r3
 800b450:	4770      	bx	lr
	...

0800b454 <pow>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	ec59 8b10 	vmov	r8, r9, d0
 800b45c:	ec57 6b11 	vmov	r6, r7, d1
 800b460:	f000 f8da 	bl	800b618 <__ieee754_pow>
 800b464:	4b4e      	ldr	r3, [pc, #312]	; (800b5a0 <pow+0x14c>)
 800b466:	f993 3000 	ldrsb.w	r3, [r3]
 800b46a:	3301      	adds	r3, #1
 800b46c:	ec55 4b10 	vmov	r4, r5, d0
 800b470:	d015      	beq.n	800b49e <pow+0x4a>
 800b472:	4632      	mov	r2, r6
 800b474:	463b      	mov	r3, r7
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f5 faff 	bl	8000a7c <__aeabi_dcmpun>
 800b47e:	b970      	cbnz	r0, 800b49e <pow+0x4a>
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	4640      	mov	r0, r8
 800b486:	4649      	mov	r1, r9
 800b488:	f7f5 faf8 	bl	8000a7c <__aeabi_dcmpun>
 800b48c:	2200      	movs	r2, #0
 800b48e:	2300      	movs	r3, #0
 800b490:	b148      	cbz	r0, 800b4a6 <pow+0x52>
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 fabf 	bl	8000a18 <__aeabi_dcmpeq>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d17d      	bne.n	800b59a <pow+0x146>
 800b49e:	ec45 4b10 	vmov	d0, r4, r5
 800b4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f5 fab5 	bl	8000a18 <__aeabi_dcmpeq>
 800b4ae:	b1e0      	cbz	r0, 800b4ea <pow+0x96>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f7f5 faae 	bl	8000a18 <__aeabi_dcmpeq>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d16c      	bne.n	800b59a <pow+0x146>
 800b4c0:	ec47 6b10 	vmov	d0, r6, r7
 800b4c4:	f000 fe7e 	bl	800c1c4 <finite>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0e8      	beq.n	800b49e <pow+0x4a>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	f7f5 faaa 	bl	8000a2c <__aeabi_dcmplt>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d0e0      	beq.n	800b49e <pow+0x4a>
 800b4dc:	f7ff fdce 	bl	800b07c <__errno>
 800b4e0:	2321      	movs	r3, #33	; 0x21
 800b4e2:	6003      	str	r3, [r0, #0]
 800b4e4:	2400      	movs	r4, #0
 800b4e6:	4d2f      	ldr	r5, [pc, #188]	; (800b5a4 <pow+0x150>)
 800b4e8:	e7d9      	b.n	800b49e <pow+0x4a>
 800b4ea:	ec45 4b10 	vmov	d0, r4, r5
 800b4ee:	f000 fe69 	bl	800c1c4 <finite>
 800b4f2:	bbb8      	cbnz	r0, 800b564 <pow+0x110>
 800b4f4:	ec49 8b10 	vmov	d0, r8, r9
 800b4f8:	f000 fe64 	bl	800c1c4 <finite>
 800b4fc:	b390      	cbz	r0, 800b564 <pow+0x110>
 800b4fe:	ec47 6b10 	vmov	d0, r6, r7
 800b502:	f000 fe5f 	bl	800c1c4 <finite>
 800b506:	b368      	cbz	r0, 800b564 <pow+0x110>
 800b508:	4622      	mov	r2, r4
 800b50a:	462b      	mov	r3, r5
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 fab4 	bl	8000a7c <__aeabi_dcmpun>
 800b514:	b160      	cbz	r0, 800b530 <pow+0xdc>
 800b516:	f7ff fdb1 	bl	800b07c <__errno>
 800b51a:	2321      	movs	r3, #33	; 0x21
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	2200      	movs	r2, #0
 800b520:	2300      	movs	r3, #0
 800b522:	4610      	mov	r0, r2
 800b524:	4619      	mov	r1, r3
 800b526:	f7f5 f939 	bl	800079c <__aeabi_ddiv>
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	e7b6      	b.n	800b49e <pow+0x4a>
 800b530:	f7ff fda4 	bl	800b07c <__errno>
 800b534:	2322      	movs	r3, #34	; 0x22
 800b536:	6003      	str	r3, [r0, #0]
 800b538:	2200      	movs	r2, #0
 800b53a:	2300      	movs	r3, #0
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	f7f5 fa74 	bl	8000a2c <__aeabi_dcmplt>
 800b544:	2400      	movs	r4, #0
 800b546:	b158      	cbz	r0, 800b560 <pow+0x10c>
 800b548:	ec47 6b10 	vmov	d0, r6, r7
 800b54c:	f000 fe50 	bl	800c1f0 <rint>
 800b550:	4632      	mov	r2, r6
 800b552:	ec51 0b10 	vmov	r0, r1, d0
 800b556:	463b      	mov	r3, r7
 800b558:	f7f5 fa5e 	bl	8000a18 <__aeabi_dcmpeq>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0c2      	beq.n	800b4e6 <pow+0x92>
 800b560:	4d11      	ldr	r5, [pc, #68]	; (800b5a8 <pow+0x154>)
 800b562:	e79c      	b.n	800b49e <pow+0x4a>
 800b564:	2200      	movs	r2, #0
 800b566:	2300      	movs	r3, #0
 800b568:	4620      	mov	r0, r4
 800b56a:	4629      	mov	r1, r5
 800b56c:	f7f5 fa54 	bl	8000a18 <__aeabi_dcmpeq>
 800b570:	2800      	cmp	r0, #0
 800b572:	d094      	beq.n	800b49e <pow+0x4a>
 800b574:	ec49 8b10 	vmov	d0, r8, r9
 800b578:	f000 fe24 	bl	800c1c4 <finite>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d08e      	beq.n	800b49e <pow+0x4a>
 800b580:	ec47 6b10 	vmov	d0, r6, r7
 800b584:	f000 fe1e 	bl	800c1c4 <finite>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d088      	beq.n	800b49e <pow+0x4a>
 800b58c:	f7ff fd76 	bl	800b07c <__errno>
 800b590:	2322      	movs	r3, #34	; 0x22
 800b592:	6003      	str	r3, [r0, #0]
 800b594:	2400      	movs	r4, #0
 800b596:	2500      	movs	r5, #0
 800b598:	e781      	b.n	800b49e <pow+0x4a>
 800b59a:	4d04      	ldr	r5, [pc, #16]	; (800b5ac <pow+0x158>)
 800b59c:	2400      	movs	r4, #0
 800b59e:	e77e      	b.n	800b49e <pow+0x4a>
 800b5a0:	20000098 	.word	0x20000098
 800b5a4:	fff00000 	.word	0xfff00000
 800b5a8:	7ff00000 	.word	0x7ff00000
 800b5ac:	3ff00000 	.word	0x3ff00000

0800b5b0 <sqrt>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	ed2d 8b02 	vpush	{d8}
 800b5b6:	ec55 4b10 	vmov	r4, r5, d0
 800b5ba:	f000 fd4f 	bl	800c05c <__ieee754_sqrt>
 800b5be:	4b15      	ldr	r3, [pc, #84]	; (800b614 <sqrt+0x64>)
 800b5c0:	eeb0 8a40 	vmov.f32	s16, s0
 800b5c4:	eef0 8a60 	vmov.f32	s17, s1
 800b5c8:	f993 3000 	ldrsb.w	r3, [r3]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	d019      	beq.n	800b604 <sqrt+0x54>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7f5 fa50 	bl	8000a7c <__aeabi_dcmpun>
 800b5dc:	b990      	cbnz	r0, 800b604 <sqrt+0x54>
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7f5 fa21 	bl	8000a2c <__aeabi_dcmplt>
 800b5ea:	b158      	cbz	r0, 800b604 <sqrt+0x54>
 800b5ec:	f7ff fd46 	bl	800b07c <__errno>
 800b5f0:	2321      	movs	r3, #33	; 0x21
 800b5f2:	6003      	str	r3, [r0, #0]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f7f5 f8ce 	bl	800079c <__aeabi_ddiv>
 800b600:	ec41 0b18 	vmov	d8, r0, r1
 800b604:	eeb0 0a48 	vmov.f32	s0, s16
 800b608:	eef0 0a68 	vmov.f32	s1, s17
 800b60c:	ecbd 8b02 	vpop	{d8}
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	bf00      	nop
 800b614:	20000098 	.word	0x20000098

0800b618 <__ieee754_pow>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	ed2d 8b06 	vpush	{d8-d10}
 800b620:	b08d      	sub	sp, #52	; 0x34
 800b622:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b626:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b62a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b62e:	ea56 0100 	orrs.w	r1, r6, r0
 800b632:	ec53 2b10 	vmov	r2, r3, d0
 800b636:	f000 84d1 	beq.w	800bfdc <__ieee754_pow+0x9c4>
 800b63a:	497f      	ldr	r1, [pc, #508]	; (800b838 <__ieee754_pow+0x220>)
 800b63c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b640:	428c      	cmp	r4, r1
 800b642:	ee10 8a10 	vmov	r8, s0
 800b646:	4699      	mov	r9, r3
 800b648:	dc09      	bgt.n	800b65e <__ieee754_pow+0x46>
 800b64a:	d103      	bne.n	800b654 <__ieee754_pow+0x3c>
 800b64c:	b97a      	cbnz	r2, 800b66e <__ieee754_pow+0x56>
 800b64e:	42a6      	cmp	r6, r4
 800b650:	dd02      	ble.n	800b658 <__ieee754_pow+0x40>
 800b652:	e00c      	b.n	800b66e <__ieee754_pow+0x56>
 800b654:	428e      	cmp	r6, r1
 800b656:	dc02      	bgt.n	800b65e <__ieee754_pow+0x46>
 800b658:	428e      	cmp	r6, r1
 800b65a:	d110      	bne.n	800b67e <__ieee754_pow+0x66>
 800b65c:	b178      	cbz	r0, 800b67e <__ieee754_pow+0x66>
 800b65e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b662:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b666:	ea54 0308 	orrs.w	r3, r4, r8
 800b66a:	f000 84b7 	beq.w	800bfdc <__ieee754_pow+0x9c4>
 800b66e:	4873      	ldr	r0, [pc, #460]	; (800b83c <__ieee754_pow+0x224>)
 800b670:	b00d      	add	sp, #52	; 0x34
 800b672:	ecbd 8b06 	vpop	{d8-d10}
 800b676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	f000 bdb1 	b.w	800c1e0 <nan>
 800b67e:	f1b9 0f00 	cmp.w	r9, #0
 800b682:	da36      	bge.n	800b6f2 <__ieee754_pow+0xda>
 800b684:	496e      	ldr	r1, [pc, #440]	; (800b840 <__ieee754_pow+0x228>)
 800b686:	428e      	cmp	r6, r1
 800b688:	dc51      	bgt.n	800b72e <__ieee754_pow+0x116>
 800b68a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b68e:	428e      	cmp	r6, r1
 800b690:	f340 84af 	ble.w	800bff2 <__ieee754_pow+0x9da>
 800b694:	1531      	asrs	r1, r6, #20
 800b696:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b69a:	2914      	cmp	r1, #20
 800b69c:	dd0f      	ble.n	800b6be <__ieee754_pow+0xa6>
 800b69e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b6a2:	fa20 fc01 	lsr.w	ip, r0, r1
 800b6a6:	fa0c f101 	lsl.w	r1, ip, r1
 800b6aa:	4281      	cmp	r1, r0
 800b6ac:	f040 84a1 	bne.w	800bff2 <__ieee754_pow+0x9da>
 800b6b0:	f00c 0c01 	and.w	ip, ip, #1
 800b6b4:	f1cc 0102 	rsb	r1, ip, #2
 800b6b8:	9100      	str	r1, [sp, #0]
 800b6ba:	b180      	cbz	r0, 800b6de <__ieee754_pow+0xc6>
 800b6bc:	e059      	b.n	800b772 <__ieee754_pow+0x15a>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d155      	bne.n	800b76e <__ieee754_pow+0x156>
 800b6c2:	f1c1 0114 	rsb	r1, r1, #20
 800b6c6:	fa46 fc01 	asr.w	ip, r6, r1
 800b6ca:	fa0c f101 	lsl.w	r1, ip, r1
 800b6ce:	42b1      	cmp	r1, r6
 800b6d0:	f040 848c 	bne.w	800bfec <__ieee754_pow+0x9d4>
 800b6d4:	f00c 0c01 	and.w	ip, ip, #1
 800b6d8:	f1cc 0102 	rsb	r1, ip, #2
 800b6dc:	9100      	str	r1, [sp, #0]
 800b6de:	4959      	ldr	r1, [pc, #356]	; (800b844 <__ieee754_pow+0x22c>)
 800b6e0:	428e      	cmp	r6, r1
 800b6e2:	d12d      	bne.n	800b740 <__ieee754_pow+0x128>
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	da79      	bge.n	800b7dc <__ieee754_pow+0x1c4>
 800b6e8:	4956      	ldr	r1, [pc, #344]	; (800b844 <__ieee754_pow+0x22c>)
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f7f5 f856 	bl	800079c <__aeabi_ddiv>
 800b6f0:	e016      	b.n	800b720 <__ieee754_pow+0x108>
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	9100      	str	r1, [sp, #0]
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d13b      	bne.n	800b772 <__ieee754_pow+0x15a>
 800b6fa:	494f      	ldr	r1, [pc, #316]	; (800b838 <__ieee754_pow+0x220>)
 800b6fc:	428e      	cmp	r6, r1
 800b6fe:	d1ee      	bne.n	800b6de <__ieee754_pow+0xc6>
 800b700:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b704:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b708:	ea53 0308 	orrs.w	r3, r3, r8
 800b70c:	f000 8466 	beq.w	800bfdc <__ieee754_pow+0x9c4>
 800b710:	4b4d      	ldr	r3, [pc, #308]	; (800b848 <__ieee754_pow+0x230>)
 800b712:	429c      	cmp	r4, r3
 800b714:	dd0d      	ble.n	800b732 <__ieee754_pow+0x11a>
 800b716:	2f00      	cmp	r7, #0
 800b718:	f280 8464 	bge.w	800bfe4 <__ieee754_pow+0x9cc>
 800b71c:	2000      	movs	r0, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	ec41 0b10 	vmov	d0, r0, r1
 800b724:	b00d      	add	sp, #52	; 0x34
 800b726:	ecbd 8b06 	vpop	{d8-d10}
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72e:	2102      	movs	r1, #2
 800b730:	e7e0      	b.n	800b6f4 <__ieee754_pow+0xdc>
 800b732:	2f00      	cmp	r7, #0
 800b734:	daf2      	bge.n	800b71c <__ieee754_pow+0x104>
 800b736:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b73a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b73e:	e7ef      	b.n	800b720 <__ieee754_pow+0x108>
 800b740:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b744:	d104      	bne.n	800b750 <__ieee754_pow+0x138>
 800b746:	4610      	mov	r0, r2
 800b748:	4619      	mov	r1, r3
 800b74a:	f7f4 fefd 	bl	8000548 <__aeabi_dmul>
 800b74e:	e7e7      	b.n	800b720 <__ieee754_pow+0x108>
 800b750:	493e      	ldr	r1, [pc, #248]	; (800b84c <__ieee754_pow+0x234>)
 800b752:	428f      	cmp	r7, r1
 800b754:	d10d      	bne.n	800b772 <__ieee754_pow+0x15a>
 800b756:	f1b9 0f00 	cmp.w	r9, #0
 800b75a:	db0a      	blt.n	800b772 <__ieee754_pow+0x15a>
 800b75c:	ec43 2b10 	vmov	d0, r2, r3
 800b760:	b00d      	add	sp, #52	; 0x34
 800b762:	ecbd 8b06 	vpop	{d8-d10}
 800b766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f000 bc77 	b.w	800c05c <__ieee754_sqrt>
 800b76e:	2100      	movs	r1, #0
 800b770:	9100      	str	r1, [sp, #0]
 800b772:	ec43 2b10 	vmov	d0, r2, r3
 800b776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b77a:	f7ff fe61 	bl	800b440 <fabs>
 800b77e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b782:	ec51 0b10 	vmov	r0, r1, d0
 800b786:	f1b8 0f00 	cmp.w	r8, #0
 800b78a:	d12a      	bne.n	800b7e2 <__ieee754_pow+0x1ca>
 800b78c:	b12c      	cbz	r4, 800b79a <__ieee754_pow+0x182>
 800b78e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b844 <__ieee754_pow+0x22c>
 800b792:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b796:	45e6      	cmp	lr, ip
 800b798:	d123      	bne.n	800b7e2 <__ieee754_pow+0x1ca>
 800b79a:	2f00      	cmp	r7, #0
 800b79c:	da05      	bge.n	800b7aa <__ieee754_pow+0x192>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	4927      	ldr	r1, [pc, #156]	; (800b844 <__ieee754_pow+0x22c>)
 800b7a6:	f7f4 fff9 	bl	800079c <__aeabi_ddiv>
 800b7aa:	f1b9 0f00 	cmp.w	r9, #0
 800b7ae:	dab7      	bge.n	800b720 <__ieee754_pow+0x108>
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b7b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b7ba:	4323      	orrs	r3, r4
 800b7bc:	d108      	bne.n	800b7d0 <__ieee754_pow+0x1b8>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	f7f4 fd07 	bl	80001d8 <__aeabi_dsub>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	e78d      	b.n	800b6ec <__ieee754_pow+0xd4>
 800b7d0:	9b00      	ldr	r3, [sp, #0]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d1a4      	bne.n	800b720 <__ieee754_pow+0x108>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4619      	mov	r1, r3
 800b7e0:	e79e      	b.n	800b720 <__ieee754_pow+0x108>
 800b7e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b7e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b7ea:	950a      	str	r5, [sp, #40]	; 0x28
 800b7ec:	9d00      	ldr	r5, [sp, #0]
 800b7ee:	46ac      	mov	ip, r5
 800b7f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7f2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b7f6:	d0e4      	beq.n	800b7c2 <__ieee754_pow+0x1aa>
 800b7f8:	4b15      	ldr	r3, [pc, #84]	; (800b850 <__ieee754_pow+0x238>)
 800b7fa:	429e      	cmp	r6, r3
 800b7fc:	f340 80fc 	ble.w	800b9f8 <__ieee754_pow+0x3e0>
 800b800:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b804:	429e      	cmp	r6, r3
 800b806:	4b10      	ldr	r3, [pc, #64]	; (800b848 <__ieee754_pow+0x230>)
 800b808:	dd07      	ble.n	800b81a <__ieee754_pow+0x202>
 800b80a:	429c      	cmp	r4, r3
 800b80c:	dc0a      	bgt.n	800b824 <__ieee754_pow+0x20c>
 800b80e:	2f00      	cmp	r7, #0
 800b810:	da84      	bge.n	800b71c <__ieee754_pow+0x104>
 800b812:	a307      	add	r3, pc, #28	; (adr r3, 800b830 <__ieee754_pow+0x218>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	e795      	b.n	800b746 <__ieee754_pow+0x12e>
 800b81a:	429c      	cmp	r4, r3
 800b81c:	dbf7      	blt.n	800b80e <__ieee754_pow+0x1f6>
 800b81e:	4b09      	ldr	r3, [pc, #36]	; (800b844 <__ieee754_pow+0x22c>)
 800b820:	429c      	cmp	r4, r3
 800b822:	dd17      	ble.n	800b854 <__ieee754_pow+0x23c>
 800b824:	2f00      	cmp	r7, #0
 800b826:	dcf4      	bgt.n	800b812 <__ieee754_pow+0x1fa>
 800b828:	e778      	b.n	800b71c <__ieee754_pow+0x104>
 800b82a:	bf00      	nop
 800b82c:	f3af 8000 	nop.w
 800b830:	8800759c 	.word	0x8800759c
 800b834:	7e37e43c 	.word	0x7e37e43c
 800b838:	7ff00000 	.word	0x7ff00000
 800b83c:	0800db18 	.word	0x0800db18
 800b840:	433fffff 	.word	0x433fffff
 800b844:	3ff00000 	.word	0x3ff00000
 800b848:	3fefffff 	.word	0x3fefffff
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	41e00000 	.word	0x41e00000
 800b854:	4b64      	ldr	r3, [pc, #400]	; (800b9e8 <__ieee754_pow+0x3d0>)
 800b856:	2200      	movs	r2, #0
 800b858:	f7f4 fcbe 	bl	80001d8 <__aeabi_dsub>
 800b85c:	a356      	add	r3, pc, #344	; (adr r3, 800b9b8 <__ieee754_pow+0x3a0>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	4604      	mov	r4, r0
 800b864:	460d      	mov	r5, r1
 800b866:	f7f4 fe6f 	bl	8000548 <__aeabi_dmul>
 800b86a:	a355      	add	r3, pc, #340	; (adr r3, 800b9c0 <__ieee754_pow+0x3a8>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	f7f4 fe66 	bl	8000548 <__aeabi_dmul>
 800b87c:	4b5b      	ldr	r3, [pc, #364]	; (800b9ec <__ieee754_pow+0x3d4>)
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	2200      	movs	r2, #0
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fe5e 	bl	8000548 <__aeabi_dmul>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	a14d      	add	r1, pc, #308	; (adr r1, 800b9c8 <__ieee754_pow+0x3b0>)
 800b892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b896:	f7f4 fc9f 	bl	80001d8 <__aeabi_dsub>
 800b89a:	4622      	mov	r2, r4
 800b89c:	462b      	mov	r3, r5
 800b89e:	f7f4 fe53 	bl	8000548 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	4951      	ldr	r1, [pc, #324]	; (800b9f0 <__ieee754_pow+0x3d8>)
 800b8aa:	f7f4 fc95 	bl	80001d8 <__aeabi_dsub>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f4 fe45 	bl	8000548 <__aeabi_dmul>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	f7f4 fe3f 	bl	8000548 <__aeabi_dmul>
 800b8ca:	a341      	add	r3, pc, #260	; (adr r3, 800b9d0 <__ieee754_pow+0x3b8>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fe3a 	bl	8000548 <__aeabi_dmul>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	f7f4 fc7c 	bl	80001d8 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fc76 	bl	80001dc <__adddf3>
 800b8f0:	2400      	movs	r4, #0
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	460d      	mov	r5, r1
 800b8fa:	f7f4 fc6d 	bl	80001d8 <__aeabi_dsub>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4640      	mov	r0, r8
 800b904:	4649      	mov	r1, r9
 800b906:	f7f4 fc67 	bl	80001d8 <__aeabi_dsub>
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b90e:	3b01      	subs	r3, #1
 800b910:	4313      	orrs	r3, r2
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	f040 81f1 	bne.w	800bcfc <__ieee754_pow+0x6e4>
 800b91a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b9d8 <__ieee754_pow+0x3c0>
 800b91e:	eeb0 8a47 	vmov.f32	s16, s14
 800b922:	eef0 8a67 	vmov.f32	s17, s15
 800b926:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b92a:	2600      	movs	r6, #0
 800b92c:	4632      	mov	r2, r6
 800b92e:	463b      	mov	r3, r7
 800b930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b934:	f7f4 fc50 	bl	80001d8 <__aeabi_dsub>
 800b938:	4622      	mov	r2, r4
 800b93a:	462b      	mov	r3, r5
 800b93c:	f7f4 fe04 	bl	8000548 <__aeabi_dmul>
 800b940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b944:	4680      	mov	r8, r0
 800b946:	4689      	mov	r9, r1
 800b948:	4650      	mov	r0, sl
 800b94a:	4659      	mov	r1, fp
 800b94c:	f7f4 fdfc 	bl	8000548 <__aeabi_dmul>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4640      	mov	r0, r8
 800b956:	4649      	mov	r1, r9
 800b958:	f7f4 fc40 	bl	80001dc <__adddf3>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	4680      	mov	r8, r0
 800b962:	4689      	mov	r9, r1
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f4 fdee 	bl	8000548 <__aeabi_dmul>
 800b96c:	460b      	mov	r3, r1
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	4602      	mov	r2, r0
 800b974:	4649      	mov	r1, r9
 800b976:	4640      	mov	r0, r8
 800b978:	f7f4 fc30 	bl	80001dc <__adddf3>
 800b97c:	4b1d      	ldr	r3, [pc, #116]	; (800b9f4 <__ieee754_pow+0x3dc>)
 800b97e:	4299      	cmp	r1, r3
 800b980:	ec45 4b19 	vmov	d9, r4, r5
 800b984:	4606      	mov	r6, r0
 800b986:	460f      	mov	r7, r1
 800b988:	468b      	mov	fp, r1
 800b98a:	f340 82fe 	ble.w	800bf8a <__ieee754_pow+0x972>
 800b98e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b992:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b996:	4303      	orrs	r3, r0
 800b998:	f000 81f0 	beq.w	800bd7c <__ieee754_pow+0x764>
 800b99c:	a310      	add	r3, pc, #64	; (adr r3, 800b9e0 <__ieee754_pow+0x3c8>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	ec51 0b18 	vmov	r0, r1, d8
 800b9a6:	f7f4 fdcf 	bl	8000548 <__aeabi_dmul>
 800b9aa:	a30d      	add	r3, pc, #52	; (adr r3, 800b9e0 <__ieee754_pow+0x3c8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	e6cb      	b.n	800b74a <__ieee754_pow+0x132>
 800b9b2:	bf00      	nop
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	60000000 	.word	0x60000000
 800b9bc:	3ff71547 	.word	0x3ff71547
 800b9c0:	f85ddf44 	.word	0xf85ddf44
 800b9c4:	3e54ae0b 	.word	0x3e54ae0b
 800b9c8:	55555555 	.word	0x55555555
 800b9cc:	3fd55555 	.word	0x3fd55555
 800b9d0:	652b82fe 	.word	0x652b82fe
 800b9d4:	3ff71547 	.word	0x3ff71547
 800b9d8:	00000000 	.word	0x00000000
 800b9dc:	bff00000 	.word	0xbff00000
 800b9e0:	8800759c 	.word	0x8800759c
 800b9e4:	7e37e43c 	.word	0x7e37e43c
 800b9e8:	3ff00000 	.word	0x3ff00000
 800b9ec:	3fd00000 	.word	0x3fd00000
 800b9f0:	3fe00000 	.word	0x3fe00000
 800b9f4:	408fffff 	.word	0x408fffff
 800b9f8:	4bd7      	ldr	r3, [pc, #860]	; (800bd58 <__ieee754_pow+0x740>)
 800b9fa:	ea03 0309 	and.w	r3, r3, r9
 800b9fe:	2200      	movs	r2, #0
 800ba00:	b92b      	cbnz	r3, 800ba0e <__ieee754_pow+0x3f6>
 800ba02:	4bd6      	ldr	r3, [pc, #856]	; (800bd5c <__ieee754_pow+0x744>)
 800ba04:	f7f4 fda0 	bl	8000548 <__aeabi_dmul>
 800ba08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	1523      	asrs	r3, r4, #20
 800ba10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba14:	4413      	add	r3, r2
 800ba16:	9309      	str	r3, [sp, #36]	; 0x24
 800ba18:	4bd1      	ldr	r3, [pc, #836]	; (800bd60 <__ieee754_pow+0x748>)
 800ba1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba22:	429c      	cmp	r4, r3
 800ba24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba28:	dd08      	ble.n	800ba3c <__ieee754_pow+0x424>
 800ba2a:	4bce      	ldr	r3, [pc, #824]	; (800bd64 <__ieee754_pow+0x74c>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	f340 8163 	ble.w	800bcf8 <__ieee754_pow+0x6e0>
 800ba32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba34:	3301      	adds	r3, #1
 800ba36:	9309      	str	r3, [sp, #36]	; 0x24
 800ba38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ba3c:	2400      	movs	r4, #0
 800ba3e:	00e3      	lsls	r3, r4, #3
 800ba40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba42:	4bc9      	ldr	r3, [pc, #804]	; (800bd68 <__ieee754_pow+0x750>)
 800ba44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba48:	ed93 7b00 	vldr	d7, [r3]
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	ec53 2b17 	vmov	r2, r3, d7
 800ba52:	eeb0 8a47 	vmov.f32	s16, s14
 800ba56:	eef0 8a67 	vmov.f32	s17, s15
 800ba5a:	4682      	mov	sl, r0
 800ba5c:	f7f4 fbbc 	bl	80001d8 <__aeabi_dsub>
 800ba60:	4652      	mov	r2, sl
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	462b      	mov	r3, r5
 800ba68:	ec51 0b18 	vmov	r0, r1, d8
 800ba6c:	f7f4 fbb6 	bl	80001dc <__adddf3>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	2000      	movs	r0, #0
 800ba76:	49bd      	ldr	r1, [pc, #756]	; (800bd6c <__ieee754_pow+0x754>)
 800ba78:	f7f4 fe90 	bl	800079c <__aeabi_ddiv>
 800ba7c:	ec41 0b19 	vmov	d9, r0, r1
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f4 fd5e 	bl	8000548 <__aeabi_dmul>
 800ba8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800baa0:	46ab      	mov	fp, r5
 800baa2:	106d      	asrs	r5, r5, #1
 800baa4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800baa8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800baac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bab0:	2200      	movs	r2, #0
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	4614      	mov	r4, r2
 800bab8:	461d      	mov	r5, r3
 800baba:	f7f4 fd45 	bl	8000548 <__aeabi_dmul>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f4 fb87 	bl	80001d8 <__aeabi_dsub>
 800baca:	ec53 2b18 	vmov	r2, r3, d8
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	f7f4 fb7f 	bl	80001d8 <__aeabi_dsub>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4650      	mov	r0, sl
 800bae0:	4659      	mov	r1, fp
 800bae2:	f7f4 fb79 	bl	80001d8 <__aeabi_dsub>
 800bae6:	4642      	mov	r2, r8
 800bae8:	464b      	mov	r3, r9
 800baea:	f7f4 fd2d 	bl	8000548 <__aeabi_dmul>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4630      	mov	r0, r6
 800baf4:	4639      	mov	r1, r7
 800baf6:	f7f4 fb6f 	bl	80001d8 <__aeabi_dsub>
 800bafa:	ec53 2b19 	vmov	r2, r3, d9
 800bafe:	f7f4 fd23 	bl	8000548 <__aeabi_dmul>
 800bb02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb06:	ec41 0b18 	vmov	d8, r0, r1
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	f7f4 fd1b 	bl	8000548 <__aeabi_dmul>
 800bb12:	a37d      	add	r3, pc, #500	; (adr r3, 800bd08 <__ieee754_pow+0x6f0>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	f7f4 fd14 	bl	8000548 <__aeabi_dmul>
 800bb20:	a37b      	add	r3, pc, #492	; (adr r3, 800bd10 <__ieee754_pow+0x6f8>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f7f4 fb59 	bl	80001dc <__adddf3>
 800bb2a:	4622      	mov	r2, r4
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	f7f4 fd0b 	bl	8000548 <__aeabi_dmul>
 800bb32:	a379      	add	r3, pc, #484	; (adr r3, 800bd18 <__ieee754_pow+0x700>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	f7f4 fb50 	bl	80001dc <__adddf3>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	462b      	mov	r3, r5
 800bb40:	f7f4 fd02 	bl	8000548 <__aeabi_dmul>
 800bb44:	a376      	add	r3, pc, #472	; (adr r3, 800bd20 <__ieee754_pow+0x708>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fb47 	bl	80001dc <__adddf3>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	462b      	mov	r3, r5
 800bb52:	f7f4 fcf9 	bl	8000548 <__aeabi_dmul>
 800bb56:	a374      	add	r3, pc, #464	; (adr r3, 800bd28 <__ieee754_pow+0x710>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f7f4 fb3e 	bl	80001dc <__adddf3>
 800bb60:	4622      	mov	r2, r4
 800bb62:	462b      	mov	r3, r5
 800bb64:	f7f4 fcf0 	bl	8000548 <__aeabi_dmul>
 800bb68:	a371      	add	r3, pc, #452	; (adr r3, 800bd30 <__ieee754_pow+0x718>)
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f7f4 fb35 	bl	80001dc <__adddf3>
 800bb72:	4622      	mov	r2, r4
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	462b      	mov	r3, r5
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 fce3 	bl	8000548 <__aeabi_dmul>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4630      	mov	r0, r6
 800bb88:	4639      	mov	r1, r7
 800bb8a:	f7f4 fcdd 	bl	8000548 <__aeabi_dmul>
 800bb8e:	4642      	mov	r2, r8
 800bb90:	4604      	mov	r4, r0
 800bb92:	460d      	mov	r5, r1
 800bb94:	464b      	mov	r3, r9
 800bb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb9a:	f7f4 fb1f 	bl	80001dc <__adddf3>
 800bb9e:	ec53 2b18 	vmov	r2, r3, d8
 800bba2:	f7f4 fcd1 	bl	8000548 <__aeabi_dmul>
 800bba6:	4622      	mov	r2, r4
 800bba8:	462b      	mov	r3, r5
 800bbaa:	f7f4 fb17 	bl	80001dc <__adddf3>
 800bbae:	4642      	mov	r2, r8
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	468b      	mov	fp, r1
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 fcc5 	bl	8000548 <__aeabi_dmul>
 800bbbe:	4b6c      	ldr	r3, [pc, #432]	; (800bd70 <__ieee754_pow+0x758>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460f      	mov	r7, r1
 800bbc6:	f7f4 fb09 	bl	80001dc <__adddf3>
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	f7f4 fb05 	bl	80001dc <__adddf3>
 800bbd2:	9c04      	ldr	r4, [sp, #16]
 800bbd4:	460d      	mov	r5, r1
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4640      	mov	r0, r8
 800bbdc:	4649      	mov	r1, r9
 800bbde:	f7f4 fcb3 	bl	8000548 <__aeabi_dmul>
 800bbe2:	4b63      	ldr	r3, [pc, #396]	; (800bd70 <__ieee754_pow+0x758>)
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4620      	mov	r0, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	f7f4 faf3 	bl	80001d8 <__aeabi_dsub>
 800bbf2:	4632      	mov	r2, r6
 800bbf4:	463b      	mov	r3, r7
 800bbf6:	f7f4 faef 	bl	80001d8 <__aeabi_dsub>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4650      	mov	r0, sl
 800bc00:	4659      	mov	r1, fp
 800bc02:	f7f4 fae9 	bl	80001d8 <__aeabi_dsub>
 800bc06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc0a:	f7f4 fc9d 	bl	8000548 <__aeabi_dmul>
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4606      	mov	r6, r0
 800bc12:	460f      	mov	r7, r1
 800bc14:	462b      	mov	r3, r5
 800bc16:	ec51 0b18 	vmov	r0, r1, d8
 800bc1a:	f7f4 fc95 	bl	8000548 <__aeabi_dmul>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4630      	mov	r0, r6
 800bc24:	4639      	mov	r1, r7
 800bc26:	f7f4 fad9 	bl	80001dc <__adddf3>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f4 fad1 	bl	80001dc <__adddf3>
 800bc3a:	9c04      	ldr	r4, [sp, #16]
 800bc3c:	a33e      	add	r3, pc, #248	; (adr r3, 800bd38 <__ieee754_pow+0x720>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	4620      	mov	r0, r4
 800bc44:	460d      	mov	r5, r1
 800bc46:	f7f4 fc7f 	bl	8000548 <__aeabi_dmul>
 800bc4a:	4642      	mov	r2, r8
 800bc4c:	ec41 0b18 	vmov	d8, r0, r1
 800bc50:	464b      	mov	r3, r9
 800bc52:	4620      	mov	r0, r4
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f4 fabf 	bl	80001d8 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4630      	mov	r0, r6
 800bc60:	4639      	mov	r1, r7
 800bc62:	f7f4 fab9 	bl	80001d8 <__aeabi_dsub>
 800bc66:	a336      	add	r3, pc, #216	; (adr r3, 800bd40 <__ieee754_pow+0x728>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fc6c 	bl	8000548 <__aeabi_dmul>
 800bc70:	a335      	add	r3, pc, #212	; (adr r3, 800bd48 <__ieee754_pow+0x730>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	4606      	mov	r6, r0
 800bc78:	460f      	mov	r7, r1
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	f7f4 fc63 	bl	8000548 <__aeabi_dmul>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4630      	mov	r0, r6
 800bc88:	4639      	mov	r1, r7
 800bc8a:	f7f4 faa7 	bl	80001dc <__adddf3>
 800bc8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc90:	4b38      	ldr	r3, [pc, #224]	; (800bd74 <__ieee754_pow+0x75c>)
 800bc92:	4413      	add	r3, r2
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f7f4 faa0 	bl	80001dc <__adddf3>
 800bc9c:	4682      	mov	sl, r0
 800bc9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bca0:	468b      	mov	fp, r1
 800bca2:	f7f4 fbe7 	bl	8000474 <__aeabi_i2d>
 800bca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bca8:	4b33      	ldr	r3, [pc, #204]	; (800bd78 <__ieee754_pow+0x760>)
 800bcaa:	4413      	add	r3, r2
 800bcac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	460f      	mov	r7, r1
 800bcb4:	4652      	mov	r2, sl
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	ec51 0b18 	vmov	r0, r1, d8
 800bcbc:	f7f4 fa8e 	bl	80001dc <__adddf3>
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	f7f4 fa8a 	bl	80001dc <__adddf3>
 800bcc8:	4632      	mov	r2, r6
 800bcca:	463b      	mov	r3, r7
 800bccc:	f7f4 fa86 	bl	80001dc <__adddf3>
 800bcd0:	9c04      	ldr	r4, [sp, #16]
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	460d      	mov	r5, r1
 800bcda:	f7f4 fa7d 	bl	80001d8 <__aeabi_dsub>
 800bcde:	4642      	mov	r2, r8
 800bce0:	464b      	mov	r3, r9
 800bce2:	f7f4 fa79 	bl	80001d8 <__aeabi_dsub>
 800bce6:	ec53 2b18 	vmov	r2, r3, d8
 800bcea:	f7f4 fa75 	bl	80001d8 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	e606      	b.n	800b906 <__ieee754_pow+0x2ee>
 800bcf8:	2401      	movs	r4, #1
 800bcfa:	e6a0      	b.n	800ba3e <__ieee754_pow+0x426>
 800bcfc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bd50 <__ieee754_pow+0x738>
 800bd00:	e60d      	b.n	800b91e <__ieee754_pow+0x306>
 800bd02:	bf00      	nop
 800bd04:	f3af 8000 	nop.w
 800bd08:	4a454eef 	.word	0x4a454eef
 800bd0c:	3fca7e28 	.word	0x3fca7e28
 800bd10:	93c9db65 	.word	0x93c9db65
 800bd14:	3fcd864a 	.word	0x3fcd864a
 800bd18:	a91d4101 	.word	0xa91d4101
 800bd1c:	3fd17460 	.word	0x3fd17460
 800bd20:	518f264d 	.word	0x518f264d
 800bd24:	3fd55555 	.word	0x3fd55555
 800bd28:	db6fabff 	.word	0xdb6fabff
 800bd2c:	3fdb6db6 	.word	0x3fdb6db6
 800bd30:	33333303 	.word	0x33333303
 800bd34:	3fe33333 	.word	0x3fe33333
 800bd38:	e0000000 	.word	0xe0000000
 800bd3c:	3feec709 	.word	0x3feec709
 800bd40:	dc3a03fd 	.word	0xdc3a03fd
 800bd44:	3feec709 	.word	0x3feec709
 800bd48:	145b01f5 	.word	0x145b01f5
 800bd4c:	be3e2fe0 	.word	0xbe3e2fe0
 800bd50:	00000000 	.word	0x00000000
 800bd54:	3ff00000 	.word	0x3ff00000
 800bd58:	7ff00000 	.word	0x7ff00000
 800bd5c:	43400000 	.word	0x43400000
 800bd60:	0003988e 	.word	0x0003988e
 800bd64:	000bb679 	.word	0x000bb679
 800bd68:	0800db20 	.word	0x0800db20
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	40080000 	.word	0x40080000
 800bd74:	0800db40 	.word	0x0800db40
 800bd78:	0800db30 	.word	0x0800db30
 800bd7c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c054 <__ieee754_pow+0xa3c>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fa29 	bl	80001dc <__adddf3>
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	ec41 0b1a 	vmov	d10, r0, r1
 800bd90:	462b      	mov	r3, r5
 800bd92:	4630      	mov	r0, r6
 800bd94:	4639      	mov	r1, r7
 800bd96:	f7f4 fa1f 	bl	80001d8 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	ec51 0b1a 	vmov	r0, r1, d10
 800bda2:	f7f4 fe61 	bl	8000a68 <__aeabi_dcmpgt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f47f adf8 	bne.w	800b99c <__ieee754_pow+0x384>
 800bdac:	4aa4      	ldr	r2, [pc, #656]	; (800c040 <__ieee754_pow+0xa28>)
 800bdae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	f340 810b 	ble.w	800bfce <__ieee754_pow+0x9b6>
 800bdb8:	151b      	asrs	r3, r3, #20
 800bdba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bdbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bdc2:	fa4a f303 	asr.w	r3, sl, r3
 800bdc6:	445b      	add	r3, fp
 800bdc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bdcc:	4e9d      	ldr	r6, [pc, #628]	; (800c044 <__ieee754_pow+0xa2c>)
 800bdce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bdd2:	4116      	asrs	r6, r2
 800bdd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bdd8:	2000      	movs	r0, #0
 800bdda:	ea23 0106 	bic.w	r1, r3, r6
 800bdde:	f1c2 0214 	rsb	r2, r2, #20
 800bde2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bde6:	fa4a fa02 	asr.w	sl, sl, r2
 800bdea:	f1bb 0f00 	cmp.w	fp, #0
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	bfb8      	it	lt
 800bdf8:	f1ca 0a00 	rsblt	sl, sl, #0
 800bdfc:	f7f4 f9ec 	bl	80001d8 <__aeabi_dsub>
 800be00:	ec41 0b19 	vmov	d9, r0, r1
 800be04:	4642      	mov	r2, r8
 800be06:	464b      	mov	r3, r9
 800be08:	ec51 0b19 	vmov	r0, r1, d9
 800be0c:	f7f4 f9e6 	bl	80001dc <__adddf3>
 800be10:	2400      	movs	r4, #0
 800be12:	a379      	add	r3, pc, #484	; (adr r3, 800bff8 <__ieee754_pow+0x9e0>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	4620      	mov	r0, r4
 800be1a:	460d      	mov	r5, r1
 800be1c:	f7f4 fb94 	bl	8000548 <__aeabi_dmul>
 800be20:	ec53 2b19 	vmov	r2, r3, d9
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 f9d4 	bl	80001d8 <__aeabi_dsub>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 f9ce 	bl	80001d8 <__aeabi_dsub>
 800be3c:	a370      	add	r3, pc, #448	; (adr r3, 800c000 <__ieee754_pow+0x9e8>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 fb81 	bl	8000548 <__aeabi_dmul>
 800be46:	a370      	add	r3, pc, #448	; (adr r3, 800c008 <__ieee754_pow+0x9f0>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	4680      	mov	r8, r0
 800be4e:	4689      	mov	r9, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fb78 	bl	8000548 <__aeabi_dmul>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4640      	mov	r0, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	f7f4 f9bc 	bl	80001dc <__adddf3>
 800be64:	4604      	mov	r4, r0
 800be66:	460d      	mov	r5, r1
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4630      	mov	r0, r6
 800be6e:	4639      	mov	r1, r7
 800be70:	f7f4 f9b4 	bl	80001dc <__adddf3>
 800be74:	4632      	mov	r2, r6
 800be76:	463b      	mov	r3, r7
 800be78:	4680      	mov	r8, r0
 800be7a:	4689      	mov	r9, r1
 800be7c:	f7f4 f9ac 	bl	80001d8 <__aeabi_dsub>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 f9a6 	bl	80001d8 <__aeabi_dsub>
 800be8c:	4642      	mov	r2, r8
 800be8e:	4606      	mov	r6, r0
 800be90:	460f      	mov	r7, r1
 800be92:	464b      	mov	r3, r9
 800be94:	4640      	mov	r0, r8
 800be96:	4649      	mov	r1, r9
 800be98:	f7f4 fb56 	bl	8000548 <__aeabi_dmul>
 800be9c:	a35c      	add	r3, pc, #368	; (adr r3, 800c010 <__ieee754_pow+0x9f8>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	f7f4 fb4f 	bl	8000548 <__aeabi_dmul>
 800beaa:	a35b      	add	r3, pc, #364	; (adr r3, 800c018 <__ieee754_pow+0xa00>)
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f7f4 f992 	bl	80001d8 <__aeabi_dsub>
 800beb4:	4622      	mov	r2, r4
 800beb6:	462b      	mov	r3, r5
 800beb8:	f7f4 fb46 	bl	8000548 <__aeabi_dmul>
 800bebc:	a358      	add	r3, pc, #352	; (adr r3, 800c020 <__ieee754_pow+0xa08>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f7f4 f98b 	bl	80001dc <__adddf3>
 800bec6:	4622      	mov	r2, r4
 800bec8:	462b      	mov	r3, r5
 800beca:	f7f4 fb3d 	bl	8000548 <__aeabi_dmul>
 800bece:	a356      	add	r3, pc, #344	; (adr r3, 800c028 <__ieee754_pow+0xa10>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f7f4 f980 	bl	80001d8 <__aeabi_dsub>
 800bed8:	4622      	mov	r2, r4
 800beda:	462b      	mov	r3, r5
 800bedc:	f7f4 fb34 	bl	8000548 <__aeabi_dmul>
 800bee0:	a353      	add	r3, pc, #332	; (adr r3, 800c030 <__ieee754_pow+0xa18>)
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	f7f4 f979 	bl	80001dc <__adddf3>
 800beea:	4622      	mov	r2, r4
 800beec:	462b      	mov	r3, r5
 800beee:	f7f4 fb2b 	bl	8000548 <__aeabi_dmul>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 f96d 	bl	80001d8 <__aeabi_dsub>
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	f7f4 fb1d 	bl	8000548 <__aeabi_dmul>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	ec41 0b19 	vmov	d9, r0, r1
 800bf14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 f95c 	bl	80001d8 <__aeabi_dsub>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	ec51 0b19 	vmov	r0, r1, d9
 800bf28:	f7f4 fc38 	bl	800079c <__aeabi_ddiv>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	4604      	mov	r4, r0
 800bf30:	460d      	mov	r5, r1
 800bf32:	463b      	mov	r3, r7
 800bf34:	4640      	mov	r0, r8
 800bf36:	4649      	mov	r1, r9
 800bf38:	f7f4 fb06 	bl	8000548 <__aeabi_dmul>
 800bf3c:	4632      	mov	r2, r6
 800bf3e:	463b      	mov	r3, r7
 800bf40:	f7f4 f94c 	bl	80001dc <__adddf3>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4620      	mov	r0, r4
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	f7f4 f944 	bl	80001d8 <__aeabi_dsub>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	f7f4 f940 	bl	80001d8 <__aeabi_dsub>
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	493a      	ldr	r1, [pc, #232]	; (800c048 <__ieee754_pow+0xa30>)
 800bf5e:	2000      	movs	r0, #0
 800bf60:	f7f4 f93a 	bl	80001d8 <__aeabi_dsub>
 800bf64:	e9cd 0100 	strd	r0, r1, [sp]
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bf6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf72:	da2f      	bge.n	800bfd4 <__ieee754_pow+0x9bc>
 800bf74:	4650      	mov	r0, sl
 800bf76:	ed9d 0b00 	vldr	d0, [sp]
 800bf7a:	f000 f9c5 	bl	800c308 <scalbn>
 800bf7e:	ec51 0b10 	vmov	r0, r1, d0
 800bf82:	ec53 2b18 	vmov	r2, r3, d8
 800bf86:	f7ff bbe0 	b.w	800b74a <__ieee754_pow+0x132>
 800bf8a:	4b30      	ldr	r3, [pc, #192]	; (800c04c <__ieee754_pow+0xa34>)
 800bf8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf90:	429e      	cmp	r6, r3
 800bf92:	f77f af0b 	ble.w	800bdac <__ieee754_pow+0x794>
 800bf96:	4b2e      	ldr	r3, [pc, #184]	; (800c050 <__ieee754_pow+0xa38>)
 800bf98:	440b      	add	r3, r1
 800bf9a:	4303      	orrs	r3, r0
 800bf9c:	d00b      	beq.n	800bfb6 <__ieee754_pow+0x99e>
 800bf9e:	a326      	add	r3, pc, #152	; (adr r3, 800c038 <__ieee754_pow+0xa20>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	ec51 0b18 	vmov	r0, r1, d8
 800bfa8:	f7f4 face 	bl	8000548 <__aeabi_dmul>
 800bfac:	a322      	add	r3, pc, #136	; (adr r3, 800c038 <__ieee754_pow+0xa20>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7ff bbca 	b.w	800b74a <__ieee754_pow+0x132>
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	462b      	mov	r3, r5
 800bfba:	f7f4 f90d 	bl	80001d8 <__aeabi_dsub>
 800bfbe:	4642      	mov	r2, r8
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	f7f4 fd47 	bl	8000a54 <__aeabi_dcmpge>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f43f aef0 	beq.w	800bdac <__ieee754_pow+0x794>
 800bfcc:	e7e7      	b.n	800bf9e <__ieee754_pow+0x986>
 800bfce:	f04f 0a00 	mov.w	sl, #0
 800bfd2:	e717      	b.n	800be04 <__ieee754_pow+0x7ec>
 800bfd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	e7d2      	b.n	800bf82 <__ieee754_pow+0x96a>
 800bfdc:	491a      	ldr	r1, [pc, #104]	; (800c048 <__ieee754_pow+0xa30>)
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f7ff bb9e 	b.w	800b720 <__ieee754_pow+0x108>
 800bfe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfe8:	f7ff bb9a 	b.w	800b720 <__ieee754_pow+0x108>
 800bfec:	9000      	str	r0, [sp, #0]
 800bfee:	f7ff bb76 	b.w	800b6de <__ieee754_pow+0xc6>
 800bff2:	2100      	movs	r1, #0
 800bff4:	f7ff bb60 	b.w	800b6b8 <__ieee754_pow+0xa0>
 800bff8:	00000000 	.word	0x00000000
 800bffc:	3fe62e43 	.word	0x3fe62e43
 800c000:	fefa39ef 	.word	0xfefa39ef
 800c004:	3fe62e42 	.word	0x3fe62e42
 800c008:	0ca86c39 	.word	0x0ca86c39
 800c00c:	be205c61 	.word	0xbe205c61
 800c010:	72bea4d0 	.word	0x72bea4d0
 800c014:	3e663769 	.word	0x3e663769
 800c018:	c5d26bf1 	.word	0xc5d26bf1
 800c01c:	3ebbbd41 	.word	0x3ebbbd41
 800c020:	af25de2c 	.word	0xaf25de2c
 800c024:	3f11566a 	.word	0x3f11566a
 800c028:	16bebd93 	.word	0x16bebd93
 800c02c:	3f66c16c 	.word	0x3f66c16c
 800c030:	5555553e 	.word	0x5555553e
 800c034:	3fc55555 	.word	0x3fc55555
 800c038:	c2f8f359 	.word	0xc2f8f359
 800c03c:	01a56e1f 	.word	0x01a56e1f
 800c040:	3fe00000 	.word	0x3fe00000
 800c044:	000fffff 	.word	0x000fffff
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	4090cbff 	.word	0x4090cbff
 800c050:	3f6f3400 	.word	0x3f6f3400
 800c054:	652b82fe 	.word	0x652b82fe
 800c058:	3c971547 	.word	0x3c971547

0800c05c <__ieee754_sqrt>:
 800c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c060:	ec55 4b10 	vmov	r4, r5, d0
 800c064:	4e56      	ldr	r6, [pc, #344]	; (800c1c0 <__ieee754_sqrt+0x164>)
 800c066:	43ae      	bics	r6, r5
 800c068:	ee10 0a10 	vmov	r0, s0
 800c06c:	ee10 3a10 	vmov	r3, s0
 800c070:	4629      	mov	r1, r5
 800c072:	462a      	mov	r2, r5
 800c074:	d110      	bne.n	800c098 <__ieee754_sqrt+0x3c>
 800c076:	ee10 2a10 	vmov	r2, s0
 800c07a:	462b      	mov	r3, r5
 800c07c:	f7f4 fa64 	bl	8000548 <__aeabi_dmul>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 f8a8 	bl	80001dc <__adddf3>
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	ec45 4b10 	vmov	d0, r4, r5
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c098:	2d00      	cmp	r5, #0
 800c09a:	dc10      	bgt.n	800c0be <__ieee754_sqrt+0x62>
 800c09c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0a0:	4330      	orrs	r0, r6
 800c0a2:	d0f5      	beq.n	800c090 <__ieee754_sqrt+0x34>
 800c0a4:	b15d      	cbz	r5, 800c0be <__ieee754_sqrt+0x62>
 800c0a6:	ee10 2a10 	vmov	r2, s0
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	ee10 0a10 	vmov	r0, s0
 800c0b0:	f7f4 f892 	bl	80001d8 <__aeabi_dsub>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	f7f4 fb70 	bl	800079c <__aeabi_ddiv>
 800c0bc:	e7e6      	b.n	800c08c <__ieee754_sqrt+0x30>
 800c0be:	1509      	asrs	r1, r1, #20
 800c0c0:	d076      	beq.n	800c1b0 <__ieee754_sqrt+0x154>
 800c0c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c0c6:	07ce      	lsls	r6, r1, #31
 800c0c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c0cc:	bf5e      	ittt	pl
 800c0ce:	0fda      	lsrpl	r2, r3, #31
 800c0d0:	005b      	lslpl	r3, r3, #1
 800c0d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c0d6:	0fda      	lsrs	r2, r3, #31
 800c0d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c0dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	106d      	asrs	r5, r5, #1
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	f04f 0e16 	mov.w	lr, #22
 800c0ea:	4684      	mov	ip, r0
 800c0ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0f0:	eb0c 0401 	add.w	r4, ip, r1
 800c0f4:	4294      	cmp	r4, r2
 800c0f6:	bfde      	ittt	le
 800c0f8:	1b12      	suble	r2, r2, r4
 800c0fa:	eb04 0c01 	addle.w	ip, r4, r1
 800c0fe:	1840      	addle	r0, r0, r1
 800c100:	0052      	lsls	r2, r2, #1
 800c102:	f1be 0e01 	subs.w	lr, lr, #1
 800c106:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c10a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c10e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c112:	d1ed      	bne.n	800c0f0 <__ieee754_sqrt+0x94>
 800c114:	4671      	mov	r1, lr
 800c116:	2720      	movs	r7, #32
 800c118:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c11c:	4562      	cmp	r2, ip
 800c11e:	eb04 060e 	add.w	r6, r4, lr
 800c122:	dc02      	bgt.n	800c12a <__ieee754_sqrt+0xce>
 800c124:	d113      	bne.n	800c14e <__ieee754_sqrt+0xf2>
 800c126:	429e      	cmp	r6, r3
 800c128:	d811      	bhi.n	800c14e <__ieee754_sqrt+0xf2>
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	eb06 0e04 	add.w	lr, r6, r4
 800c130:	da43      	bge.n	800c1ba <__ieee754_sqrt+0x15e>
 800c132:	f1be 0f00 	cmp.w	lr, #0
 800c136:	db40      	blt.n	800c1ba <__ieee754_sqrt+0x15e>
 800c138:	f10c 0801 	add.w	r8, ip, #1
 800c13c:	eba2 020c 	sub.w	r2, r2, ip
 800c140:	429e      	cmp	r6, r3
 800c142:	bf88      	it	hi
 800c144:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c148:	1b9b      	subs	r3, r3, r6
 800c14a:	4421      	add	r1, r4
 800c14c:	46c4      	mov	ip, r8
 800c14e:	0052      	lsls	r2, r2, #1
 800c150:	3f01      	subs	r7, #1
 800c152:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c156:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c15a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c15e:	d1dd      	bne.n	800c11c <__ieee754_sqrt+0xc0>
 800c160:	4313      	orrs	r3, r2
 800c162:	d006      	beq.n	800c172 <__ieee754_sqrt+0x116>
 800c164:	1c4c      	adds	r4, r1, #1
 800c166:	bf13      	iteet	ne
 800c168:	3101      	addne	r1, #1
 800c16a:	3001      	addeq	r0, #1
 800c16c:	4639      	moveq	r1, r7
 800c16e:	f021 0101 	bicne.w	r1, r1, #1
 800c172:	1043      	asrs	r3, r0, #1
 800c174:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c178:	0849      	lsrs	r1, r1, #1
 800c17a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c17e:	07c2      	lsls	r2, r0, #31
 800c180:	bf48      	it	mi
 800c182:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c186:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c18a:	460c      	mov	r4, r1
 800c18c:	463d      	mov	r5, r7
 800c18e:	e77f      	b.n	800c090 <__ieee754_sqrt+0x34>
 800c190:	0ada      	lsrs	r2, r3, #11
 800c192:	3815      	subs	r0, #21
 800c194:	055b      	lsls	r3, r3, #21
 800c196:	2a00      	cmp	r2, #0
 800c198:	d0fa      	beq.n	800c190 <__ieee754_sqrt+0x134>
 800c19a:	02d7      	lsls	r7, r2, #11
 800c19c:	d50a      	bpl.n	800c1b4 <__ieee754_sqrt+0x158>
 800c19e:	f1c1 0420 	rsb	r4, r1, #32
 800c1a2:	fa23 f404 	lsr.w	r4, r3, r4
 800c1a6:	1e4d      	subs	r5, r1, #1
 800c1a8:	408b      	lsls	r3, r1
 800c1aa:	4322      	orrs	r2, r4
 800c1ac:	1b41      	subs	r1, r0, r5
 800c1ae:	e788      	b.n	800c0c2 <__ieee754_sqrt+0x66>
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	e7f0      	b.n	800c196 <__ieee754_sqrt+0x13a>
 800c1b4:	0052      	lsls	r2, r2, #1
 800c1b6:	3101      	adds	r1, #1
 800c1b8:	e7ef      	b.n	800c19a <__ieee754_sqrt+0x13e>
 800c1ba:	46e0      	mov	r8, ip
 800c1bc:	e7be      	b.n	800c13c <__ieee754_sqrt+0xe0>
 800c1be:	bf00      	nop
 800c1c0:	7ff00000 	.word	0x7ff00000

0800c1c4 <finite>:
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	ed8d 0b00 	vstr	d0, [sp]
 800c1ca:	9801      	ldr	r0, [sp, #4]
 800c1cc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c1d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c1d4:	0fc0      	lsrs	r0, r0, #31
 800c1d6:	b002      	add	sp, #8
 800c1d8:	4770      	bx	lr
 800c1da:	0000      	movs	r0, r0
 800c1dc:	0000      	movs	r0, r0
	...

0800c1e0 <nan>:
 800c1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c1e8 <nan+0x8>
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	7ff80000 	.word	0x7ff80000

0800c1f0 <rint>:
 800c1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1f2:	ec51 0b10 	vmov	r0, r1, d0
 800c1f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c1fe:	2e13      	cmp	r6, #19
 800c200:	ee10 4a10 	vmov	r4, s0
 800c204:	460b      	mov	r3, r1
 800c206:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c20a:	dc58      	bgt.n	800c2be <rint+0xce>
 800c20c:	2e00      	cmp	r6, #0
 800c20e:	da2b      	bge.n	800c268 <rint+0x78>
 800c210:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c214:	4302      	orrs	r2, r0
 800c216:	d023      	beq.n	800c260 <rint+0x70>
 800c218:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c21c:	4302      	orrs	r2, r0
 800c21e:	4254      	negs	r4, r2
 800c220:	4314      	orrs	r4, r2
 800c222:	0c4b      	lsrs	r3, r1, #17
 800c224:	0b24      	lsrs	r4, r4, #12
 800c226:	045b      	lsls	r3, r3, #17
 800c228:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c22c:	ea44 0103 	orr.w	r1, r4, r3
 800c230:	4b32      	ldr	r3, [pc, #200]	; (800c2fc <rint+0x10c>)
 800c232:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c236:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4630      	mov	r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	f7f3 ffcb 	bl	80001dc <__adddf3>
 800c246:	e9cd 0100 	strd	r0, r1, [sp]
 800c24a:	463b      	mov	r3, r7
 800c24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c250:	4632      	mov	r2, r6
 800c252:	f7f3 ffc1 	bl	80001d8 <__aeabi_dsub>
 800c256:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c25a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c25e:	4639      	mov	r1, r7
 800c260:	ec41 0b10 	vmov	d0, r0, r1
 800c264:	b003      	add	sp, #12
 800c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c268:	4a25      	ldr	r2, [pc, #148]	; (800c300 <rint+0x110>)
 800c26a:	4132      	asrs	r2, r6
 800c26c:	ea01 0702 	and.w	r7, r1, r2
 800c270:	4307      	orrs	r7, r0
 800c272:	d0f5      	beq.n	800c260 <rint+0x70>
 800c274:	0851      	lsrs	r1, r2, #1
 800c276:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c27a:	4314      	orrs	r4, r2
 800c27c:	d00c      	beq.n	800c298 <rint+0xa8>
 800c27e:	ea23 0201 	bic.w	r2, r3, r1
 800c282:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c286:	2e13      	cmp	r6, #19
 800c288:	fa43 f606 	asr.w	r6, r3, r6
 800c28c:	bf0c      	ite	eq
 800c28e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c292:	2400      	movne	r4, #0
 800c294:	ea42 0306 	orr.w	r3, r2, r6
 800c298:	4918      	ldr	r1, [pc, #96]	; (800c2fc <rint+0x10c>)
 800c29a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c29e:	4622      	mov	r2, r4
 800c2a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	f7f3 ff98 	bl	80001dc <__adddf3>
 800c2ac:	e9cd 0100 	strd	r0, r1, [sp]
 800c2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f3 ff8e 	bl	80001d8 <__aeabi_dsub>
 800c2bc:	e7d0      	b.n	800c260 <rint+0x70>
 800c2be:	2e33      	cmp	r6, #51	; 0x33
 800c2c0:	dd07      	ble.n	800c2d2 <rint+0xe2>
 800c2c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c2c6:	d1cb      	bne.n	800c260 <rint+0x70>
 800c2c8:	ee10 2a10 	vmov	r2, s0
 800c2cc:	f7f3 ff86 	bl	80001dc <__adddf3>
 800c2d0:	e7c6      	b.n	800c260 <rint+0x70>
 800c2d2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c2d6:	f04f 36ff 	mov.w	r6, #4294967295
 800c2da:	40d6      	lsrs	r6, r2
 800c2dc:	4230      	tst	r0, r6
 800c2de:	d0bf      	beq.n	800c260 <rint+0x70>
 800c2e0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c2e4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c2e8:	bf1f      	itttt	ne
 800c2ea:	ea24 0101 	bicne.w	r1, r4, r1
 800c2ee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c2f2:	fa44 f202 	asrne.w	r2, r4, r2
 800c2f6:	ea41 0402 	orrne.w	r4, r1, r2
 800c2fa:	e7cd      	b.n	800c298 <rint+0xa8>
 800c2fc:	0800db50 	.word	0x0800db50
 800c300:	000fffff 	.word	0x000fffff
 800c304:	00000000 	.word	0x00000000

0800c308 <scalbn>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	ec55 4b10 	vmov	r4, r5, d0
 800c30e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c312:	4606      	mov	r6, r0
 800c314:	462b      	mov	r3, r5
 800c316:	b99a      	cbnz	r2, 800c340 <scalbn+0x38>
 800c318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c31c:	4323      	orrs	r3, r4
 800c31e:	d036      	beq.n	800c38e <scalbn+0x86>
 800c320:	4b39      	ldr	r3, [pc, #228]	; (800c408 <scalbn+0x100>)
 800c322:	4629      	mov	r1, r5
 800c324:	ee10 0a10 	vmov	r0, s0
 800c328:	2200      	movs	r2, #0
 800c32a:	f7f4 f90d 	bl	8000548 <__aeabi_dmul>
 800c32e:	4b37      	ldr	r3, [pc, #220]	; (800c40c <scalbn+0x104>)
 800c330:	429e      	cmp	r6, r3
 800c332:	4604      	mov	r4, r0
 800c334:	460d      	mov	r5, r1
 800c336:	da10      	bge.n	800c35a <scalbn+0x52>
 800c338:	a32b      	add	r3, pc, #172	; (adr r3, 800c3e8 <scalbn+0xe0>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	e03a      	b.n	800c3b6 <scalbn+0xae>
 800c340:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c344:	428a      	cmp	r2, r1
 800c346:	d10c      	bne.n	800c362 <scalbn+0x5a>
 800c348:	ee10 2a10 	vmov	r2, s0
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	f7f3 ff44 	bl	80001dc <__adddf3>
 800c354:	4604      	mov	r4, r0
 800c356:	460d      	mov	r5, r1
 800c358:	e019      	b.n	800c38e <scalbn+0x86>
 800c35a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c35e:	460b      	mov	r3, r1
 800c360:	3a36      	subs	r2, #54	; 0x36
 800c362:	4432      	add	r2, r6
 800c364:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c368:	428a      	cmp	r2, r1
 800c36a:	dd08      	ble.n	800c37e <scalbn+0x76>
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	a120      	add	r1, pc, #128	; (adr r1, 800c3f0 <scalbn+0xe8>)
 800c370:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c374:	da1c      	bge.n	800c3b0 <scalbn+0xa8>
 800c376:	a120      	add	r1, pc, #128	; (adr r1, 800c3f8 <scalbn+0xf0>)
 800c378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c37c:	e018      	b.n	800c3b0 <scalbn+0xa8>
 800c37e:	2a00      	cmp	r2, #0
 800c380:	dd08      	ble.n	800c394 <scalbn+0x8c>
 800c382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c38a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c38e:	ec45 4b10 	vmov	d0, r4, r5
 800c392:	bd70      	pop	{r4, r5, r6, pc}
 800c394:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c398:	da19      	bge.n	800c3ce <scalbn+0xc6>
 800c39a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c39e:	429e      	cmp	r6, r3
 800c3a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c3a4:	dd0a      	ble.n	800c3bc <scalbn+0xb4>
 800c3a6:	a112      	add	r1, pc, #72	; (adr r1, 800c3f0 <scalbn+0xe8>)
 800c3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1e2      	bne.n	800c376 <scalbn+0x6e>
 800c3b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c3f0 <scalbn+0xe8>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f4 f8c7 	bl	8000548 <__aeabi_dmul>
 800c3ba:	e7cb      	b.n	800c354 <scalbn+0x4c>
 800c3bc:	a10a      	add	r1, pc, #40	; (adr r1, 800c3e8 <scalbn+0xe0>)
 800c3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0b8      	beq.n	800c338 <scalbn+0x30>
 800c3c6:	a10e      	add	r1, pc, #56	; (adr r1, 800c400 <scalbn+0xf8>)
 800c3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3cc:	e7b4      	b.n	800c338 <scalbn+0x30>
 800c3ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3d2:	3236      	adds	r2, #54	; 0x36
 800c3d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <scalbn+0x108>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	e7e8      	b.n	800c3b6 <scalbn+0xae>
 800c3e4:	f3af 8000 	nop.w
 800c3e8:	c2f8f359 	.word	0xc2f8f359
 800c3ec:	01a56e1f 	.word	0x01a56e1f
 800c3f0:	8800759c 	.word	0x8800759c
 800c3f4:	7e37e43c 	.word	0x7e37e43c
 800c3f8:	8800759c 	.word	0x8800759c
 800c3fc:	fe37e43c 	.word	0xfe37e43c
 800c400:	c2f8f359 	.word	0xc2f8f359
 800c404:	81a56e1f 	.word	0x81a56e1f
 800c408:	43500000 	.word	0x43500000
 800c40c:	ffff3cb0 	.word	0xffff3cb0
 800c410:	3c900000 	.word	0x3c900000

0800c414 <_init>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr

0800c420 <_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr
